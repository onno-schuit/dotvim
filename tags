!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
%	plugin/matchit.vim	/^nnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'n') <CR>$/;"	m
%	plugin/matchit.vim	/^onoremap <silent> %  v:<C-U>call <SID>Match_wrapper('',1,'o') <CR>$/;"	m
%	plugin/matchit.vim	/^vnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'v') <CR>m'gv``$/;"	m
.	autoload/repeat.vim	/^nnoremap <silent> .     :<C-U>call <SID>repeat(v:count)<CR>$/;"	m
012l	sessions/default.vim	/^normal! 012l$/;"	m
<2-LeftMouse>	plugin/project.vim	/^        nnoremap <buffer> <silent> <2-LeftMouse>   \\|:call <SID>DoFoldOrOpenEntry('', 'e')<CR>$/;"	m
<2-RightMouse>	plugin/project.vim	/^        nmap     <buffer> <silent> <2-RightMouse> <space>$/;"	m
<3-LeftMouse>	plugin/project.vim	/^        nnoremap <buffer> <silent> <3-LeftMouse>  <Nop>$/;"	m
<3-RightMouse>	plugin/project.vim	/^        nmap     <buffer> <silent> <3-RightMouse> <space>$/;"	m
<4-RightMouse>	plugin/project.vim	/^        nmap     <buffer> <silent> <4-RightMouse> <space>$/;"	m
<C-2-LeftMouse>	plugin/project.vim	/^        nmap     <buffer> <silent> <C-2-LeftMouse> <C-Return>$/;"	m
<C-@><C-@>c	plugin/cscope_maps.vim	/^    nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>$/;"	m
<C-@><C-@>d	plugin/cscope_maps.vim	/^    nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>$/;"	m
<C-@><C-@>e	plugin/cscope_maps.vim	/^    nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>$/;"	m
<C-@><C-@>f	plugin/cscope_maps.vim	/^    nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>	$/;"	m
<C-@><C-@>g	plugin/cscope_maps.vim	/^    nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>$/;"	m
<C-@><C-@>i	plugin/cscope_maps.vim	/^    nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>	$/;"	m
<C-@><C-@>s	plugin/cscope_maps.vim	/^    nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>$/;"	m
<C-@><C-@>t	plugin/cscope_maps.vim	/^    nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>$/;"	m
<C-@>c	plugin/cscope_maps.vim	/^    nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<C-@>d	plugin/cscope_maps.vim	/^    nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<C-@>e	plugin/cscope_maps.vim	/^    nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<C-@>f	plugin/cscope_maps.vim	/^    nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>	$/;"	m
<C-@>g	plugin/cscope_maps.vim	/^    nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<C-@>i	plugin/cscope_maps.vim	/^    nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>	$/;"	m
<C-@>s	plugin/cscope_maps.vim	/^    nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<C-@>t	plugin/cscope_maps.vim	/^    nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<C-Down>	plugin/minibufexpl.vim	/^  noremap <C-Down>  <C-W>j$/;"	m
<C-Down>	plugin/project.vim	/^        nnoremap <buffer> <silent> <C-Down> \\|:silent call <SID>MoveDown()<CR>$/;"	m
<C-G>S	plugin/surround.vim	/^  imap      <C-G>S <Plug>ISurround$/;"	m
<C-G>s	plugin/surround.vim	/^  imap      <C-G>s <Plug>Isurround$/;"	m
<C-H>	plugin/minibufexpl.vim	/^  noremap <C-H> <C-W>h$/;"	m
<C-J>	plugin/minibufexpl.vim	/^  noremap <C-J> <C-W>j$/;"	m
<C-K>	plugin/minibufexpl.vim	/^  noremap <C-K> <C-W>k$/;"	m
<C-L>	plugin/minibufexpl.vim	/^  noremap <C-L> <C-W>l$/;"	m
<C-Left>	plugin/minibufexpl.vim	/^  noremap <C-Left>  <C-W>h$/;"	m
<C-LeftMouse>	plugin/project.vim	/^        nnoremap <buffer> <silent> <C-LeftMouse>   <LeftMouse>$/;"	m
<C-R>	autoload/repeat.vim	/^nnoremap <silent> <C-R> :<C-U>call <SID>wrap("\\<Lt>C-R>",v:count)<CR>$/;"	m
<C-Return>	plugin/project.vim	/^        nnoremap <buffer> <silent> <C-Return> \\|:call <SID>DoFoldOrOpenEntry('silent! only', 'e')<CR>$/;"	m
<C-Right>	plugin/minibufexpl.vim	/^  noremap <C-Right> <C-W>l$/;"	m
<C-S-TAB>	plugin/minibufexpl.vim	/^  noremap <C-S-TAB> :call <SID>CycleBuffer(0)<CR>:<BS>$/;"	m
<C-S-TAB>	plugin/minibufexpl.vim	/^  noremap <C-S-TAB> <C-W>W$/;"	m
<C-S>	plugin/surround.vim	/^    imap    <C-S> <Plug>Isurround$/;"	m
<C-TAB>	plugin/minibufexpl.vim	/^  noremap <C-TAB>   :call <SID>CycleBuffer(1)<CR>:<BS>$/;"	m
<C-TAB>	plugin/minibufexpl.vim	/^  noremap <C-TAB>   <C-W>w$/;"	m
<C-Up>	plugin/minibufexpl.vim	/^  noremap <C-Up>    <C-W>k$/;"	m
<C-Up>	plugin/project.vim	/^        nnoremap <buffer> <silent> <C-Up>   \\|:silent call <SID>MoveUp()<CR>$/;"	m
<C-W><C-O>	plugin/project.vim	/^                nmap <silent> <unique> <C-W><C-O> <C-W>o$/;"	m
<C-W>o	plugin/project.vim	/^                nmap <silent> <unique> <C-W>o <Plug>ProjectOnly$/;"	m
<C-\>c	plugin/cscope_maps.vim	/^    nmap <C-\\>c :cs find c <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<C-\>d	plugin/cscope_maps.vim	/^    nmap <C-\\>d :cs find d <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<C-\>e	plugin/cscope_maps.vim	/^    nmap <C-\\>e :cs find e <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<C-\>f	plugin/cscope_maps.vim	/^    nmap <C-\\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>	$/;"	m
<C-\>g	plugin/cscope_maps.vim	/^    nmap <C-\\>g :cs find g <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<C-\>i	plugin/cscope_maps.vim	/^    nmap <C-\\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>$/;"	m
<C-\>s	plugin/cscope_maps.vim	/^    nmap <C-\\>s :cs find s <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<C-\>t	plugin/cscope_maps.vim	/^    nmap <C-\\>t :cs find t <C-R>=expand("<cword>")<CR><CR>	$/;"	m
<C-^>	plugin/project.vim	/^        nnoremap <buffer> <silent> <C-^> <Nop>$/;"	m
<F12>	plugin/project.vim	/^        nmap <silent> <F12> <Plug>ToggleProject$/;"	m
<F1>	plugin/project.vim	/^        nnoremap <buffer> <F1> :let g:proj_doinghelp = 1<CR><F1>$/;"	m
<F5>	plugin/project.vim	/^        nnoremap <buffer> <silent>           <F5> :call <SID>RefreshEntriesFromDir(1)<CR>$/;"	m
<Leader><F2>	plugin/hexHighlight.vim	/^map <Leader><F2> :call HexHighlight()<Return>$/;"	m
<Leader>f	plugin/SimpleFold.vim	/^    map <unique> <silent> <Leader>f <Plug>SimpleFold_Foldsearch$/;"	m
<Leader>mbc	plugin/minibufexpl.vim	/^  map <unique> <Leader>mbc <Plug>CMiniBufExplorer$/;"	m
<Leader>mbe	plugin/minibufexpl.vim	/^  map <unique> <Leader>mbe <Plug>MiniBufExplorer$/;"	m
<Leader>mbt	plugin/minibufexpl.vim	/^  map <unique> <Leader>mbt <Plug>TMiniBufExplorer$/;"	m
<Leader>mbu	plugin/minibufexpl.vim	/^  map <unique> <Leader>mbu <Plug>UMiniBufExplorer$/;"	m
<Leader>vA	plugin/EasyGrep.vim	/^    map <silent> <Leader>vA <plug>EgMapGrepCurrentWord_A$/;"	m
<Leader>vA	plugin/EasyGrep.vim	/^    vmap <silent> <Leader>vA <plug>EgMapGrepSelection_A$/;"	m
<Leader>vR	plugin/EasyGrep.vim	/^    map <silent> <Leader>vR <plug>EgMapReplaceCurrentWord_R$/;"	m
<Leader>vR	plugin/EasyGrep.vim	/^    vmap <silent> <Leader>vR <plug>EgMapReplaceSelection_R$/;"	m
<Leader>vV	plugin/EasyGrep.vim	/^    map <silent> <Leader>vV <plug>EgMapGrepCurrentWord_V$/;"	m
<Leader>vV	plugin/EasyGrep.vim	/^    vmap <silent> <Leader>vV <plug>EgMapGrepSelection_V$/;"	m
<Leader>va	plugin/EasyGrep.vim	/^    map <silent> <Leader>va <plug>EgMapGrepCurrentWord_a$/;"	m
<Leader>va	plugin/EasyGrep.vim	/^    vmap <silent> <Leader>va <plug>EgMapGrepSelection_a$/;"	m
<Leader>vo	plugin/EasyGrep.vim	/^    map <silent> <Leader>vo <plug>EgMapGrepOptions$/;"	m
<Leader>vr	plugin/EasyGrep.vim	/^    map <silent> <Leader>vr <plug>EgMapReplaceCurrentWord_r$/;"	m
<Leader>vr	plugin/EasyGrep.vim	/^    vmap <silent> <Leader>vr <plug>EgMapReplaceSelection_r$/;"	m
<Leader>vv	plugin/EasyGrep.vim	/^    map <silent> <Leader>vv <plug>EgMapGrepCurrentWord_v$/;"	m
<Leader>vv	plugin/EasyGrep.vim	/^    vmap <silent> <Leader>vv <plug>EgMapGrepSelection_v$/;"	m
<LocalLeader>0	plugin/project.vim	/^        nnoremap <buffer>          <LocalLeader>0 \\|:call <SID>ListSpawn("")<CR>$/;"	m
<LocalLeader><Down>	plugin/project.vim	/^        nmap     <buffer> <silent> <LocalLeader><Down> <C-Down>$/;"	m
<LocalLeader><Up>	plugin/project.vim	/^        nmap     <buffer> <silent> <LocalLeader><Up> <C-Up>$/;"	m
<LocalLeader>C	plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>C :call <SID>CreateEntriesFromDir(1)<CR>$/;"	m
<LocalLeader>E	plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>E :call <SID>OpenEntry(line('.'), '', 'e', 1)<CR>$/;"	m
<LocalLeader>F0	plugin/project.vim	/^        nnoremap <buffer>          <LocalLeader>F0 \\|:call <SID>ListSpawn("_fold")<CR>$/;"	m
<LocalLeader>G	plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>G \\|:call <SID>GrepAll(1, line('.'), "")<CR>$/;"	m
<LocalLeader>I	plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>I :echo Project_GetFname(line('.'))<CR>$/;"	m
<LocalLeader>L	plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>L \\|:call <SID>LoadAll(1, line('.'))<CR>$/;"	m
<LocalLeader>R	plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>R :call <SID>RefreshEntriesFromDir(1)<CR>$/;"	m
<LocalLeader>S	plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>S \\|:call <SID>LoadAllSplit(0, line('.'))<CR>$/;"	m
<LocalLeader>T	plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>T \\|:call <SID>DoFoldOrOpenEntry('', 'tabe')<CR>$/;"	m
<LocalLeader>W	plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>W \\|:call <SID>WipeAll(1, line('.'))<CR>$/;"	m
<LocalLeader>c	plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>c :call <SID>CreateEntriesFromDir(0)<CR>$/;"	m
<LocalLeader>e	plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>e :call <SID>OpenEntry(line('.'), '', '', 0)<CR>$/;"	m
<LocalLeader>f0	plugin/project.vim	/^        nnoremap <buffer>          <LocalLeader>f0 \\|:call <SID>ListSpawn("_fold")<CR>$/;"	m
<LocalLeader>g	plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>g \\|:call <SID>GrepAll(0, line('.'), "")<CR>$/;"	m
<LocalLeader>i	plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>i :echo <SID>RecursivelyConstructDirectives(line('.'))<CR>$/;"	m
<LocalLeader>l	plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>l \\|:call <SID>LoadAll(0, line('.'))<CR>$/;"	m
<LocalLeader>o	plugin/project.vim	/^        nmap     <buffer> <silent> <LocalLeader>o <C-Return>$/;"	m
<LocalLeader>r	plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>r :call <SID>RefreshEntriesFromDir(0)<CR>$/;"	m
<LocalLeader>s	plugin/project.vim	/^        nmap     <buffer> <silent> <LocalLeader>s <S-Return>$/;"	m
<LocalLeader>v	plugin/project.vim	/^        nmap     <buffer> <silent> <LocalLeader>v <M-CR>$/;"	m
<LocalLeader>w	plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>w \\|:call <SID>WipeAll(0, line('.'))<CR>$/;"	m
<M-2-LeftMouse>	plugin/project.vim	/^        nnoremap <buffer> <silent> <M-2-LeftMouse> <M-CR>$/;"	m
<M-CR>	plugin/project.vim	/^        nmap     <buffer> <silent> <M-CR> <Return><C-W>p$/;"	m
<Plug>CMiniBufExplorer	plugin/minibufexpl.vim	/^noremap <unique> <script> <Plug>CMiniBufExplorer :call <SID>StopExplorer(1)<CR>:<BS>$/;"	m
<Plug>Csurround	plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>Dsurround	plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>ISurround	plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>Isurround	plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>MiniBufExplorer	plugin/minibufexpl.vim	/^noremap <unique> <script> <Plug>MiniBufExplorer  :call <SID>StartExplorer(1, -1)<CR>:<BS>$/;"	m
<Plug>ProjectOnly	plugin/project.vim	/^        nnoremap <script> <Plug>ProjectOnly :call <SID>DoProjectOnly()<CR>$/;"	m
<Plug>SimpleFold_Foldsearch	plugin/SimpleFold.vim	/^noremap <unique> <script> <Plug>SimpleFold_Foldsearch <SID>FoldSearch$/;"	m
<Plug>TMiniBufExplorer	plugin/minibufexpl.vim	/^noremap <unique> <script> <Plug>TMiniBufExplorer :call <SID>ToggleExplorer()<CR>:<BS>$/;"	m
<Plug>ToggleProject	plugin/project.vim	/^nnoremap <script> <Plug>ToggleProject :call <SID>DoToggleProject()<CR>$/;"	m
<Plug>UMiniBufExplorer	plugin/minibufexpl.vim	/^noremap <unique> <script> <Plug>UMiniBufExplorer :call <SID>AutoUpdate(-1)<CR>:<BS>$/;"	m
<Plug>VSurround	plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 : 0)<CR>$/;"	m
<Plug>VgSurround	plugin/surround.vim	/^vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 : 1)<CR>$/;"	m
<Plug>Vsurround	plugin/surround.vim	/^vnoremap <silent> <Plug>Vsurround  :<C-U>call <SID>opfunc(visualmode())<CR>$/;"	m
<Plug>YSsurround	plugin/surround.vim	/^nnoremap <silent> <Plug>YSsurround :<C-U>call <SID>opfunc2(v:count1)<CR>$/;"	m
<Plug>YSurround	plugin/surround.vim	/^nnoremap <silent> <Plug>YSurround  :<C-U>set opfunc=<SID>opfunc2<CR>g@$/;"	m
<Plug>Yssurround	plugin/surround.vim	/^nnoremap <silent> <Plug>Yssurround :<C-U>call <SID>opfunc(v:count1)<CR>$/;"	m
<Plug>Ysurround	plugin/surround.vim	/^nnoremap <silent> <Plug>Ysurround  :<C-U>set opfunc=<SID>opfunc<CR>g@$/;"	m
<Plug>unimpairedBlankDown	plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedBlankDown :<C-U>put =repeat(nr2char(10),v:count)<Bar>'[-1<CR>$/;"	m
<Plug>unimpairedBlankUp	plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedBlankUp   :<C-U>put!=repeat(nr2char(10),v:count)<Bar>']+1<CR>$/;"	m
<Plug>unimpairedMoveDown	plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedMoveDown :<C-U>exe 'norm m`'<Bar>exe 'move+'.v:count1<CR>``$/;"	m
<Plug>unimpairedMoveUp	plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedMoveUp   :<C-U>exe 'norm m`'<Bar>exe 'move--'.v:count1<CR>``$/;"	m
<Plug>unimpairedONext	plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedONext     :<C-U>edit `=<SID>FileByOffset(v:count1)`<CR>$/;"	m
<Plug>unimpairedOPrevious	plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedOPrevious :<C-U>edit `=<SID>FileByOffset(-v:count1)`<CR>$/;"	m
<Return>	plugin/project.vim	/^        nnoremap <buffer> <silent> <Return>   \\|:call <SID>DoFoldOrOpenEntry('', 'e')<CR>$/;"	m
<RightMouse>	plugin/project.vim	/^        nmap     <buffer> <silent> <RightMouse>   <space>$/;"	m
<S-2-LeftMouse>	plugin/project.vim	/^        nnoremap <buffer> <silent> <S-2-LeftMouse> \\|:call <SID>DoFoldOrOpenEntry('', 'sp')<CR>$/;"	m
<S-LeftMouse>	plugin/project.vim	/^        nnoremap <buffer> <silent> <S-LeftMouse>   <LeftMouse>$/;"	m
<S-Return>	plugin/project.vim	/^        nnoremap <buffer> <silent> <S-Return> \\|:call <SID>DoFoldOrOpenEntry('', 'sp')<CR>$/;"	m
<SID>FoldSearch	plugin/SimpleFold.vim	/^noremap <SID>FoldSearch :call <SID>Foldsearch("")<cr>$/;"	m
<SID>xx	autoload/rails.vim	/^map <SID>xx <SID>xx$/;"	m
<SID>xx	plugin/SimpleFold.vim	/^map <SID>xx <SID>xx$/;"	m
<c-r><tab>	after/plugin/snipMate.vim	/^ino <silent> <c-r><tab> <c-r>=ShowAvailableSnips()<cr>$/;"	m
<plug>EgMapGrepCurrentWord_A	plugin/EasyGrep.vim	/^    nmap <silent> <unique> <script> <plug>EgMapGrepCurrentWord_A    :call <sid>GrepCurrentWord("add", 1)<CR>$/;"	m
<plug>EgMapGrepCurrentWord_V	plugin/EasyGrep.vim	/^    nmap <silent> <unique> <script> <plug>EgMapGrepCurrentWord_V    :call <sid>GrepCurrentWord("", 1)<CR>$/;"	m
<plug>EgMapGrepCurrentWord_a	plugin/EasyGrep.vim	/^    nmap <silent> <unique> <script> <plug>EgMapGrepCurrentWord_a    :call <sid>GrepCurrentWord("add", 0)<CR>$/;"	m
<plug>EgMapGrepCurrentWord_v	plugin/EasyGrep.vim	/^    nmap <silent> <unique> <script> <plug>EgMapGrepCurrentWord_v    :call <sid>GrepCurrentWord("", 0)<CR>$/;"	m
<plug>EgMapGrepOptions	plugin/EasyGrep.vim	/^    nmap <silent> <unique> <script> <plug>EgMapGrepOptions          :call <sid>GrepOptions()<CR>$/;"	m
<plug>EgMapGrepSelection_A	plugin/EasyGrep.vim	/^    vmap <silent> <unique> <script> <plug>EgMapGrepSelection_A     y:call <sid>GrepSelection("add", 1)<CR>$/;"	m
<plug>EgMapGrepSelection_V	plugin/EasyGrep.vim	/^    vmap <silent> <unique> <script> <plug>EgMapGrepSelection_V     y:call <sid>GrepSelection("", 1)<CR>$/;"	m
<plug>EgMapGrepSelection_a	plugin/EasyGrep.vim	/^    vmap <silent> <unique> <script> <plug>EgMapGrepSelection_a     y:call <sid>GrepSelection("add", 0)<CR>$/;"	m
<plug>EgMapGrepSelection_v	plugin/EasyGrep.vim	/^    vmap <silent> <unique> <script> <plug>EgMapGrepSelection_v     y:call <sid>GrepSelection("", 0)<CR>$/;"	m
<plug>EgMapReplaceCurrentWord_R	plugin/EasyGrep.vim	/^    nmap <silent> <unique> <script> <plug>EgMapReplaceCurrentWord_R :call <sid>ReplaceCurrentWord(1)<CR>$/;"	m
<plug>EgMapReplaceCurrentWord_r	plugin/EasyGrep.vim	/^    nmap <silent> <unique> <script> <plug>EgMapReplaceCurrentWord_r :call <sid>ReplaceCurrentWord(0)<CR>$/;"	m
<plug>EgMapReplaceSelection_R	plugin/EasyGrep.vim	/^    vmap <silent> <unique> <script> <plug>EgMapReplaceSelection_R  y:call <sid>ReplaceSelection(1)<CR>$/;"	m
<plug>EgMapReplaceSelection_r	plugin/EasyGrep.vim	/^    vmap <silent> <unique> <script> <plug>EgMapReplaceSelection_r  y:call <sid>ReplaceSelection(0)<CR>$/;"	m
<s-tab>	after/plugin/snipMate.vim	/^ino <silent> <s-tab> <c-r>=BackwardsSnippet()<cr>$/;"	m
<space>	plugin/project.vim	/^        nnoremap <buffer> <silent> <space>  \\|:silent exec 'vertical resize '.(match(g:proj_flags, '\\Ct')!=-1 && winwidth('.') > g:proj_window_width?(g:proj_window_width):(winwidth('.') + g:proj_window_increment))<CR>$/;"	m
<tab>	after/plugin/snipMate.vim	/^ino <silent> <tab> <c-r>=TriggerSnippet()<cr>$/;"	m
AR	ruby/command-t/Makefile	/^AR = ar$/;"	m
Abbrev	autoload/rails.vim	/^function! s:Abbrev(bang,...) abort$/;"	f
ActivateAll	plugin/EasyGrep.vim	/^function! <sid>ActivateAll()$/;"	f
ActivateBuffers	plugin/EasyGrep.vim	/^function! <sid>ActivateBuffers()$/;"	f
ActivateChoice	plugin/EasyGrep.vim	/^function! s:ActivateChoice(choice)$/;"	f
ActivateTracked	plugin/EasyGrep.vim	/^function! <sid>ActivateTracked()$/;"	f
ActivateUser	plugin/EasyGrep.vim	/^function! <sid>ActivateUser()$/;"	f
AddBracketExpand	autoload/rails.vim	/^function! s:AddBracketExpand(abbr,expn)$/;"	f
AddBufferDirToPatternList	plugin/EasyGrep.vim	/^function! s:AddBufferDirToPatternList(str,sp)$/;"	f
AddColonExpand	autoload/rails.vim	/^function! s:AddColonExpand(abbr,expn)$/;"	f
AddParenExpand	autoload/rails.vim	/^function! s:AddParenExpand(abbr,expn,...)$/;"	f
AddSelectiveExpand	autoload/rails.vim	/^function! s:AddSelectiveExpand(abbr,pat,expn,...)$/;"	f
AddTabExpand	autoload/rails.vim	/^function! s:AddTabExpand(abbr,expn)$/;"	f
Alternate	autoload/rails.vim	/^function! s:Alternate(cmd,line1,line2,count,...)$/;"	f
Asyncer	autoload/l9/async.py	/^class Asyncer:$/;"	c
AutoUpdate	plugin/minibufexpl.vim	/^function! <SID>AutoUpdate(delBufNum)$/;"	f
BINDIR	ruby/command-t/Makefile	/^BINDIR        = $(bindir)$/;"	m
BOnly	plugin/BufOnly.vim	/^command! -nargs=? -complete=buffer -bang BOnly$/;"	c
BackToForwardSlash	plugin/EasyGrep.vim	/^function! s:BackToForwardSlash(arg)$/;"	f
BackwardsSnippet	plugin/snipMate.vim	/^fun! BackwardsSnippet()$/;"	f
Bclose	plugin/bclose.vim	/^command! -bang -complete=buffer -nargs=? Bclose call <SID>Bclose('<bang>', <q-args>)$/;"	c
Bclose	plugin/bclose.vim	/^function! s:Bclose(bang, buffer)$/;"	f
Bonly	plugin/BufOnly.vim	/^command! -nargs=? -complete=buffer -bang Bonly$/;"	c
Bookmark.AddBookmark	plugin/NERD_tree.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	plugin/NERD_tree.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	plugin/NERD_tree.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	plugin/NERD_tree.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.GetNodeForName	plugin/NERD_tree.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot)$/;"	f
Bookmark.GetSelected	plugin/NERD_tree.vim	/^function! s:Bookmark.GetSelected()$/;"	f
Bookmark.InvalidBookmarks	plugin/NERD_tree.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.New	plugin/NERD_tree.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.Sort	plugin/NERD_tree.vim	/^function! s:Bookmark.Sort()$/;"	f
Bookmark.ToRoot	plugin/NERD_tree.vim	/^function! s:Bookmark.ToRoot(name)$/;"	f
Bookmark.Write	plugin/NERD_tree.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark.activate	plugin/NERD_tree.vim	/^function! s:Bookmark.activate()$/;"	f
Bookmark.compareTo	plugin/NERD_tree.vim	/^function! s:Bookmark.compareTo(otherbookmark)$/;"	f
Bookmark.delete	plugin/NERD_tree.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	plugin/NERD_tree.vim	/^function! s:Bookmark.getNode(searchFromAbsoluteRoot)$/;"	f
Bookmark.mustExist	plugin/NERD_tree.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.openInNewTab	plugin/NERD_tree.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
Bookmark.setPath	plugin/NERD_tree.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.str	plugin/NERD_tree.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	plugin/NERD_tree.vim	/^function! s:Bookmark.toRoot()$/;"	f
Bookmark.validate	plugin/NERD_tree.vim	/^function! s:Bookmark.validate()$/;"	f
BreakDown	plugin/EasyGrep.vim	/^function! s:BreakDown(keyList)$/;"	f
BufAbbreviations	autoload/rails.vim	/^function! s:BufAbbreviations()$/;"	f
BufCommands	autoload/rails.vim	/^function! s:BufCommands()$/;"	f
BufDatabase	autoload/rails.vim	/^function! s:BufDatabase(...)$/;"	f
BufFinderCommands	autoload/rails.vim	/^function! s:BufFinderCommands()$/;"	f
BufHasErrors	plugin/syntastic.vim	/^function! s:BufHasErrors()$/;"	f
BufHasErrorsOrWarnings	plugin/syntastic.vim	/^function! s:BufHasErrorsOrWarnings()$/;"	f
BufHasErrorsOrWarningsToDisplay	plugin/syntastic.vim	/^function! s:BufHasErrorsOrWarningsToDisplay()$/;"	f
BufInit	plugin/rails.vim	/^function! s:BufInit(path)$/;"	f
BufInitStatusline	autoload/rails.vim	/^function! s:BufInitStatusline()$/;"	f
BufMappings	autoload/rails.vim	/^function! s:BufMappings()$/;"	f
BufModelines	autoload/rails.vim	/^function! s:BufModelines()$/;"	f
BufNavCommands	autoload/rails.vim	/^function! s:BufNavCommands()$/;"	f
BufOnly	plugin/BufOnly.vim	/^command! -nargs=? -complete=buffer -bang BufOnly$/;"	c
BufOnly	plugin/BufOnly.vim	/^function! BufOnly(buffer, bang)$/;"	f
BufScriptWrappers	autoload/rails.vim	/^function! s:BufScriptWrappers()$/;"	f
BufSettings	autoload/rails.vim	/^function! s:BufSettings()$/;"	f
BufSignIds	plugin/syntastic.vim	/^function! s:BufSignIds()$/;"	f
BufSyntax	autoload/rails.vim	/^function! s:BufSyntax()$/;"	f
Bufonly	plugin/BufOnly.vim	/^command! -nargs=? -complete=buffer -bang Bufonly$/;"	c
BuildBufferList	plugin/minibufexpl.vim	/^function! <SID>BuildBufferList(delBufNum, updateBufList)$/;"	f
BuildPatternList	plugin/EasyGrep.vim	/^function! s:BuildPatternList(...)$/;"	f
BuildPatternListPost	plugin/EasyGrep.vim	/^function! s:BuildPatternListPost(str, sp)$/;"	f
BuildTabStops	autoload/snipMate.vim	/^fun s:BuildTabStops(snip, lnum, col, indent)$/;"	f
CC	ruby/command-t/Makefile	/^CC = gcc$/;"	m
CFLAGS	ruby/command-t/Makefile	/^CFLAGS   =  -fPIC -g -O2  -fPIC $(cflags) $/;"	m
CLEANFILES	ruby/command-t/Makefile	/^CLEANFILES = mkmf.log$/;"	m
CLEANLIBS	ruby/command-t/Makefile	/^CLEANLIBS     = $(TARGET).so $(TARGET).il? $(TARGET).tds $(TARGET).map$/;"	m
CLEANOBJS	ruby/command-t/Makefile	/^CLEANOBJS     = *.o *.a *.s[ol] *.pdb *.exp *.bak$/;"	m
CMiniBufExplorer	plugin/minibufexpl.vim	/^  command! CMiniBufExplorer  call <SID>StopExplorer(1)$/;"	c
COPY	ruby/command-t/Makefile	/^COPY = cp$/;"	m
CPPFLAGS	ruby/command-t/Makefile	/^CPPFLAGS = -DHAVE_RUBY_H  $(DEFS) $(cppflags)$/;"	m
CXXFLAGS	ruby/command-t/Makefile	/^CXXFLAGS = $(CFLAGS) $/;"	m
CacheErrors	plugin/syntastic.vim	/^function! s:CacheErrors()$/;"	f
CheckLinks	plugin/EasyGrep.vim	/^function! s:CheckLinks()$/;"	f
CheckPKG	syntax_checkers/c.vim	/^function! s:CheckPKG(name, ...)$/;"	f
CheckPhp	syntax_checkers/c.vim	/^function! s:CheckPhp()$/;"	f
CheckPython	syntax_checkers/c.vim	/^function! s:CheckPython()$/;"	f
CheckRuby	syntax_checkers/c.vim	/^function! s:CheckRuby()$/;"	f
Checkable	plugin/syntastic.vim	/^function! s:Checkable(ft)$/;"	f
ChgDir	autoload/vimball.vim	/^fun! s:ChgDir(newdir)$/;"	f
Choose	plugin/matchit.vim	/^fun! s:Choose(patterns, string, comma, branch, prefix, suffix, ...)$/;"	f
ChooseSnippet	plugin/snipMate.vim	/^fun s:ChooseSnippet(scope, trigger)$/;"	f
CleanUp	plugin/matchit.vim	/^fun! s:CleanUp(options, mode, startline, startcol, ...)$/;"	f
ClearActivated	plugin/EasyGrep.vim	/^function! s:ClearActivated()$/;"	f
ClearGatewayVariables	plugin/EasyGrep.vim	/^function! s:ClearGatewayVariables()$/;"	f
ClearNewline	plugin/EasyGrep.vim	/^function! s:ClearNewline(s)$/;"	f
Close	ftplugin/html_snip_helper.vim	/^fun! Close()$/;"	f
CloseSession	plugin/session.vim	/^command! -bar -bang CloseSession call session#close_cmd(<q-bang>, 0)$/;"	c
CommandEdit	autoload/rails.vim	/^function! s:CommandEdit(cmd,name,prefix,suffix,filter,default,...)$/;"	f
CommandList	autoload/rails.vim	/^function! s:CommandList(A,L,P)$/;"	f
CommandT	plugin/command-t.vim	/^command -nargs=? -complete=dir CommandT call <SID>CommandTShow(<q-args>)$/;"	c
CommandT	ruby/command-t/controller.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/finder.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/match_window.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/prompt.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/scanner.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/settings.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/stub.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/vim.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/vim/screen.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/vim/window.rb	/^module CommandT$/;"	m
CommandTAcceptSelection	plugin/command-t.vim	/^function CommandTAcceptSelection()$/;"	f
CommandTAcceptSelectionSplit	plugin/command-t.vim	/^function CommandTAcceptSelectionSplit()$/;"	f
CommandTAcceptSelectionTab	plugin/command-t.vim	/^function CommandTAcceptSelectionTab()$/;"	f
CommandTAcceptSelectionVSplit	plugin/command-t.vim	/^function CommandTAcceptSelectionVSplit()$/;"	f
CommandTBackspace	plugin/command-t.vim	/^function CommandTBackspace()$/;"	f
CommandTCancel	plugin/command-t.vim	/^function CommandTCancel()$/;"	f
CommandTClear	plugin/command-t.vim	/^function CommandTClear()$/;"	f
CommandTCursorEnd	plugin/command-t.vim	/^function CommandTCursorEnd()$/;"	f
CommandTCursorLeft	plugin/command-t.vim	/^function CommandTCursorLeft()$/;"	f
CommandTCursorRight	plugin/command-t.vim	/^function CommandTCursorRight()$/;"	f
CommandTCursorStart	plugin/command-t.vim	/^function CommandTCursorStart()$/;"	f
CommandTDelete	plugin/command-t.vim	/^function CommandTDelete()$/;"	f
CommandTFlush	plugin/command-t.vim	/^command CommandTFlush call <SID>CommandTFlush()$/;"	c
CommandTFlush	plugin/command-t.vim	/^function s:CommandTFlush()$/;"	f
CommandTHandleKey	plugin/command-t.vim	/^function CommandTHandleKey(arg)$/;"	f
CommandTMatch_initialize	ruby/command-t/match.c	/^VALUE CommandTMatch_initialize(int argc, VALUE *argv, VALUE self)$/;"	f
CommandTMatch_matches	ruby/command-t/match.c	/^VALUE CommandTMatch_matches(VALUE self)$/;"	f
CommandTMatch_to_s	ruby/command-t/match.c	/^VALUE CommandTMatch_to_s(VALUE self)$/;"	f
CommandTMatcher_initialize	ruby/command-t/matcher.c	/^VALUE CommandTMatcher_initialize(int argc, VALUE *argv, VALUE self)$/;"	f
CommandTMatcher_matches_for	ruby/command-t/matcher.c	/^VALUE CommandTMatcher_matches_for(VALUE self, VALUE abbrev)$/;"	f
CommandTMatcher_sorted_matches_for	ruby/command-t/matcher.c	/^VALUE CommandTMatcher_sorted_matches_for(VALUE self, VALUE abbrev, VALUE options)$/;"	f
CommandTRubyWarning	plugin/command-t.vim	/^function s:CommandTRubyWarning()$/;"	f
CommandTSelectNext	plugin/command-t.vim	/^function CommandTSelectNext()$/;"	f
CommandTSelectPrev	plugin/command-t.vim	/^function CommandTSelectPrev()$/;"	f
CommandTShow	plugin/command-t.vim	/^function s:CommandTShow(arg)$/;"	f
CommandTToggleFocus	plugin/command-t.vim	/^function CommandTToggleFocus()$/;"	f
CommandT_option_from_hash	ruby/command-t/ext.c	/^VALUE CommandT_option_from_hash(const char *option, VALUE hash)$/;"	f
CompareCurrentFileCurrentDirectory	plugin/EasyGrep.vim	/^function! s:CompareCurrentFileCurrentDirectory()$/;"	f
Complete_cd	autoload/rails.vim	/^function! s:Complete_cd(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_console	autoload/rails.vim	/^function! s:Complete_console(A,L,P)$/;"	f
Complete_destroy	autoload/rails.vim	/^function! s:Complete_destroy(A,L,P)$/;"	f
Complete_edit	autoload/rails.vim	/^function! s:Complete_edit(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_environments	autoload/rails.vim	/^function! s:Complete_environments(...)$/;"	f
Complete_find	autoload/rails.vim	/^function! s:Complete_find(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_generate	autoload/rails.vim	/^function! s:Complete_generate(A,L,P)$/;"	f
Complete_preview	autoload/rails.vim	/^function! s:Complete_preview(A,L,P)$/;"	f
Complete_rake	autoload/rails.vim	/^function! s:Complete_rake(A,L,P)$/;"	f
Complete_related	autoload/rails.vim	/^function! s:Complete_related(A,L,P)$/;"	f
Complete_ruby	autoload/rails.vim	/^function! s:Complete_ruby(A,L,P)$/;"	f
Complete_script	autoload/rails.vim	/^function! s:Complete_script(ArgLead,CmdLine,P)$/;"	f
Complete_server	autoload/rails.vim	/^function! s:Complete_server(A,L,P)$/;"	f
Complete_set	autoload/rails.vim	/^function! s:Complete_set(A,L,P)$/;"	f
ConstructInfo	plugin/project.vim	/^    function! s:ConstructInfo(home, c_d, scriptin, scriptout, flags, filter)$/;"	f
Controller	ruby/command-t/controller.rb	/^  class Controller$/;"	c	class:CommandT
Count	autoload/snipMate.vim	/^fun s:Count(haystack, needle)$/;"	f
Count	plugin/matchit.vim	/^fun! s:Count(string, pattern, ...)$/;"	f
CreateDict	plugin/EasyGrep.vim	/^function! s:CreateDict()$/;"	f
CreateEntriesFromDir	plugin/project.vim	/^    function! s:CreateEntriesFromDir(recursive)$/;"	f
CreateMenus	plugin/rails.vim	/^function! s:CreateMenus() abort$/;"	f
CreateOptionMappings	plugin/EasyGrep.vim	/^function! s:CreateOptionMappings()$/;"	f
CreateOptions	plugin/EasyGrep.vim	/^function! s:CreateOptions()$/;"	f
CustomComplete	autoload/rails.vim	/^function! s:CustomComplete(A,L,P,cmd)$/;"	f
CycleBuffer	plugin/minibufexpl.vim	/^function! <SID>CycleBuffer(forward)$/;"	f
DEBUG	plugin/minibufexpl.vim	/^function! <SID>DEBUG(msg, level)$/;"	f
DEFFILE	ruby/command-t/Makefile	/^DEFFILE = $/;"	m
DEFS	ruby/command-t/Makefile	/^DEFS     = $/;"	m
DISTCLEANFILES	ruby/command-t/Makefile	/^DISTCLEANFILES = $/;"	m
DLDFLAGS	ruby/command-t/Makefile	/^DLDFLAGS = $(ldflags) $(dldflags) $(archflag)$/;"	m
DLLIB	ruby/command-t/Makefile	/^DLLIB = $(TARGET).so$/;"	m
DefineSnips	plugin/snipMate.vim	/^fun s:DefineSnips(dir, aliasft, realft)$/;"	f
DeleteSession	plugin/session.vim	/^command! -bar -bang -nargs=? -complete=customlist,session#complete_names DeleteSession call session#delete_cmd(<q-args>, <q-bang>)$/;"	c
Detect	plugin/rails.vim	/^function! s:Detect(filename)$/;"	f
Disable	plugin/syntastic.vim	/^function! s:Disable(...)$/;"	f
DisplayBuffers	plugin/minibufexpl.vim	/^function! <SID>DisplayBuffers(delBufNum)$/;"	f
DisplayInfo	plugin/project.vim	/^    function! s:DisplayInfo()$/;"	f
DoBreakDown	plugin/EasyGrep.vim	/^function! s:DoBreakDown(key)$/;"	f
DoEnsurePlacementSize_au	plugin/project.vim	/^    function! s:DoEnsurePlacementSize_au()$/;"	f
DoEntryFromDir	plugin/project.vim	/^    function! s:DoEntryFromDir(recursive, line, name, absolute_dir, dir, c_d, filter_directive, filter, foldlev, sort)$/;"	f
DoEscapeList	plugin/EasyGrep.vim	/^function! s:DoEscapeList(lst, seperator, func)$/;"	f
DoFoldOrOpenEntry	plugin/project.vim	/^    function! s:DoFoldOrOpenEntry(cmd0, cmd1)$/;"	f
DoGrep	plugin/EasyGrep.vim	/^function! s:DoGrep(word, add, whole, count, escapeArgs)$/;"	f
DoProjectOnly	plugin/project.vim	/^        function! s:DoProjectOnly()$/;"	f
DoReplace	plugin/EasyGrep.vim	/^function! s:DoReplace(target, replacement, whole, escapeArgs)$/;"	f
DoSetup	plugin/project.vim	/^    function! s:DoSetup()$/;"	f
DoSetupAndSplit	plugin/project.vim	/^    function! s:DoSetupAndSplit()$/;"	f
DoSetupAndSplit_au	plugin/project.vim	/^    function! s:DoSetupAndSplit_au()$/;"	f
DoToggleProject	plugin/project.vim	/^    function! s:DoToggleProject()$/;"	f
Doc	autoload/rails.vim	/^function! s:Doc(bang, string)$/;"	f
EXEEXT	ruby/command-t/Makefile	/^EXEEXT = $/;"	m
EXTSTATIC	ruby/command-t/Makefile	/^EXTSTATIC = $/;"	m
Echo	plugin/EasyGrep.vim	/^function! <sid>Echo(message)$/;"	f
EchoFilesSearched	plugin/EasyGrep.vim	/^function! <sid>EchoFilesSearched()$/;"	f
EchoOptionsSet	plugin/EasyGrep.vim	/^function! <sid>EchoOptionsSet()$/;"	f
Edit	autoload/rails.vim	/^function! s:Edit(count,cmd,...)$/;"	f
EditSimpleRb	autoload/rails.vim	/^function! s:EditSimpleRb(cmd,name,target,prefix,suffix,...)$/;"	f
Enable	plugin/syntastic.vim	/^function! s:Enable(...)$/;"	f
Error	plugin/EasyGrep.vim	/^function! s:Error(message)$/;"	f
Errors	plugin/syntastic.vim	/^command Errors call s:ShowLocList()$/;"	c
ErrorsForType	plugin/syntastic.vim	/^function! s:ErrorsForType(type)$/;"	f
Escape	plugin/EasyGrep.vim	/^function! s:Escape(str, lst)$/;"	f
EscapeList	plugin/EasyGrep.vim	/^function! s:EscapeList(lst, seperator)$/;"	f
EscapeSpecial	plugin/EasyGrep.vim	/^function! s:EscapeSpecial(str)$/;"	f
Executor	autoload/l9/async.py	/^class Executor:$/;"	c
Extract	autoload/rails.vim	/^function! s:Extract(bang,...) range abort$/;"	f
ExtractSnips	plugin/snipMate.vim	/^fun! ExtractSnips(dir, ft)$/;"	f
ExtractSnipsFile	plugin/snipMate.vim	/^fun! ExtractSnipsFile(file, ft)$/;"	f
FileByOffset	plugin/unimpaired.vim	/^function! s:FileByOffset(num)$/;"	f
FileEscape	plugin/EasyGrep.vim	/^function! s:FileEscape(item)$/;"	f
FileLimitExceeded	ruby/command-t/scanner.rb	/^    class FileLimitExceeded < ::RuntimeError; end$/;"	c	class:CommandT.Scanner
Filename	autoload/snipMate.vim	/^fun! Filename(...)$/;"	f
FillWindow	plugin/EasyGrep.vim	/^function! s:FillWindow()$/;"	f
FilterErrorlist	plugin/EasyGrep.vim	/^command! -nargs=+ FilterErrorlist :call s:FilterErrorlist(<f-args>)$/;"	c
FilterErrorlist	plugin/EasyGrep.vim	/^function! s:FilterErrorlist(...)$/;"	f
Find	autoload/rails.vim	/^function! s:Find(count,cmd,...)$/;"	f
FindByKey	plugin/EasyGrep.vim	/^function! s:FindByKey(key)$/;"	f
FindByPattern	plugin/EasyGrep.vim	/^function! s:FindByPattern(pattern)$/;"	f
FindCreateWindow	plugin/minibufexpl.vim	/^function! <SID>FindCreateWindow(bufName, forceEdge, isExplorer, doDebug)$/;"	f
FindFoldBottom	plugin/project.vim	/^    function! s:FindFoldBottom(line)$/;"	f
FindFoldTop	plugin/project.vim	/^    function! s:FindFoldTop(line)$/;"	f
FindWindow	plugin/minibufexpl.vim	/^function! <SID>FindWindow(bufName, doDebug)$/;"	f
Finder	ruby/command-t/finder.rb	/^  class Finder$/;"	c	class:CommandT
Fold	plugin/SimpleFold.vim	/^    command -nargs=1 Fold :call s:Foldsearch(<q-args>)$/;"	c
FoldNestableBlocks	plugin/SimpleFold.vim	/^function! s:FoldNestableBlocks(start, end, start_expr, end_expr)$/;"	f
Foldsearch	plugin/SimpleFold.vim	/^function! s:Foldsearch(search)$/;"	f
FufGlobal	autoload/fuf.vim	/^augroup FufGlobal$/;"	a
GenerateEntry	plugin/project.vim	/^    function! s:GenerateEntry(recursive, line, name, absolute_dir, dir, c_d, filter_directive, filter, foldlev, sort)$/;"	f
GetBufferDirsList	plugin/EasyGrep.vim	/^function! s:GetBufferDirsList()$/;"	f
GetBufferIdList	plugin/EasyGrep.vim	/^function! s:GetBufferIdList()$/;"	f
GetBufferNamesList	plugin/EasyGrep.vim	/^function! s:GetBufferNamesList()$/;"	f
GetBuffersOutput	plugin/EasyGrep.vim	/^function! s:GetBuffersOutput()$/;"	f
GetCd	plugin/project.vim	/^    function! s:GetCd(info, home)$/;"	f
GetCurrentSelection	plugin/EasyGrep.vim	/^function! s:GetCurrentSelection()$/;"	f
GetCurrentWord	plugin/EasyGrep.vim	/^function! s:GetCurrentWord()$/;"	f
GetErrorList	plugin/EasyGrep.vim	/^function! s:GetErrorList()$/;"	f
GetErrorListName	plugin/EasyGrep.vim	/^function! s:GetErrorListName()$/;"	f
GetFileAssociationList	plugin/EasyGrep.vim	/^function! s:GetFileAssociationList()$/;"	f
GetFilter	plugin/project.vim	/^    function! s:GetFilter(info, parent_filter)$/;"	f
GetFlags	plugin/project.vim	/^    function! s:GetFlags(info)$/;"	f
GetHome	plugin/project.vim	/^    function! s:GetHome(info, parent_home)$/;"	f
GetKeyFromLink	plugin/EasyGrep.vim	/^function! s:GetKeyFromLink(str)$/;"	f
GetOption	plugin/SimpleFold.vim	/^function! s:GetOption(name, ...)$/;"	f
GetPatternList	plugin/EasyGrep.vim	/^function! s:GetPatternList(sp, dopost)$/;"	f
GetReplaceWindowModeString	plugin/EasyGrep.vim	/^function! s:GetReplaceWindowModeString(mode)$/;"	f
GetSavedName	plugin/EasyGrep.vim	/^function! s:GetSavedName(var)$/;"	f
GetScriptin	plugin/project.vim	/^    function! s:GetScriptin(info, home)$/;"	f
GetScriptout	plugin/project.vim	/^    function! s:GetScriptout(info, home)$/;"	f
GetSelectedBuffer	plugin/minibufexpl.vim	/^function! <SID>GetSelectedBuffer()$/;"	f
GetShell	syntax_checkers/sh.vim	/^function! GetShell()$/;"	f
GetSnippet	plugin/snipMate.vim	/^fun s:GetSnippet(word, scope)$/;"	f
GetSnippets	plugin/snipMate.vim	/^fun! GetSnippets(dir, filetypes)$/;"	f
GetVisibleBuffers	plugin/EasyGrep.vim	/^function! s:GetVisibleBuffers()$/;"	f
Grep	plugin/EasyGrep.vim	/^command! -bang -nargs=+ Grep :call s:GrepCommandLine( <q-args> , "", "<bang>")$/;"	c
GrepAdd	plugin/EasyGrep.vim	/^command! -bang -nargs=+ GrepAdd :call s:GrepCommandLine( <q-args>, "add", "<bang>")$/;"	c
GrepAll	plugin/project.vim	/^    function! s:GrepAll(recurse, lineno, pattern)$/;"	f
GrepCommandLine	plugin/EasyGrep.vim	/^function! s:GrepCommandLine(argv, add, bang)$/;"	f
GrepCurrentWord	plugin/EasyGrep.vim	/^function! <sid>GrepCurrentWord(add, whole)$/;"	f
GrepOptions	plugin/EasyGrep.vim	/^command! GrepOptions :call <sid>GrepOptions()$/;"	c
GrepOptions	plugin/EasyGrep.vim	/^function! <sid>GrepOptions()$/;"	f
GrepSelection	plugin/EasyGrep.vim	/^function! <sid>GrepSelection(add, whole)$/;"	f
GrepSetManual	plugin/EasyGrep.vim	/^function! s:GrepSetManual(str)$/;"	f
HasActivatedItem	plugin/EasyGrep.vim	/^function! s:HasActivatedItem()$/;"	f
HasEligibleBuffers	plugin/minibufexpl.vim	/^function! <SID>HasEligibleBuffers(delBufNum)$/;"	f
HasFilesThatMatch	plugin/EasyGrep.vim	/^function! s:HasFilesThatMatch()$/;"	f
HasMatches	plugin/EasyGrep.vim	/^function! s:HasMatches()$/;"	f
HexHighlight	plugin/hexHighlight.vim	/^function! HexHighlight()$/;"	f
HiDefaults	autoload/rails.vim	/^function! s:HiDefaults()$/;"	f
INCFLAGS	ruby/command-t/Makefile	/^INCFLAGS = -I. -I$(topdir) -I$(hdrdir) -I$(srcdir)$/;"	m
INSTALL	ruby/command-t/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	ruby/command-t/Makefile	/^INSTALL_DATA = $(INSTALL) -m 644$/;"	m
INSTALL_PROG	ruby/command-t/Makefile	/^INSTALL_PROG = $(INSTALL) -m 0755$/;"	m
IncludeMarks	plugin/showmarks.vim	/^fun! s:IncludeMarks()$/;"	f
Info	plugin/EasyGrep.vim	/^function! s:Info(message)$/;"	f
Init	syntax_checkers/c.vim	/^function! s:Init()$/;"	f
InitStatusline	autoload/rails.vim	/^function! s:InitStatusline()$/;"	f
Init_ext	ruby/command-t/ext.c	/^void Init_ext()$/;"	f
InjectIntoStatusline	autoload/rails.vim	/^function! s:InjectIntoStatusline(status)$/;"	f
InsertRefs	plugin/matchit.vim	/^fun! s:InsertRefs(groupBR, prefix, group, suffix, matchline)$/;"	f
Invert	autoload/rails.vim	/^function! s:Invert(bang)$/;"	f
IsAbsolutePath	plugin/project.vim	/^    function! s:IsAbsolutePath(path)$/;"	f
IsInDict	plugin/EasyGrep.vim	/^function! s:IsInDict(pat)$/;"	f
IsLink	plugin/EasyGrep.vim	/^function! s:IsLink(str)$/;"	f
IsModeAll	plugin/EasyGrep.vim	/^function! s:IsModeAll()$/;"	f
IsModeBuffers	plugin/EasyGrep.vim	/^function! s:IsModeBuffers()$/;"	f
IsModeTracked	plugin/EasyGrep.vim	/^function! s:IsModeTracked()$/;"	f
IsModeUser	plugin/EasyGrep.vim	/^function! s:IsModeUser()$/;"	f
IsOptionSet	plugin/SimpleFold.vim	/^function! s:IsOptionSet(name)$/;"	f
IsRecursive	plugin/EasyGrep.vim	/^function! s:IsRecursive(pattern)$/;"	f
KeyMap.All	plugin/NERD_tree.vim	/^function! s:KeyMap.All()$/;"	f
KeyMap.BindAll	plugin/NERD_tree.vim	/^function! s:KeyMap.BindAll()$/;"	f
KeyMap.Create	plugin/NERD_tree.vim	/^function! s:KeyMap.Create(options)$/;"	f
KeyMap.bind	plugin/NERD_tree.vim	/^function! s:KeyMap.bind()$/;"	f
L9Assert	plugin/l9.vim	/^  command -nargs=* L9Assert :$/;"	c
L9Assert	plugin/l9.vim	/^  command -nargs=* L9Assert call eval((<args>) ? 0 : s:handleFailedAssersion(<q-args>))$/;"	c
L9GrepBuffer	plugin/l9.vim	/^command -nargs=? L9GrepBuffer    call l9#grepBuffers(<q-args>, [bufnr('%')])$/;"	c
L9GrepBufferAll	plugin/l9.vim	/^command -nargs=? L9GrepBufferAll call l9#grepBuffers(<q-args>, range(1, bufnr('$')))$/;"	c
L9Timer	plugin/l9.vim	/^  command -nargs=1 L9Timer :$/;"	c
L9Timer	plugin/l9.vim	/^  command -nargs=1 L9Timer call s:timerBegin(<q-args>)$/;"	c
L9TimerDump	plugin/l9.vim	/^  command -nargs=0 L9TimerDump :$/;"	c
L9TimerDump	plugin/l9.vim	/^  command -nargs=0 L9TimerDump call s:timerDump()$/;"	c
L9TimerStop	plugin/l9.vim	/^  command -nargs=0 L9TimerStop :$/;"	c
L9TimerStop	plugin/l9.vim	/^  command -nargs=0 L9TimerStop call s:timerStop()$/;"	c
LDSHARED	ruby/command-t/Makefile	/^LDSHARED = $(CC) -shared$/;"	m
LIBPATH	ruby/command-t/Makefile	/^LIBPATH =  -L. -L$(libdir) -Wl,-R$(libdir)$/;"	m
LIBRUBY	ruby/command-t/Makefile	/^LIBRUBY = $(LIBRUBY_SO)$/;"	m
LIBRUBYARG_SHARED	ruby/command-t/Makefile	/^LIBRUBYARG_SHARED = -Wl,-R -Wl,$(libdir) -L$(libdir) -l$(RUBY_SO_NAME)$/;"	m
LIBRUBYARG_STATIC	ruby/command-t/Makefile	/^LIBRUBYARG_STATIC = -l$(RUBY_SO_NAME)-static$/;"	m
LIBRUBY_A	ruby/command-t/Makefile	/^LIBRUBY_A = lib$(RUBY_SO_NAME)-static.a$/;"	m
LIBS	ruby/command-t/Makefile	/^LIBS = $(LIBRUBYARG_SHARED)  -lrt -ldl -lcrypt -lm   -lc$/;"	m
LOCAL_LIBS	ruby/command-t/Makefile	/^LOCAL_LIBS = $/;"	m
ListSpawn	plugin/project.vim	/^    function! s:ListSpawn(varnamesegment)$/;"	f
LoadAll	plugin/project.vim	/^    function! s:LoadAll(recurse, line)$/;"	f
LoadAllSplit	plugin/project.vim	/^    function! s:LoadAllSplit(recurse, line)$/;"	f
LocalModelines	autoload/rails.vim	/^function! s:LocalModelines(lnum)$/;"	f
Log	autoload/rails.vim	/^function! s:Log(bang,arg)$/;"	f
MAKEDIRS	ruby/command-t/Makefile	/^MAKEDIRS = mkdir -p$/;"	m
MBEClick	plugin/minibufexpl.vim	/^function! s:MBEClick()$/;"	f
MBEDeleteBuffer	plugin/minibufexpl.vim	/^function! <SID>MBEDeleteBuffer()$/;"	f
MBEDoubleClick	plugin/minibufexpl.vim	/^function! s:MBEDoubleClick()$/;"	f
MBESelectBuffer	plugin/minibufexpl.vim	/^function! <SID>MBESelectBuffer()$/;"	f
MBEbn	plugin/minibufexpl.vim	/^  command! MBEbn call <SID>CycleBuffer(1)$/;"	c
MBEbp	plugin/minibufexpl.vim	/^  command! MBEbp call <SID>CycleBuffer(0)$/;"	c
MakeSnip	plugin/snipMate.vim	/^fun! MakeSnip(scope, trigger, content, ...)$/;"	f
MapNextFamily	plugin/unimpaired.vim	/^function! s:MapNextFamily(map,cmd)$/;"	f
MapTransform	plugin/unimpaired.vim	/^function! s:MapTransform(algorithm, key)$/;"	f
MatchDebug	plugin/matchit.vim	/^  command! -nargs=0 MatchDebug call s:Match_debug()$/;"	c
MatchWindow	ruby/command-t/match_window.rb	/^  class MatchWindow$/;"	c	class:CommandT
Match_debug	plugin/matchit.vim	/^fun! s:Match_debug()$/;"	f
Match_wrapper	plugin/matchit.vim	/^function! s:Match_wrapper(word, forward, mode) range$/;"	f
Max	plugin/minibufexpl.vim	/^function! <SID>Max(argOne, argTwo)$/;"	f
MenuController.New	plugin/NERD_tree.vim	/^function! s:MenuController.New(menuItems)$/;"	f
MenuController._allIndexesFor	plugin/NERD_tree.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
MenuController._current	plugin/NERD_tree.vim	/^function! s:MenuController._current()$/;"	f
MenuController._cursorDown	plugin/NERD_tree.vim	/^function! s:MenuController._cursorDown()$/;"	f
MenuController._cursorUp	plugin/NERD_tree.vim	/^function! s:MenuController._cursorUp()$/;"	f
MenuController._echoPrompt	plugin/NERD_tree.vim	/^function! s:MenuController._echoPrompt()$/;"	f
MenuController._handleKeypress	plugin/NERD_tree.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
MenuController._nextIndexFor	plugin/NERD_tree.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
MenuController._restoreOptions	plugin/NERD_tree.vim	/^function! s:MenuController._restoreOptions()$/;"	f
MenuController._saveOptions	plugin/NERD_tree.vim	/^function! s:MenuController._saveOptions()$/;"	f
MenuController._setCmdheight	plugin/NERD_tree.vim	/^function! s:MenuController._setCmdheight()$/;"	f
MenuController.showMenu	plugin/NERD_tree.vim	/^function! s:MenuController.showMenu()$/;"	f
MenuItem.All	plugin/NERD_tree.vim	/^function! s:MenuItem.All()$/;"	f
MenuItem.AllEnabled	plugin/NERD_tree.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
MenuItem.Create	plugin/NERD_tree.vim	/^function! s:MenuItem.Create(options)$/;"	f
MenuItem.CreateSeparator	plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
MenuItem.CreateSubmenu	plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
MenuItem.enabled	plugin/NERD_tree.vim	/^function! s:MenuItem.enabled()$/;"	f
MenuItem.execute	plugin/NERD_tree.vim	/^function! s:MenuItem.execute()$/;"	f
MenuItem.isSeparator	plugin/NERD_tree.vim	/^function! s:MenuItem.isSeparator()$/;"	f
MenuItem.isSubmenu	plugin/NERD_tree.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
MiniBufExplorer	plugin/minibufexpl.vim	/^  command! MiniBufExplorer  call <SID>StartExplorer(1, -1)$/;"	c
MiniBufExplorer	plugin/minibufexpl.vim	/^augroup MiniBufExplorer$/;"	a
MkVimball	plugin/vimballPlugin.vim	/^com! -ra   -complete=file -na=+ -bang MkVimball call vimball#MkVimball(<line1>,<line2>,<bang>0,<f-args>)$/;"	c
MoveDown	plugin/project.vim	/^    function! s:MoveDown()$/;"	f
MoveUp	plugin/project.vim	/^    function! s:MoveUp()$/;"	f
MultiMatch	plugin/matchit.vim	/^fun! s:MultiMatch(spflag, mode)$/;"	f
NERDTree	plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree	plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTree :call s:initNerdTree('<args>')$/;"	c
NERDTreeAddKeyMap	plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddSubmenu	plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeClose	plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeClose :call s:closeTreeIfOpen()$/;"	c
NERDTreeCopyNode	plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeDeleteNode	plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeFind	plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeFind call s:findAndRevealPath()$/;"	c
NERDTreeFromBookmark	plugin/NERD_tree.vim	/^command! -n=1 -complete=customlist,s:completeBookmarks -bar NERDTreeFromBookmark call s:initNerdTree('<args>')$/;"	c
NERDTreeHijackNetrw	plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeMirror	plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeMirror call s:initNerdTreeMirror()$/;"	c
NERDTreeMoveNode	plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeRender	plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeToggle	plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTreeToggle :call s:toggle('<args>')$/;"	c
NameOfMark	plugin/showmarks.vim	/^fun! s:NameOfMark(mark)$/;"	f
Navcommand	autoload/rails.vim	/^function! s:Navcommand(bang,...)$/;"	f
NewProject	autoload/rails.vim	/^function! s:NewProject(proj,rr)$/;"	f
NewProjectTemplate	autoload/rails.vim	/^function! s:NewProjectTemplate(proj,rr)$/;"	f
Num2S	plugin/SimpleFold.vim	/^function! s:Num2S(num, len)$/;"	f
OBJS	ruby/command-t/Makefile	/^OBJS = matcher.o match.o ext.o$/;"	m
OnOrOff	plugin/EasyGrep.vim	/^function! s:OnOrOff(num)$/;"	f
OpenEntry	plugin/project.vim	/^    function! s:OpenEntry(line, precmd, editcmd, dir)$/;"	f
OpenEntry2	plugin/project.vim	/^    function! s:OpenEntry2(line, infoline, fname, editcmd)$/;"	f
OpenOptionsExplorer	plugin/EasyGrep.vim	/^function! s:OpenOptionsExplorer()$/;"	f
OpenSession	plugin/session.vim	/^command! -bar -bang -nargs=? -complete=customlist,session#complete_names OpenSession call session#open_cmd(<q-args>, <q-bang>)$/;"	c
ParseCommandLine	plugin/EasyGrep.vim	/^function! s:ParseCommandLine(argv)$/;"	f
ParseFileAssociationList	plugin/EasyGrep.vim	/^function! s:ParseFileAssociationList()$/;"	f
ParseSkip	plugin/matchit.vim	/^fun! s:ParseSkip(str)$/;"	f
ParseWords	plugin/matchit.vim	/^fun! s:ParseWords(groups)$/;"	f
Path.AbsolutePathFor	plugin/NERD_tree.vim	/^function! s:Path.AbsolutePathFor(str)$/;"	f
Path.CopyingSupported	plugin/NERD_tree.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.Create	plugin/NERD_tree.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.JoinPathStrings	plugin/NERD_tree.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.New	plugin/NERD_tree.vim	/^function! s:Path.New(path)$/;"	f
Path.Slash	plugin/NERD_tree.vim	/^function! s:Path.Slash()$/;"	f
Path.WinToUnixPath	plugin/NERD_tree.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
Path._str	plugin/NERD_tree.vim	/^function! s:Path._str()$/;"	f
Path._strForCd	plugin/NERD_tree.vim	/^function! s:Path._strForCd()$/;"	f
Path._strForEdit	plugin/NERD_tree.vim	/^function! s:Path._strForEdit()$/;"	f
Path._strForGlob	plugin/NERD_tree.vim	/^function! s:Path._strForGlob()$/;"	f
Path._strForUI	plugin/NERD_tree.vim	/^function! s:Path._strForUI()$/;"	f
Path.bookmarkNames	plugin/NERD_tree.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	plugin/NERD_tree.vim	/^function! s:Path.cacheDisplayString()$/;"	f
Path.changeToDir	plugin/NERD_tree.vim	/^function! s:Path.changeToDir()$/;"	f
Path.compareTo	plugin/NERD_tree.vim	/^function! s:Path.compareTo(path)$/;"	f
Path.copy	plugin/NERD_tree.vim	/^function! s:Path.copy(dest)$/;"	f
Path.copyingWillOverwrite	plugin/NERD_tree.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.delete	plugin/NERD_tree.vim	/^function! s:Path.delete()$/;"	f
Path.displayString	plugin/NERD_tree.vim	/^function! s:Path.displayString()$/;"	f
Path.equals	plugin/NERD_tree.vim	/^function! s:Path.equals(path)$/;"	f
Path.exists	plugin/NERD_tree.vim	/^function! s:Path.exists()$/;"	f
Path.extractDriveLetter	plugin/NERD_tree.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.getDir	plugin/NERD_tree.vim	/^function! s:Path.getDir()$/;"	f
Path.getLastPathComponent	plugin/NERD_tree.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getParent	plugin/NERD_tree.vim	/^function! s:Path.getParent()$/;"	f
Path.getSortOrderIndex	plugin/NERD_tree.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path.ignore	plugin/NERD_tree.vim	/^function! s:Path.ignore()$/;"	f
Path.isUnder	plugin/NERD_tree.vim	/^function! s:Path.isUnder(path)$/;"	f
Path.readInfoFromDisk	plugin/NERD_tree.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	plugin/NERD_tree.vim	/^function! s:Path.refresh()$/;"	f
Path.rename	plugin/NERD_tree.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	plugin/NERD_tree.vim	/^function! s:Path.str(...)$/;"	f
Path.strTrunk	plugin/NERD_tree.vim	/^function! s:Path.strTrunk()$/;"	f
PluginSession	plugin/session.vim	/^augroup PluginSession$/;"	a
Preview	autoload/rails.vim	/^function! s:Preview(bang,lnum,arg)$/;"	f
ProcessFile	plugin/snipMate.vim	/^fun s:ProcessFile(file, ft, ...)$/;"	f
ProcessSnippet	autoload/snipMate.vim	/^fun s:ProcessSnippet(snip)$/;"	f
Project	autoload/rails.vim	/^function! s:Project(bang,arg)$/;"	f
Project	plugin/project.vim	/^    command -nargs=? -complete=file Project call <SID>Project('<args>')$/;"	c
Project	plugin/project.vim	/^function! s:Project(filename) " <<<$/;"	f
ProjectMenu	plugin/rails.vim	/^function! s:ProjectMenu()$/;"	f
Project_ForEach	plugin/project.vim	/^    function! Project_ForEach(recurse, lineno, cmd, data, match)$/;"	f
Project_ForEachR	plugin/project.vim	/^    function! s:Project_ForEachR(recurse, lineno, info, cmd, data, match)$/;"	f
Project_GetAllFnames	plugin/project.vim	/^    function! Project_GetAllFnames(recurse, lineno, separator)$/;"	f
Project_GetFname	plugin/project.vim	/^    function! Project_GetFname(line)$/;"	f
Prompt	ruby/command-t/prompt.rb	/^  class Prompt$/;"	c	class:CommandT
Quit	plugin/EasyGrep.vim	/^function! <sid>Quit()$/;"	f
RARRAY_LEN	ruby/command-t/ruby_compat.h	43;"	d
RARRAY_PTR	ruby/command-t/ruby_compat.h	38;"	d
RFLOAT_VALUE	ruby/command-t/ruby_compat.h	48;"	d
RM	ruby/command-t/Makefile	/^RM = rm -f$/;"	m
RSTRING_LEN	ruby/command-t/ruby_compat.h	33;"	d
RSTRING_PTR	ruby/command-t/ruby_compat.h	28;"	d
RUBY	ruby/command-t/Makefile	/^RUBY = $(ruby)$/;"	m
RUBYARCHDIR	ruby/command-t/Makefile	/^RUBYARCHDIR   = $(sitearchdir)$(target_prefix)$/;"	m
RUBYCOMMONDIR	ruby/command-t/Makefile	/^RUBYCOMMONDIR = $(sitedir)$(target_prefix)$/;"	m
RUBYLIBDIR	ruby/command-t/Makefile	/^RUBYLIBDIR    = $(sitelibdir)$(target_prefix)$/;"	m
RUBY_EXTCONF_H	ruby/command-t/Makefile	/^RUBY_EXTCONF_H = $/;"	m
RUBY_INSTALL_NAME	ruby/command-t/Makefile	/^RUBY_INSTALL_NAME = ruby$/;"	m
RUBY_SO_NAME	ruby/command-t/Makefile	/^RUBY_SO_NAME = ruby$/;"	m
Rails	plugin/rails.vim	/^command! -bar -bang -nargs=* -complete=dir Rails :if s:autoload()|call rails#new_app_command(<bang>0,<f-args>)|endif$/;"	c
RailsBufInit	autoload/rails.vim	/^function! RailsBufInit(path)$/;"	f
RailsFile	autoload/rails.vim	/^function! RailsFile()$/;"	f
RailsFilePath	autoload/rails.vim	/^function! RailsFilePath()$/;"	f
RailsFileType	autoload/rails.vim	/^function! RailsFileType()$/;"	f
RailsFind	autoload/rails.vim	/^function! s:RailsFind()$/;"	f
RailsHelpCommand	autoload/rails.vim	/^function! RailsHelpCommand(...)$/;"	f
RailsIncludeexpr	autoload/rails.vim	/^function! RailsIncludeexpr()$/;"	f
RailsIncludefind	autoload/rails.vim	/^function! s:RailsIncludefind(str,...)$/;"	f
RailsNamedRoutes	autoload/rails.vim	/^function! RailsNamedRoutes()$/;"	f
RailsRevision	autoload/rails.vim	/^function! RailsRevision()$/;"	f
RailsRoot	autoload/rails.vim	/^function! RailsRoot()$/;"	f
Rake	autoload/rails.vim	/^function! s:Rake(bang,lnum,arg)$/;"	f
RecordInFile	autoload/vimball.vim	/^fun! s:RecordInFile(home)$/;"	f
RecordInVar	autoload/vimball.vim	/^fun! s:RecordInVar(home,cmd)$/;"	f
RecordPrevBuffer_au	plugin/project.vim	/^    function! s:RecordPrevBuffer_au()$/;"	f
RecursivelyConstructDirectives	plugin/project.vim	/^    function! s:RecursivelyConstructDirectives(lineno)$/;"	f
Ref	plugin/matchit.vim	/^fun! s:Ref(string, d, ...)$/;"	f
Refresh	autoload/rails.vim	/^function! s:Refresh(bang)$/;"	f
RefreshBuffer	autoload/rails.vim	/^function! s:RefreshBuffer()$/;"	f
RefreshEntriesFromDir	plugin/project.vim	/^    function! s:RefreshEntriesFromDir(recursive)$/;"	f
RefreshSigns	plugin/syntastic.vim	/^function! s:RefreshSigns()$/;"	f
RegHandler	syntax_checkers/c.vim	/^function! s:RegHandler(regex, function, args)$/;"	f
Related	autoload/rails.vim	/^function! s:Related(cmd,line1,line2,count,...)$/;"	f
RemoveSigns	plugin/syntastic.vim	/^function! s:RemoveSigns(ids)$/;"	f
RemoveSnippet	autoload/snipMate.vim	/^fun s:RemoveSnippet()$/;"	f
Replace	plugin/EasyGrep.vim	/^command! -bang -nargs=+ Replace :call s:Replace("<bang>", <q-args>)$/;"	c
Replace	plugin/EasyGrep.vim	/^function! s:Replace(whole, argv)$/;"	f
ReplaceCurrentWord	plugin/EasyGrep.vim	/^function! <sid>ReplaceCurrentWord(whole)$/;"	f
ReplaceSelection	plugin/EasyGrep.vim	/^function! <sid>ReplaceSelection(whole)$/;"	f
ReplaceString	plugin/EasyGrep.vim	/^function! s:ReplaceString(str, whole, escapeArgs)$/;"	f
ReplaceUndo	plugin/EasyGrep.vim	/^command! -bang ReplaceUndo :call s:ReplaceUndo("<bang>")$/;"	c
ReplaceUndo	plugin/EasyGrep.vim	/^function! s:ReplaceUndo(bang)$/;"	f
ResetSnippets	plugin/snipMate.vim	/^fun! ResetSnippets()$/;"	f
ResizeWindow	plugin/minibufexpl.vim	/^function! <SID>ResizeWindow()$/;"	f
Resolve	plugin/matchit.vim	/^fun! s:Resolve(source, target, output)$/;"	f
RestartVim	plugin/session.vim	/^command! -bang -nargs=* -complete=command RestartVim call session#restart_cmd(<q-bang>, <q-args>)$/;"	c
RestoreCommandLineOptions	plugin/EasyGrep.vim	/^function! s:RestoreCommandLineOptions(opts)$/;"	f
RestoreVariable	plugin/EasyGrep.vim	/^function! s:RestoreVariable(var, ...)$/;"	f
RmVimball	plugin/vimballPlugin.vim	/^com! -na=* -complete=dir  RmVimball				call vimball#SaveSettings()|call vimball#RmVimball(<f-args>)|call vimball#RestoreSettings()$/;"	c
S	plugin/surround.vim	/^      vmap  S    <Plug>VSurround$/;"	m
SHELL	ruby/command-t/Makefile	/^SHELL = \/bin\/sh$/;"	m
SRCS	ruby/command-t/Makefile	/^SRCS = matcher.c match.c ext.c$/;"	m
STATIC_LIB	ruby/command-t/Makefile	/^STATIC_LIB = $/;"	m
SaveSession	plugin/session.vim	/^command! -bar -bang -nargs=? -complete=customlist,session#complete_names SaveSession call session#save_cmd(<q-args>, <q-bang>)$/;"	c
SaveVariable	plugin/EasyGrep.vim	/^function! s:SaveVariable(var)$/;"	f
Scanner	ruby/command-t/scanner.rb	/^  class Scanner$/;"	c	class:CommandT
Screen	ruby/command-t/vim/screen.rb	/^    module Screen$/;"	m	class:CommandT.VIM
SearchHeaders	syntax_checkers/c.vim	/^function! s:SearchHeaders()$/;"	f
Select	plugin/EasyGrep.vim	/^function! <sid>Select()$/;"	f
SelectWord	autoload/snipMate.vim	/^fun s:SelectWord()$/;"	f
SessionLoad	sessions/default.vim	/^let SessionLoad = 1$/;"	v
Set	autoload/rails.vim	/^function! s:Set(bang,...)$/;"	f
SetBasePath	autoload/rails.vim	/^function! s:SetBasePath()$/;"	f
SetCommandLineOptions	plugin/EasyGrep.vim	/^function! s:SetCommandLineOptions(opts)$/;"	f
SetCurrentExtension	plugin/EasyGrep.vim	/^function! s:SetCurrentExtension()$/;"	f
SetGatewayVariables	plugin/EasyGrep.vim	/^function! s:SetGatewayVariables()$/;"	f
SetOptDefault	plugin/rails.vim	/^function! s:SetOptDefault(opt,val)$/;"	f
SetWatchExtension	plugin/EasyGrep.vim	/^function! s:SetWatchExtension()$/;"	f
Settings	ruby/command-t/settings.rb	/^  class Settings$/;"	c	class:CommandT
SetupAutoCommand	plugin/project.vim	/^    function! s:SetupAutoCommand(cwd)$/;"	f
SetupScriptAutoCommand	plugin/project.vim	/^    function! s:SetupScriptAutoCommand(bufcmd, script)$/;"	f
ShellEscape	plugin/EasyGrep.vim	/^function! s:ShellEscape(item)$/;"	f
ShellEscapeList	plugin/EasyGrep.vim	/^function! s:ShellEscapeList(lst, seperator)$/;"	f
ShowAvailableSnips	plugin/snipMate.vim	/^fun! ShowAvailableSnips()$/;"	f
ShowBuffers	plugin/minibufexpl.vim	/^function! <SID>ShowBuffers(delBufNum)$/;"	f
ShowLocList	plugin/syntastic.vim	/^function! s:ShowLocList()$/;"	f
ShowMarks	plugin/showmarks.vim	/^	aug ShowMarks$/;"	a
ShowMarks	plugin/showmarks.vim	/^fun! s:ShowMarks()$/;"	f
ShowMarksClearAll	plugin/showmarks.vim	/^com! -nargs=0 ShowMarksClearAll  :call <sid>ShowMarksClearAll()$/;"	c
ShowMarksClearAll	plugin/showmarks.vim	/^fun! s:ShowMarksClearAll()$/;"	f
ShowMarksClearMark	plugin/showmarks.vim	/^com! -nargs=0 ShowMarksClearMark :call <sid>ShowMarksClearMark()$/;"	c
ShowMarksClearMark	plugin/showmarks.vim	/^fun! s:ShowMarksClearMark()$/;"	f
ShowMarksHideAll	plugin/showmarks.vim	/^fun! s:ShowMarksHideAll()$/;"	f
ShowMarksOn	plugin/showmarks.vim	/^com! -nargs=0 ShowMarksOn        :call <sid>ShowMarksOn()$/;"	c
ShowMarksOn	plugin/showmarks.vim	/^fun! s:ShowMarksOn()$/;"	f
ShowMarksPlaceMark	plugin/showmarks.vim	/^com! -nargs=0 ShowMarksPlaceMark :call <sid>ShowMarksPlaceMark()$/;"	c
ShowMarksPlaceMark	plugin/showmarks.vim	/^fun! s:ShowMarksPlaceMark()$/;"	f
ShowMarksSetup	plugin/showmarks.vim	/^fun! s:ShowMarksSetup()$/;"	f
ShowMarksToggle	plugin/showmarks.vim	/^com! -nargs=0 ShowMarksToggle    :call <sid>ShowMarksToggle()$/;"	c
ShowMarksToggle	plugin/showmarks.vim	/^fun! s:ShowMarksToggle()$/;"	f
SignErrors	plugin/syntastic.vim	/^function s:SignErrors()$/;"	f
SimpleFold_FoldText	plugin/SimpleFold.vim	/^function! s:SimpleFold_FoldText()$/;"	f
Snippet_Camelcase	snippets/support_functions.vim	/^function! Snippet_Camelcase(s)$/;"	f
Snippet_JavaClassNameFromFilename	snippets/support_functions.vim	/^function! Snippet_JavaClassNameFromFilename(...)$/;"	f
Snippet_JavaInstanceVarType	snippets/support_functions.vim	/^function! Snippet_JavaInstanceVarType(name)$/;"	f
Snippet_MigrationNameFromFilename	snippets/support_functions.vim	/^function! Snippet_MigrationNameFromFilename(...)$/;"	f
Snippet_Modeline	snippets/support_functions.vim	/^function! Snippet_Modeline()$/;"	f
Snippet_PHPClassNameFromFilename	snippets/support_functions.vim	/^function! Snippet_PHPClassNameFromFilename(...)$/;"	f
Snippet_PythonClassNameFromFilename	snippets/support_functions.vim	/^function! Snippet_PythonClassNameFromFilename(...)$/;"	f
Snippet_RubyClassNameFromFilename	snippets/support_functions.vim	/^function! Snippet_RubyClassNameFromFilename(...)$/;"	f
Snippet_Underscore	snippets/support_functions.vim	/^function! Snippet_Underscore(s)$/;"	f
Sort	plugin/EasyGrep.vim	/^function! <sid>Sort()$/;"	f
SortExtension	plugin/EasyGrep.vim	/^function! SortExtension(lhs, rhs)$/;"	f
SortExtensionReversed	plugin/EasyGrep.vim	/^function! SortExtensionReversed(lhs, rhs)$/;"	f
SortName	plugin/EasyGrep.vim	/^function! SortName(lhs, rhs)$/;"	f
SortNameReversed	plugin/EasyGrep.vim	/^function! SortNameReversed(lhs, rhs)$/;"	f
SortR	plugin/project.vim	/^    function! s:SortR(start, end)$/;"	f
Spawn	plugin/project.vim	/^    function! s:Spawn(number)$/;"	f
SpawnAll	plugin/project.vim	/^    function! s:SpawnAll(recurse, number)$/;"	f
StartExplorer	plugin/minibufexpl.vim	/^function! <SID>StartExplorer(sticky, delBufNum)$/;"	f
StopExplorer	plugin/minibufexpl.vim	/^function! <SID>StopExplorer(sticky)$/;"	f
StringDecode	plugin/unimpaired.vim	/^function! s:StringDecode(str)$/;"	f
StringEncode	plugin/unimpaired.vim	/^function! s:StringEncode(str)$/;"	f
Stub	ruby/command-t/stub.rb	/^  class Stub$/;"	c	class:CommandT
SyntasticDisable	plugin/syntastic.vim	/^command! -nargs=? SyntasticDisable call s:Disable(<f-args>)$/;"	c
SyntasticEnable	plugin/syntastic.vim	/^command! -nargs=? SyntasticEnable call s:Enable(<f-args>)$/;"	c
SyntasticMake	plugin/syntastic.vim	/^function! SyntasticMake(options)$/;"	f
SyntasticStatuslineFlag	plugin/syntastic.vim	/^function! SyntasticStatuslineFlag()$/;"	f
SyntaxCheckers_c_GetLocList	syntax_checkers/c.vim	/^function! SyntaxCheckers_c_GetLocList()$/;"	f
SyntaxCheckers_coffee_GetLocList	syntax_checkers/coffee.vim	/^function! SyntaxCheckers_coffee_GetLocList()$/;"	f
SyntaxCheckers_cpp_GetLocList	syntax_checkers/cpp.vim	/^function! SyntaxCheckers_cpp_GetLocList()$/;"	f
SyntaxCheckers_cucumber_GetLocList	syntax_checkers/cucumber.vim	/^function! SyntaxCheckers_cucumber_GetLocList()$/;"	f
SyntaxCheckers_eruby_GetLocList	syntax_checkers/eruby.vim	/^function! SyntaxCheckers_eruby_GetLocList()$/;"	f
SyntaxCheckers_haml_GetLocList	syntax_checkers/haml.vim	/^function! SyntaxCheckers_haml_GetLocList()$/;"	f
SyntaxCheckers_haskell_GetLocList	syntax_checkers/haskell.vim	/^function! SyntaxCheckers_haskell_GetLocList()$/;"	f
SyntaxCheckers_html_GetLocList	syntax_checkers/html.vim	/^function! SyntaxCheckers_html_GetLocList()$/;"	f
SyntaxCheckers_javascript_GetLocList	syntax_checkers/javascript.vim	/^function! SyntaxCheckers_javascript_GetLocList()$/;"	f
SyntaxCheckers_lua_GetLocList	syntax_checkers/lua.vim	/^function! SyntaxCheckers_lua_GetLocList()$/;"	f
SyntaxCheckers_perl_GetLocList	syntax_checkers/perl.vim	/^function! SyntaxCheckers_perl_GetLocList()$/;"	f
SyntaxCheckers_php_GetLocList	syntax_checkers/php.vim	/^function! SyntaxCheckers_php_GetLocList()$/;"	f
SyntaxCheckers_python_GetLocList	syntax_checkers/python.vim	/^function! SyntaxCheckers_python_GetLocList()$/;"	f
SyntaxCheckers_ruby_GetLocList	syntax_checkers/ruby.vim	/^function! SyntaxCheckers_ruby_GetLocList()$/;"	f
SyntaxCheckers_sass_GetLocList	syntax_checkers/sass.vim	/^function! SyntaxCheckers_sass_GetLocList()$/;"	f
SyntaxCheckers_sh_GetLocList	syntax_checkers/sh.vim	/^function! SyntaxCheckers_sh_GetLocList()$/;"	f
SyntaxCheckers_tex_GetLocList	syntax_checkers/tex.vim	/^function! SyntaxCheckers_tex_GetLocList()$/;"	f
SyntaxCheckers_xhtml_GetLocList	syntax_checkers/xhtml.vim	/^function! SyntaxCheckers_xhtml_GetLocList()$/;"	f
TARGET	ruby/command-t/Makefile	/^TARGET = ext$/;"	m
TARGET_SO	ruby/command-t/Makefile	/^TARGET_SO     = $(DLLIB)$/;"	m
TMiniBufExplorer	plugin/minibufexpl.vim	/^  command! TMiniBufExplorer  call <SID>ToggleExplorer()$/;"	c
TheCWord	autoload/rails.vim	/^function! s:TheCWord()$/;"	f
ToggleCommand	plugin/EasyGrep.vim	/^function! <sid>ToggleCommand()$/;"	f
ToggleEveryMatch	plugin/EasyGrep.vim	/^function! <sid>ToggleEveryMatch()$/;"	f
ToggleExplorer	plugin/minibufexpl.vim	/^function! <SID>ToggleExplorer()$/;"	f
ToggleFileAssociationsInExplorer	plugin/EasyGrep.vim	/^function! <sid>ToggleFileAssociationsInExplorer()$/;"	f
ToggleHidden	plugin/EasyGrep.vim	/^function! <sid>ToggleHidden()$/;"	f
ToggleIgnoreCase	plugin/EasyGrep.vim	/^function! <sid>ToggleIgnoreCase()$/;"	f
ToggleJumpToMatch	plugin/EasyGrep.vim	/^function! <sid>ToggleJumpToMatch()$/;"	f
ToggleOpenWindow	plugin/EasyGrep.vim	/^function! <sid>ToggleOpenWindow()$/;"	f
ToggleOptionsDisplay	plugin/EasyGrep.vim	/^function! <sid>ToggleOptionsDisplay()$/;"	f
ToggleRecursion	plugin/EasyGrep.vim	/^function! <sid>ToggleRecursion()$/;"	f
ToggleReplaceWindowMode	plugin/EasyGrep.vim	/^function! <sid>ToggleReplaceWindowMode()$/;"	f
ToggleWholeWord	plugin/EasyGrep.vim	/^function! <sid>ToggleWholeWord()$/;"	f
ToggleWindow	plugin/EasyGrep.vim	/^function! <sid>ToggleWindow()$/;"	f
Transform	plugin/unimpaired.vim	/^function! s:Transform(algorithm,type)$/;"	f
TransformOpfunc	plugin/unimpaired.vim	/^function! s:TransformOpfunc(type)$/;"	f
TransformSetup	plugin/unimpaired.vim	/^function! s:TransformSetup(algorithm)$/;"	f
TreeDirNode.AbsoluteTreeRoot	plugin/NERD_tree.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.GetSelected	plugin/NERD_tree.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.New	plugin/NERD_tree.vim	/^function! s:TreeDirNode.New(path)$/;"	f
TreeDirNode._initChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode._openRecursively2	plugin/NERD_tree.vim	/^function! s:TreeDirNode._openRecursively2(forceOpen)$/;"	f
TreeDirNode.activate	plugin/NERD_tree.vim	/^function! s:TreeDirNode.activate(forceKeepWinOpen)$/;"	f
TreeDirNode.addChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	plugin/NERD_tree.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.findNode	plugin/NERD_tree.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildCount	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChildIndex	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.getVisibleChildCount	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.open	plugin/NERD_tree.vim	/^function! s:TreeDirNode.open()$/;"	f
TreeDirNode.openExplorer	plugin/NERD_tree.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openInNewTab	plugin/NERD_tree.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
TreeDirNode.openRecursively	plugin/NERD_tree.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	plugin/NERD_tree.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.removeChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.reveal	plugin/NERD_tree.vim	/^function! s:TreeDirNode.reveal(path)$/;"	f
TreeDirNode.sortChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	plugin/NERD_tree.vim	/^function! s:TreeDirNode.toggleOpen()$/;"	f
TreeDirNode.transplantChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeFileNode.GetRootForTab	plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
TreeFileNode.GetRootLineNum	plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootLineNum()$/;"	f
TreeFileNode.GetSelected	plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.New	plugin/NERD_tree.vim	/^function! s:TreeFileNode.New(path)$/;"	f
TreeFileNode._renderToString	plugin/NERD_tree.vim	/^function! s:TreeFileNode._renderToString(depth, drawText, vertMap, isLastChild)$/;"	f
TreeFileNode.activate	plugin/NERD_tree.vim	/^function! s:TreeFileNode.activate(forceKeepWinOpen)$/;"	f
TreeFileNode.bookmark	plugin/NERD_tree.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	plugin/NERD_tree.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBoomarks	plugin/NERD_tree.vim	/^function! s:TreeFileNode.clearBoomarks()$/;"	f
TreeFileNode.copy	plugin/NERD_tree.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	plugin/NERD_tree.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.displayString	plugin/NERD_tree.vim	/^function! s:TreeFileNode.displayString()$/;"	f
TreeFileNode.equals	plugin/NERD_tree.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	plugin/NERD_tree.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findOpenDirSiblingWithVisibleChildren	plugin/NERD_tree.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
TreeFileNode.findSibling	plugin/NERD_tree.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getLineNum	plugin/NERD_tree.vim	/^function! s:TreeFileNode.getLineNum()$/;"	f
TreeFileNode.isRoot	plugin/NERD_tree.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.isVisible	plugin/NERD_tree.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.makeRoot	plugin/NERD_tree.vim	/^function! s:TreeFileNode.makeRoot()$/;"	f
TreeFileNode.open	plugin/NERD_tree.vim	/^function! s:TreeFileNode.open()$/;"	f
TreeFileNode.openInNewTab	plugin/NERD_tree.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
TreeFileNode.openSplit	plugin/NERD_tree.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	plugin/NERD_tree.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.putCursorHere	plugin/NERD_tree.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	plugin/NERD_tree.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.rename	plugin/NERD_tree.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	plugin/NERD_tree.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TriggerSnippet	plugin/snipMate.vim	/^fun! TriggerSnippet()$/;"	f
Trim	plugin/EasyGrep.vim	/^function! s:Trim(s)$/;"	f
U	autoload/repeat.vim	/^nnoremap <silent> U     :<C-U>call <SID>wrap('U',v:count)<CR>$/;"	m
UMiniBufExplorer	plugin/minibufexpl.vim	/^  command! UMiniBufExplorer  call <SID>AutoUpdate(-1)$/;"	c
UpdateAll	plugin/EasyGrep.vim	/^function! s:UpdateAll()$/;"	f
UpdateChangedSnip	autoload/snipMate.vim	/^fun s:UpdateChangedSnip(entering)$/;"	f
UpdateChoice	plugin/EasyGrep.vim	/^function! s:UpdateChoice(choice)$/;"	f
UpdateErrors	plugin/syntastic.vim	/^function! s:UpdateErrors()$/;"	f
UpdateOptions	plugin/EasyGrep.vim	/^function! s:UpdateOptions()$/;"	f
UpdatePlaceholderTabStops	autoload/snipMate.vim	/^fun s:UpdatePlaceholderTabStops()$/;"	f
UpdateRange	plugin/EasyGrep.vim	/^function! s:UpdateRange(first, last)$/;"	f
UpdateTabStops	autoload/snipMate.vim	/^fun s:UpdateTabStops()$/;"	f
UpdateVars	autoload/snipMate.vim	/^fun s:UpdateVars()$/;"	f
UrlDecode	plugin/unimpaired.vim	/^function! s:UrlDecode(str)$/;"	f
UrlEncode	plugin/unimpaired.vim	/^function! s:UrlEncode(str)$/;"	f
UseVimball	plugin/vimballPlugin.vim	/^com! -na=? -complete=dir  UseVimball			call vimball#Vimball(1,<f-args>)$/;"	c
VIM	ruby/command-t/vim.rb	/^  module VIM$/;"	m	class:CommandT
VIM	ruby/command-t/vim/screen.rb	/^  module VIM$/;"	m	class:CommandT
VIM	ruby/command-t/vim/window.rb	/^  module VIM$/;"	m	class:CommandT
VPATH	ruby/command-t/Makefile	/^VPATH = $(srcdir):$(topdir):$(hdrdir)$/;"	m
VerifyText	plugin/showmarks.vim	/^fun! s:VerifyText(which)$/;"	f
ViewSession	plugin/session.vim	/^command! -bar -nargs=? -complete=customlist,session#complete_names ViewSession call session#view_cmd(<q-args>)$/;"	c
VimDirListing	plugin/project.vim	/^    function! s:VimDirListing(filter, padding, separator, filevariable, filecount, dirvariable, dircount)$/;"	f
VimballList	plugin/vimballPlugin.vim	/^com! -na=0                VimballList			call vimball#Vimball(0)$/;"	c
Warn	plugin/bclose.vim	/^function! s:Warn(msg)$/;"	f
WarnNoMatches	plugin/EasyGrep.vim	/^function! s:WarnNoMatches(pattern)$/;"	f
Warning	plugin/EasyGrep.vim	/^function! s:Warning(message)$/;"	f
Wholematch	plugin/matchit.vim	/^fun! s:Wholematch(string, pat, start)$/;"	f
Window	ruby/command-t/vim/window.rb	/^    class Window$/;"	c	class:CommandT.VIM
WipeAll	plugin/project.vim	/^    function! s:WipeAll(recurse, line)$/;"	f
Worker	autoload/l9/async.py	/^class Worker(threading.Thread):$/;"	c
XmlDecode	plugin/unimpaired.vim	/^function! s:XmlDecode(str)$/;"	f
XmlEncode	plugin/unimpaired.vim	/^function! s:XmlEncode(str)$/;"	f
XmlEntityDecode	plugin/unimpaired.vim	/^function! s:XmlEntityDecode(str)$/;"	f
[%	plugin/matchit.vim	/^nnoremap <silent> [% :<C-U>call <SID>MultiMatch("bW", "n") <CR>$/;"	m
[%	plugin/matchit.vim	/^onoremap <silent> [% v:<C-U>call <SID>MultiMatch("bW", "o") <CR>$/;"	m
[%	plugin/matchit.vim	/^vmap [% <Esc>[%m'gv``$/;"	m
[<Space>	plugin/unimpaired.vim	/^nmap [<Space> <Plug>unimpairedBlankUp$/;"	m
[e	plugin/unimpaired.vim	/^nmap [e <Plug>unimpairedMoveUp$/;"	m
[o	plugin/unimpaired.vim	/^nmap [o <Plug>unimpairedOPrevious$/;"	m
\sm	plugin/showmarks.vim	/^noremap <unique> <script> \\sm m$/;"	m
]%	plugin/matchit.vim	/^nnoremap <silent> ]% :<C-U>call <SID>MultiMatch("W",  "n") <CR>$/;"	m
]%	plugin/matchit.vim	/^onoremap <silent> ]% v:<C-U>call <SID>MultiMatch("W",  "o") <CR>$/;"	m
]%	plugin/matchit.vim	/^vmap ]% <Esc>]%m'gv``$/;"	m
]<Space>	plugin/unimpaired.vim	/^nmap ]<Space> <Plug>unimpairedBlankDown$/;"	m
]e	plugin/unimpaired.vim	/^nmap ]e <Plug>unimpairedMoveDown$/;"	m
]o	plugin/unimpaired.vim	/^nmap ]o <Plug>unimpairedONext$/;"	m
__init__	autoload/l9/async.py	/^    def __init__(self):$/;"	m	class:Asyncer
__init__	autoload/l9/async.py	/^    def __init__(self):$/;"	m	class:Worker
__init__	autoload/l9/async.py	/^    def __init__(self, command, cwd, input, appends):$/;"	m	class:Executor
_map	autoload/textobj/user.vim	/^function! s:_map(map_commands, forced_p, lhs, rhs)$/;"	f
a%	plugin/matchit.vim	/^vmap a% <Esc>[%v]%$/;"	m
abbrev_len	ruby/command-t/match.c	/^    long    abbrev_len;             \/\/ length of same$/;"	m	struct:__anon1	file:
abbrev_p	ruby/command-t/match.c	/^    char    *abbrev_p;              \/\/ pointer to search string (abbreviation)$/;"	m	struct:__anon1	file:
abbrev_segments	ruby/command-t/prompt.rb	/^    def abbrev_segments$/;"	f	class:CommandT.Prompt
abolish_l	plugin/rails.vim	/^function! s:abolish_l(word)$/;"	f
abolish_setup	plugin/rails.vim	/^function! s:abolish_setup()$/;"	f
abolish_t	plugin/rails.vim	/^function! s:abolish_t(word)$/;"	f
accept_selection	ruby/command-t/controller.rb	/^    def accept_selection options = {}$/;"	f	class:CommandT.Controller
activateFufBuffer	autoload/fuf.vim	/^function s:activateFufBuffer()$/;"	f
activateNode	plugin/NERD_tree.vim	/^function! s:activateNode(forceKeepWindowOpen)$/;"	f
add!	ruby/command-t/match_window.rb	/^    def add! char$/;"	f	class:CommandT.MatchWindow
add!	ruby/command-t/prompt.rb	/^    def add! char$/;"	f	class:CommandT.Prompt
add_methods	autoload/rails.vim	/^function! s:add_methods(namespace, method_names)$/;"	f
add_paths_for_directory	ruby/command-t/scanner.rb	/^    def add_paths_for_directory dir, accumulator$/;"	f	class:CommandT.Scanner
addfilecmds	autoload/rails.vim	/^function! s:addfilecmds(type)$/;"	f
addprojectdir	autoload/rails.vim	/^function! s:addprojectdir(rr,parentdir,dir)$/;"	f
addtostatus	autoload/rails.vim	/^function! s:addtostatus(letter,status)$/;"	f
always_show_dot_files	ruby/command-t/match.c	/^    int     always_show_dot_files;  \/\/ boolean$/;"	m	struct:__anon1	file:
app_background_script_command	autoload/rails.vim	/^function! s:app_background_script_command(cmd) dict abort$/;"	f
app_dbext_settings	autoload/rails.vim	/^function! s:app_dbext_settings(environment) dict$/;"	f
app_default_locale	autoload/rails.vim	/^function! s:app_default_locale() dict abort$/;"	f
app_destroy_command	autoload/rails.vim	/^function! s:app_destroy_command(bang,...) dict$/;"	f
app_environments	autoload/rails.vim	/^function! s:app_environments() dict$/;"	f
app_eval	autoload/rails.vim	/^function! s:app_eval(ruby,...) dict abort$/;"	f
app_execute_script_command	autoload/rails.vim	/^function! s:app_execute_script_command(cmd) dict abort$/;"	f
app_file	autoload/rails.vim	/^function! s:app_file(name)$/;"	f
app_find_file	autoload/rails.vim	/^function! s:app_find_file(name, ...) dict abort$/;"	f
app_generate_command	autoload/rails.vim	/^function! s:app_generate_command(bang,...) dict$/;"	f
app_generators	autoload/rails.vim	/^function! s:app_generators() dict$/;"	f
app_has	autoload/rails.vim	/^function! s:app_has(feature) dict$/;"	f
app_has_file	autoload/rails.vim	/^function! s:app_has_file(file) dict$/;"	f
app_lightweight_ruby_eval	autoload/rails.vim	/^function! s:app_lightweight_ruby_eval(ruby,...) dict abort$/;"	f
app_migration	autoload/rails.vim	/^function! s:app_migration(file) dict$/;"	f
app_named_route_file	autoload/rails.vim	/^function! s:app_named_route_file(route) dict$/;"	f
app_path	autoload/rails.vim	/^function! s:app_path(...) dict$/;"	f
app_rake_tasks	autoload/rails.vim	/^function! s:app_rake_tasks() dict$/;"	f
app_relglob	autoload/rails.vim	/^function! s:app_relglob(path,glob,...) dict$/;"	f
app_route_names	autoload/rails.vim	/^function! s:app_route_names() dict$/;"	f
app_ruby_shell_command	autoload/rails.vim	/^function! s:app_ruby_shell_command(cmd) dict abort$/;"	f
app_runner_command	autoload/rails.vim	/^function! s:app_runner_command(count,args) dict$/;"	f
app_script_command	autoload/rails.vim	/^function! s:app_script_command(bang,...) dict$/;"	f
app_script_shell_command	autoload/rails.vim	/^function! s:app_script_shell_command(cmd) dict abort$/;"	f
app_server_command	autoload/rails.vim	/^function! s:app_server_command(bang,arg) dict$/;"	f
app_source_callback	autoload/rails.vim	/^function! s:app_source_callback(file) dict$/;"	f
app_tags_command	autoload/rails.vim	/^function! s:app_tags_command() dict$/;"	f
app_test_suites	autoload/rails.vim	/^function! s:app_test_suites() dict$/;"	f
app_user_assertions	autoload/rails.vim	/^function! s:app_user_assertions() dict$/;"	f
app_user_classes	autoload/rails.vim	/^function! s:app_user_classes() dict$/;"	f
arch	ruby/command-t/Makefile	/^arch = x86_64-linux$/;"	m
archdir	ruby/command-t/Makefile	/^archdir = $(rubylibdir)\/$(arch)$/;"	m
archflag	ruby/command-t/Makefile	/^archflag = $/;"	m
autocamelize	autoload/rails.vim	/^function! s:autocamelize(files,test)$/;"	f
autoload	plugin/rails.vim	/^function! s:autoload(...)$/;"	f
b:escape_spaces	plugin/project.vim	/^                let b:escape_spaces=1$/;"	v
backspace	ruby/command-t/controller.rb	/^    def backspace$/;"	f	class:CommandT.Controller
backspace!	ruby/command-t/match_window.rb	/^    def backspace!$/;"	f	class:CommandT.MatchWindow
backspace!	ruby/command-t/prompt.rb	/^    def backspace!$/;"	f	class:CommandT.Prompt
bclose_multiple	plugin/bclose.vim	/^  let bclose_multiple = 1$/;"	v
beep	plugin/surround.vim	/^function! s:beep()$/;"	f
bindMappings	plugin/NERD_tree.vim	/^function! s:bindMappings()$/;"	f
bindir	ruby/command-t/Makefile	/^bindir = $(exec_prefix)\/bin$/;"	m
bookmark	autoload/fuf/bookmarkdir.vim	/^function s:bookmark(word)$/;"	f
bookmarkHere	autoload/fuf/bookmarkfile.vim	/^function s:bookmarkHere(word)$/;"	f
bookmarkNode	plugin/NERD_tree.vim	/^function! s:bookmarkNode(name)$/;"	f
bufInWindows	plugin/NERD_tree.vim	/^function! s:bufInWindows(bnum)$/;"	f
buffer_app	autoload/rails.vim	/^function! s:buffer_app() dict abort$/;"	f
buffer_getline	autoload/rails.vim	/^function! s:buffer_getline(...) dict abort$/;"	f
buffer_getvar	autoload/rails.vim	/^function! s:buffer_getvar(varname) dict abort$/;"	f
buffer_lines	autoload/rails.vim	/^function! s:buffer_lines() dict abort$/;"	f
buffer_name	autoload/rails.vim	/^function! s:buffer_name() dict abort$/;"	f
buffer_number	autoload/rails.vim	/^function! s:buffer_number() dict abort$/;"	f
buffer_path	autoload/rails.vim	/^function! s:buffer_path() dict abort$/;"	f
buffer_setvar	autoload/rails.vim	/^function! s:buffer_setvar(varname, val) dict abort$/;"	f
buffer_type_name	autoload/rails.vim	/^function! s:buffer_type_name(...) dict abort$/;"	f
bufname	plugin/project.vim	/^        let bufname=escape(substitute(expand('%:p', 0), '\\\\', '\/', 'g'), ' ')$/;"	v
cCommandTMatch	ruby/command-t/ext.c	/^VALUE cCommandTMatch    = 0; \/\/ class CommandT::Match$/;"	v
cCommandTMatcher	ruby/command-t/ext.c	/^VALUE cCommandTMatcher  = 0; \/\/ class CommandT::Matcher$/;"	v
c_d	plugin/project.vim	/^                let c_d=s:GetCd(info, '')$/;"	v
cache_clear	autoload/rails.vim	/^function! s:cache_clear(...) dict$/;"	f
cache_get	autoload/rails.vim	/^function! s:cache_get(...) dict$/;"	f
cache_has	autoload/rails.vim	/^function! s:cache_has(key) dict$/;"	f
cache_needs	autoload/rails.vim	/^function! s:cache_needs(key) dict$/;"	f
cache_set	autoload/rails.vim	/^function! s:cache_set(key,value) dict$/;"	f
cancel	ruby/command-t/controller.rb	/^    def cancel$/;"	f	class:CommandT.Controller
cancel_selection	autoload/textobj/user.vim	/^function! s:cancel_selection(previous_mode, orig_pos)$/;"	f
centerView	plugin/NERD_tree.vim	/^function! s:centerView()$/;"	f
chCwd	plugin/NERD_tree.vim	/^function! s:chCwd()$/;"	f
chRoot	plugin/NERD_tree.vim	/^function! s:chRoot()$/;"	f
changeCoverage	autoload/fuf/coveragefile.vim	/^function s:changeCoverage(name)$/;"	f
changesurround	plugin/surround.vim	/^function! s:changesurround() " {{{1$/;"	f
checkDataFileCompatibility	autoload/fuf.vim	/^function s:checkDataFileCompatibility()$/;"	f
checkForActivate	plugin/NERD_tree.vim	/^function! s:checkForActivate()$/;"	f
checkForBrowse	plugin/NERD_tree.vim	/^function! s:checkForBrowse(dir)$/;"	f
checkKey	autoload/l9/async.vim	/^function s:checkKey(key)$/;"	f
check_special_tabpage	autoload/session.vim	/^function! s:check_special_tabpage(session)$/;"	f
check_special_window	autoload/session.vim	/^function! s:check_special_window(session)$/;"	f
clear	ruby/command-t/controller.rb	/^    def clear$/;"	f	class:CommandT.Controller
clear	ruby/command-t/match_window.rb	/^    def clear$/;"	f	class:CommandT.MatchWindow
clear!	ruby/command-t/prompt.rb	/^    def clear!$/;"	f	class:CommandT.Prompt
clearBookmarks	plugin/NERD_tree.vim	/^function! s:clearBookmarks(bookmarks)$/;"	f
clear_message	autoload/xolox.vim	/^function! s:clear_message()$/;"	f
clear_outputs	autoload/l9/async.py	/^    def clear_outputs(self):$/;"	m	class:Worker
close	ruby/command-t/match_window.rb	/^    def close$/;"	f	class:CommandT.MatchWindow
closeChildren	plugin/NERD_tree.vim	/^function! s:closeChildren()$/;"	f
closeCurrentDir	plugin/NERD_tree.vim	/^function! s:closeCurrentDir()$/;"	f
closeTree	plugin/NERD_tree.vim	/^function! s:closeTree()$/;"	f
closeTreeIfOpen	plugin/NERD_tree.vim	/^function! s:closeTreeIfOpen()$/;"	f
closeTreeIfQuitOnOpen	plugin/NERD_tree.vim	/^function! s:closeTreeIfQuitOnOpen()$/;"	f
closeTreeWindow	plugin/NERD_tree.vim	/^function! s:closeTreeWindow()$/;"	f
closematch	plugin/surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
colors_name	colors/ir_black.vim	/^let colors_name = "ir_black"$/;"	v
colors_name	colors/ir_white.vim	/^let colors_name = "ir_white"$/;"	v
colors_name	colors/javascript_white.vim	/^let colors_name = "ir_white"$/;"	v
colors_name	colors/php_white.vim	/^let colors_name = "ir_white"$/;"	v
colors_name	colors/solarized.vim	/^let colors_name = "solarized"$/;"	v
command	plugin/project.vim	/^                let command=substitute(command, '%F', escape(fnames, '\\'), 'g')$/;"	v
command	plugin/project.vim	/^                let command=substitute(command, '%d', escape(c_d, '\\'), 'g')$/;"	v
command	plugin/project.vim	/^                let command=substitute(command, '%h', escape(home, '\\'), 'g')$/;"	v
command	plugin/project.vim	/^                let command=substitute(command, '%s', escape(fnames, '\\'), 'g')$/;"	v
command	plugin/project.vim	/^                let command=substitute(g:proj_run_fold{a:number}, '%f', substitute(escape(fnames, '\\'), '\\\\ ', ' ', 'g'), 'g')$/;"	v
comp_alpha	ruby/command-t/matcher.c	/^int comp_alpha(const void *a, const void *b)$/;"	f
comp_score	ruby/command-t/matcher.c	/^int comp_score(const void *a, const void *b)$/;"	f
compact	autoload/rails.vim	/^function! s:compact(ary)$/;"	f
compareBookmarks	plugin/NERD_tree.vim	/^function! s:compareBookmarks(first, second)$/;"	f
compareNodes	plugin/NERD_tree.vim	/^function! s:compareNodes(n1, n2)$/;"	f
compareTimeDescending	autoload/fuf/buffer.vim	/^function s:compareTimeDescending(i1, i2)$/;"	f
completeBookmarks	plugin/NERD_tree.vim	/^function! s:completeBookmarks(A,L,P)$/;"	f
completion_filter	autoload/rails.vim	/^function! s:completion_filter(results,A)$/;"	f
controller	autoload/rails.vim	/^function! s:controller(...)$/;"	f
controllerEdit	autoload/rails.vim	/^function! s:controllerEdit(cmd,...)$/;"	f
controllerList	autoload/rails.vim	/^function! s:controllerList(A,L,P)$/;"	f
convert_value	autoload/xolox/timer.vim	/^function! s:convert_value(value)$/;"	f
copy_outputs	autoload/l9/async.py	/^    def copy_outputs(self):$/;"	m	class:Worker
countstr	plugin/EasyGrep.vim	/^function! s:countstr(str, ele)$/;"	f
createChangeCoverageListener	autoload/fuf/coveragefile.vim	/^function s:createChangeCoverageListener()$/;"	f
createDataBufferListener	autoload/fuf.vim	/^function s:createDataBufferListener(dataFile)$/;"	f
createEditDataListener	autoload/fuf.vim	/^function s:createEditDataListener()$/;"	f
createTreeWin	plugin/NERD_tree.vim	/^function! s:createTreeWin()$/;"	f
cs	plugin/surround.vim	/^  nmap      cs   <Plug>Csurround$/;"	m
cursor_end	ruby/command-t/controller.rb	/^    def cursor_end$/;"	f	class:CommandT.Controller
cursor_end	ruby/command-t/prompt.rb	/^    def cursor_end$/;"	f	class:CommandT.Prompt
cursor_left	ruby/command-t/controller.rb	/^    def cursor_left$/;"	f	class:CommandT.Controller
cursor_left	ruby/command-t/prompt.rb	/^    def cursor_left$/;"	f	class:CommandT.Prompt
cursor_right	ruby/command-t/controller.rb	/^    def cursor_right$/;"	f	class:CommandT.Controller
cursor_right	ruby/command-t/prompt.rb	/^    def cursor_right$/;"	f	class:CommandT.Prompt
cursor_start	ruby/command-t/controller.rb	/^    def cursor_start$/;"	f	class:CommandT.Controller
cursor_start	ruby/command-t/prompt.rb	/^    def cursor_start$/;"	f	class:CommandT.Prompt
datadir	ruby/command-t/Makefile	/^datadir = $(datarootdir)$/;"	m
datarootdir	ruby/command-t/Makefile	/^datarootdir = $(prefix)\/share$/;"	m
deactivateFufBuffer	autoload/fuf.vim	/^function s:deactivateFufBuffer()$/;"	f
debug	autoload/rails.vim	/^function! s:debug(str)$/;"	f
default_open_command	ruby/command-t/controller.rb	/^    def default_open_command$/;"	f	class:CommandT.Controller
delete	ruby/command-t/controller.rb	/^    def delete$/;"	f	class:CommandT.Controller
delete!	ruby/command-t/prompt.rb	/^    def delete!$/;"	f	class:CommandT.Prompt
deleteBookmark	plugin/NERD_tree.vim	/^function! s:deleteBookmark()$/;"	f
displayHelp	plugin/NERD_tree.vim	/^function! s:displayHelp()$/;"	f
dispose	ruby/command-t/prompt.rb	/^    def dispose$/;"	f	class:CommandT.Prompt
djump	autoload/rails.vim	/^function! s:djump(def)$/;"	f
dldflags	ruby/command-t/Makefile	/^dldflags = $/;"	m
docdir	ruby/command-t/Makefile	/^docdir = $(datarootdir)\/doc\/$(PACKAGE)$/;"	m
dosurround	plugin/surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
dot_file	ruby/command-t/match.c	/^    int     dot_file;               \/\/ boolean: true if str is a dot-file$/;"	m	struct:__anon1	file:
ds	plugin/surround.vim	/^  nmap      ds   <Plug>Dsurround$/;"	m
dumpHelp	plugin/NERD_tree.vim	/^function! s:dumpHelp()$/;"	f
dvidir	ruby/command-t/Makefile	/^dvidir = $(docdir)$/;"	m
echo	plugin/NERD_tree.vim	/^function! s:echo(msg)$/;"	f
echo	plugin/fs_menu.vim	/^function! s:echo(msg)$/;"	f
echoError	plugin/NERD_tree.vim	/^function! s:echoError(msg)$/;"	f
echoWarning	plugin/NERD_tree.vim	/^function! s:echoWarning(msg)$/;"	f
echoWarning	plugin/fs_menu.vim	/^function! s:echoWarning(msg)$/;"	f
edit	autoload/rails.vim	/^function! s:edit(cmd,file,...)$/;"	f
editcmdfor	autoload/rails.vim	/^function! s:editcmdfor(cmd)$/;"	f
end_comment	snippets/support_functions.vim	/^function! s:end_comment()$/;"	f
endof	autoload/rails.vim	/^function! s:endof(lnum)$/;"	f
ensure_appropriate_window_selection	ruby/command-t/controller.rb	/^    def ensure_appropriate_window_selection$/;"	f	class:CommandT.Controller
enumHelpTags	autoload/fuf/help.vim	/^function s:enumHelpTags(tagFiles)$/;"	f
enumItems	autoload/fuf/callbackfile.vim	/^function s:enumItems(dir)$/;"	f
enumItems	autoload/fuf/coveragefile.vim	/^function s:enumItems()$/;"	f
enumItems	autoload/fuf/dir.vim	/^function s:enumItems(dir)$/;"	f
enumItems	autoload/fuf/file.vim	/^function s:enumItems(dir)$/;"	f
enumNonCurrentItems	autoload/fuf/file.vim	/^function s:enumNonCurrentItems(dir, bufNrPrev, cache)$/;"	f
enumTaggedFiles	autoload/fuf/taggedfile.vim	/^function s:enumTaggedFiles(tagFiles)$/;"	f
enumTags	autoload/fuf/tag.vim	/^function s:enumTags(tagFiles)$/;"	f
environment	autoload/rails.vim	/^function! s:environment()$/;"	f
environmentEdit	autoload/rails.vim	/^function! s:environmentEdit(cmd,...)$/;"	f
environmentList	autoload/rails.vim	/^function! s:environmentList(A,L,P)$/;"	f
error	autoload/rails.vim	/^function! s:error(str)$/;"	f
error	plugin/rails.vim	/^function! s:error(str)$/;"	f
escape_for_single_quotes	ruby/command-t/vim.rb	/^    def self.escape_for_single_quotes str$/;"	F	class:CommandT.VIM
escarg	autoload/rails.vim	/^function! s:escarg(p)$/;"	f
esccmd	autoload/rails.vim	/^function! s:esccmd(p)$/;"	f
escvar	plugin/rails.vim	/^function! s:escvar(r)$/;"	f
evaluateLearningRank	autoload/fuf.vim	/^function s:evaluateLearningRank(word, stats)$/;"	f
exec	plugin/NERD_tree.vim	/^function! s:exec(cmd)$/;"	f
exec_prefix	ruby/command-t/Makefile	/^exec_prefix = $(prefix)$/;"	m
execute	autoload/l9/async.py	/^    def execute(self, var_key, var_command, var_cwd, var_input, var_appends):$/;"	m	class:Asyncer
execute	autoload/l9/async.py	/^    def execute(self, worker):$/;"	m	class:Executor
exists?	ruby/command-t/controller.rb	/^    def exists? name$/;"	f	class:CommandT.Controller
expandAbbrevMap	autoload/fuf.vim	/^function s:expandAbbrevMap(pattern, abbrevMap)$/;"	f
expandSearchDir	autoload/fuf/mrufile.vim	/^function s:expandSearchDir(dir, level)$/;"	f
extout	ruby/command-t/Makefile	/^extout = $/;"	m
extout_prefix	ruby/command-t/Makefile	/^extout_prefix = $/;"	m
extractafter	plugin/surround.vim	/^function! s:extractafter(str)$/;"	f
extractbefore	plugin/surround.vim	/^function! s:extractbefore(str)$/;"	f
extractdbvar	autoload/rails.vim	/^function! s:extractdbvar(str,arg)$/;"	f
file_getline	autoload/rails.vim	/^function! s:file_getline(lnum,...) dict abort$/;"	f
file_lines	autoload/rails.vim	/^function! s:file_lines() dict abort$/;"	f
file_name	autoload/rails.vim	/^function! s:file_name() dict abort$/;"	f
file_path	autoload/rails.vim	/^function! s:file_path() dict abort$/;"	f
find	ruby/command-t/match_window.rb	/^    def find char$/;"	f	class:CommandT.MatchWindow
findAndRevealPath	plugin/NERD_tree.vim	/^function! s:findAndRevealPath()$/;"	f
findItem	autoload/fuf/bookmarkdir.vim	/^function s:findItem(items, word)$/;"	f
findItem	autoload/fuf/bookmarkfile.vim	/^function s:findItem(items, word)$/;"	f
findItem	autoload/fuf/buffer.vim	/^function s:findItem(items, word)$/;"	f
findamethod	autoload/rails.vim	/^function! s:findamethod(func,repl)$/;"	f
findasymbol	autoload/rails.vim	/^function! s:findasymbol(sym,repl)$/;"	f
findcmdfor	autoload/rails.vim	/^function! s:findcmdfor(cmd)$/;"	f
findedit	autoload/rails.vim	/^function! s:findedit(cmd,files,...) abort$/;"	f
findfromview	autoload/rails.vim	/^function! s:findfromview(func,repl)$/;"	f
findit	autoload/rails.vim	/^function! s:findit(pat,repl)$/;"	f
findlayout	autoload/rails.vim	/^function! s:findlayout(name)$/;"	f
findview	autoload/rails.vim	/^function! s:findview(name)$/;"	f
firstUsableWindow	plugin/NERD_tree.vim	/^function! s:firstUsableWindow()$/;"	f
fixindent	plugin/surround.vim	/^function! s:fixindent(str,spc)$/;"	f
fixturesEdit	autoload/rails.vim	/^function! s:fixturesEdit(cmd,...)$/;"	f
fixturesList	autoload/rails.vim	/^function! s:fixturesList(A,L,P)$/;"	f
flush	ruby/command-t/controller.rb	/^    def flush$/;"	f	class:CommandT.Controller
flush	ruby/command-t/finder.rb	/^    def flush$/;"	f	class:CommandT.Finder
flush	ruby/command-t/scanner.rb	/^    def flush$/;"	f	class:CommandT.Scanner
flush	ruby/command-t/stub.rb	/^    def flush$/;"	f	class:CommandT.Stub
fnames	plugin/project.vim	/^                let fnames=Project_GetAllFnames(a:recurse, line('.'), ' ')$/;"	v
focus	ruby/command-t/match_window.rb	/^    def focus$/;"	f	class:CommandT.MatchWindow
focus	ruby/command-t/prompt.rb	/^    def focus$/;"	f	class:CommandT.Prompt
format	autoload/rails.vim	/^function! s:format(...)$/;"	f
formatItemUsingCache	autoload/fuf/mrufile.vim	/^function s:formatItemUsingCache(item)$/;"	f
fuf#addMode	autoload/fuf.vim	/^function fuf#addMode(modeName)$/;"	f
fuf#bookmarkdir#createHandler	autoload/fuf/bookmarkdir.vim	/^function fuf#bookmarkdir#createHandler(base)$/;"	f
fuf#bookmarkdir#getEditableDataNames	autoload/fuf/bookmarkdir.vim	/^function fuf#bookmarkdir#getEditableDataNames()$/;"	f
fuf#bookmarkdir#getSwitchOrder	autoload/fuf/bookmarkdir.vim	/^function fuf#bookmarkdir#getSwitchOrder()$/;"	f
fuf#bookmarkdir#onInit	autoload/fuf/bookmarkdir.vim	/^function fuf#bookmarkdir#onInit()$/;"	f
fuf#bookmarkdir#renewCache	autoload/fuf/bookmarkdir.vim	/^function fuf#bookmarkdir#renewCache()$/;"	f
fuf#bookmarkdir#requiresOnCommandPre	autoload/fuf/bookmarkdir.vim	/^function fuf#bookmarkdir#requiresOnCommandPre()$/;"	f
fuf#bookmarkfile#createHandler	autoload/fuf/bookmarkfile.vim	/^function fuf#bookmarkfile#createHandler(base)$/;"	f
fuf#bookmarkfile#getEditableDataNames	autoload/fuf/bookmarkfile.vim	/^function fuf#bookmarkfile#getEditableDataNames()$/;"	f
fuf#bookmarkfile#getSwitchOrder	autoload/fuf/bookmarkfile.vim	/^function fuf#bookmarkfile#getSwitchOrder()$/;"	f
fuf#bookmarkfile#onInit	autoload/fuf/bookmarkfile.vim	/^function fuf#bookmarkfile#onInit()$/;"	f
fuf#bookmarkfile#renewCache	autoload/fuf/bookmarkfile.vim	/^function fuf#bookmarkfile#renewCache()$/;"	f
fuf#bookmarkfile#requiresOnCommandPre	autoload/fuf/bookmarkfile.vim	/^function fuf#bookmarkfile#requiresOnCommandPre()$/;"	f
fuf#buffer#createHandler	autoload/fuf/buffer.vim	/^function fuf#buffer#createHandler(base)$/;"	f
fuf#buffer#getEditableDataNames	autoload/fuf/buffer.vim	/^function fuf#buffer#getEditableDataNames()$/;"	f
fuf#buffer#getSwitchOrder	autoload/fuf/buffer.vim	/^function fuf#buffer#getSwitchOrder()$/;"	f
fuf#buffer#onInit	autoload/fuf/buffer.vim	/^function fuf#buffer#onInit()$/;"	f
fuf#buffer#renewCache	autoload/fuf/buffer.vim	/^function fuf#buffer#renewCache()$/;"	f
fuf#buffer#requiresOnCommandPre	autoload/fuf/buffer.vim	/^function fuf#buffer#requiresOnCommandPre()$/;"	f
fuf#callbackfile#createHandler	autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#createHandler(base)$/;"	f
fuf#callbackfile#getEditableDataNames	autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#getEditableDataNames()$/;"	f
fuf#callbackfile#getSwitchOrder	autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#getSwitchOrder()$/;"	f
fuf#callbackfile#launch	autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#launch(initialPattern, partialMatching, prompt, exclude, listener)$/;"	f
fuf#callbackfile#onInit	autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#onInit()$/;"	f
fuf#callbackfile#renewCache	autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#renewCache()$/;"	f
fuf#callbackfile#requiresOnCommandPre	autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#requiresOnCommandPre()$/;"	f
fuf#callbackitem#createHandler	autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#createHandler(base)$/;"	f
fuf#callbackitem#getEditableDataNames	autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#getEditableDataNames()$/;"	f
fuf#callbackitem#getSwitchOrder	autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#getSwitchOrder()$/;"	f
fuf#callbackitem#launch	autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#launch(initialPattern, partialMatching, prompt, listener, items, forPath)$/;"	f
fuf#callbackitem#onInit	autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#onInit()$/;"	f
fuf#callbackitem#renewCache	autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#renewCache()$/;"	f
fuf#callbackitem#requiresOnCommandPre	autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#requiresOnCommandPre()$/;"	f
fuf#changelist#createHandler	autoload/fuf/changelist.vim	/^function fuf#changelist#createHandler(base)$/;"	f
fuf#changelist#getEditableDataNames	autoload/fuf/changelist.vim	/^function fuf#changelist#getEditableDataNames()$/;"	f
fuf#changelist#getSwitchOrder	autoload/fuf/changelist.vim	/^function fuf#changelist#getSwitchOrder()$/;"	f
fuf#changelist#onInit	autoload/fuf/changelist.vim	/^function fuf#changelist#onInit()$/;"	f
fuf#changelist#renewCache	autoload/fuf/changelist.vim	/^function fuf#changelist#renewCache()$/;"	f
fuf#changelist#requiresOnCommandPre	autoload/fuf/changelist.vim	/^function fuf#changelist#requiresOnCommandPre()$/;"	f
fuf#compareRanks	autoload/fuf.vim	/^function fuf#compareRanks(i1, i2)$/;"	f
fuf#countModifiedFiles	autoload/fuf.vim	/^function fuf#countModifiedFiles(files, time)$/;"	f
fuf#coveragefile#createHandler	autoload/fuf/coveragefile.vim	/^function fuf#coveragefile#createHandler(base)$/;"	f
fuf#coveragefile#getEditableDataNames	autoload/fuf/coveragefile.vim	/^function fuf#coveragefile#getEditableDataNames()$/;"	f
fuf#coveragefile#getSwitchOrder	autoload/fuf/coveragefile.vim	/^function fuf#coveragefile#getSwitchOrder()$/;"	f
fuf#coveragefile#onInit	autoload/fuf/coveragefile.vim	/^function fuf#coveragefile#onInit()$/;"	f
fuf#coveragefile#renewCache	autoload/fuf/coveragefile.vim	/^function fuf#coveragefile#renewCache()$/;"	f
fuf#coveragefile#requiresOnCommandPre	autoload/fuf/coveragefile.vim	/^function fuf#coveragefile#requiresOnCommandPre()$/;"	f
fuf#defineKeyMappingInHandler	autoload/fuf.vim	/^function fuf#defineKeyMappingInHandler(key, func)$/;"	f
fuf#defineLaunchCommand	autoload/fuf.vim	/^function fuf#defineLaunchCommand(CmdName, modeName, prefixInitialPattern)$/;"	f
fuf#dir#createHandler	autoload/fuf/dir.vim	/^function fuf#dir#createHandler(base)$/;"	f
fuf#dir#getEditableDataNames	autoload/fuf/dir.vim	/^function fuf#dir#getEditableDataNames()$/;"	f
fuf#dir#getSwitchOrder	autoload/fuf/dir.vim	/^function fuf#dir#getSwitchOrder()$/;"	f
fuf#dir#onInit	autoload/fuf/dir.vim	/^function fuf#dir#onInit()$/;"	f
fuf#dir#renewCache	autoload/fuf/dir.vim	/^function fuf#dir#renewCache()$/;"	f
fuf#dir#requiresOnCommandPre	autoload/fuf/dir.vim	/^function fuf#dir#requiresOnCommandPre()$/;"	f
fuf#echoError	autoload/fuf.vim	/^function fuf#echoError(msg)$/;"	f
fuf#echoWarning	autoload/fuf.vim	/^function fuf#echoWarning(msg)$/;"	f
fuf#editDataFile	autoload/fuf.vim	/^function fuf#editDataFile()$/;"	f
fuf#enumExpandedDirsEntries	autoload/fuf.vim	/^function fuf#enumExpandedDirsEntries(dir, exclude)$/;"	f
fuf#expandTailDotSequenceToParentDir	autoload/fuf.vim	/^function fuf#expandTailDotSequenceToParentDir(pattern)$/;"	f
fuf#file#createHandler	autoload/fuf/file.vim	/^function fuf#file#createHandler(base)$/;"	f
fuf#file#getEditableDataNames	autoload/fuf/file.vim	/^function fuf#file#getEditableDataNames()$/;"	f
fuf#file#getSwitchOrder	autoload/fuf/file.vim	/^function fuf#file#getSwitchOrder()$/;"	f
fuf#file#onInit	autoload/fuf/file.vim	/^function fuf#file#onInit()$/;"	f
fuf#file#renewCache	autoload/fuf/file.vim	/^function fuf#file#renewCache()$/;"	f
fuf#file#requiresOnCommandPre	autoload/fuf/file.vim	/^function fuf#file#requiresOnCommandPre()$/;"	f
fuf#formatPrompt	autoload/fuf.vim	/^function fuf#formatPrompt(prompt, partialMatching, otherString)$/;"	f
fuf#getCurrentTagFiles	autoload/fuf.vim	/^function fuf#getCurrentTagFiles()$/;"	f
fuf#getDataFileTime	autoload/fuf.vim	/^function fuf#getDataFileTime(modeName, dataName)$/;"	f
fuf#getFileLines	autoload/fuf.vim	/^function fuf#getFileLines(file)$/;"	f
fuf#getModeNames	autoload/fuf.vim	/^function fuf#getModeNames()$/;"	f
fuf#getRunningHandler	autoload/fuf.vim	/^function fuf#getRunningHandler()$/;"	f
fuf#givencmd#createHandler	autoload/fuf/givencmd.vim	/^function fuf#givencmd#createHandler(base)$/;"	f
fuf#givencmd#getEditableDataNames	autoload/fuf/givencmd.vim	/^function fuf#givencmd#getEditableDataNames()$/;"	f
fuf#givencmd#getSwitchOrder	autoload/fuf/givencmd.vim	/^function fuf#givencmd#getSwitchOrder()$/;"	f
fuf#givencmd#launch	autoload/fuf/givencmd.vim	/^function fuf#givencmd#launch(initialPattern, partialMatching, prompt, items)$/;"	f
fuf#givencmd#onInit	autoload/fuf/givencmd.vim	/^function fuf#givencmd#onInit()$/;"	f
fuf#givencmd#renewCache	autoload/fuf/givencmd.vim	/^function fuf#givencmd#renewCache()$/;"	f
fuf#givencmd#requiresOnCommandPre	autoload/fuf/givencmd.vim	/^function fuf#givencmd#requiresOnCommandPre()$/;"	f
fuf#givendir#createHandler	autoload/fuf/givendir.vim	/^function fuf#givendir#createHandler(base)$/;"	f
fuf#givendir#getEditableDataNames	autoload/fuf/givendir.vim	/^function fuf#givendir#getEditableDataNames()$/;"	f
fuf#givendir#getSwitchOrder	autoload/fuf/givendir.vim	/^function fuf#givendir#getSwitchOrder()$/;"	f
fuf#givendir#launch	autoload/fuf/givendir.vim	/^function fuf#givendir#launch(initialPattern, partialMatching, prompt, items)$/;"	f
fuf#givendir#onInit	autoload/fuf/givendir.vim	/^function fuf#givendir#onInit()$/;"	f
fuf#givendir#renewCache	autoload/fuf/givendir.vim	/^function fuf#givendir#renewCache()$/;"	f
fuf#givendir#requiresOnCommandPre	autoload/fuf/givendir.vim	/^function fuf#givendir#requiresOnCommandPre()$/;"	f
fuf#givenfile#createHandler	autoload/fuf/givenfile.vim	/^function fuf#givenfile#createHandler(base)$/;"	f
fuf#givenfile#getEditableDataNames	autoload/fuf/givenfile.vim	/^function fuf#givenfile#getEditableDataNames()$/;"	f
fuf#givenfile#getSwitchOrder	autoload/fuf/givenfile.vim	/^function fuf#givenfile#getSwitchOrder()$/;"	f
fuf#givenfile#launch	autoload/fuf/givenfile.vim	/^function fuf#givenfile#launch(initialPattern, partialMatching, prompt, items)$/;"	f
fuf#givenfile#onInit	autoload/fuf/givenfile.vim	/^function fuf#givenfile#onInit()$/;"	f
fuf#givenfile#renewCache	autoload/fuf/givenfile.vim	/^function fuf#givenfile#renewCache()$/;"	f
fuf#givenfile#requiresOnCommandPre	autoload/fuf/givenfile.vim	/^function fuf#givenfile#requiresOnCommandPre()$/;"	f
fuf#help#createHandler	autoload/fuf/help.vim	/^function fuf#help#createHandler(base)$/;"	f
fuf#help#getEditableDataNames	autoload/fuf/help.vim	/^function fuf#help#getEditableDataNames()$/;"	f
fuf#help#getSwitchOrder	autoload/fuf/help.vim	/^function fuf#help#getSwitchOrder()$/;"	f
fuf#help#onInit	autoload/fuf/help.vim	/^function fuf#help#onInit()$/;"	f
fuf#help#renewCache	autoload/fuf/help.vim	/^function fuf#help#renewCache()$/;"	f
fuf#help#requiresOnCommandPre	autoload/fuf/help.vim	/^function fuf#help#requiresOnCommandPre()$/;"	f
fuf#jumplist#createHandler	autoload/fuf/jumplist.vim	/^function fuf#jumplist#createHandler(base)$/;"	f
fuf#jumplist#getEditableDataNames	autoload/fuf/jumplist.vim	/^function fuf#jumplist#getEditableDataNames()$/;"	f
fuf#jumplist#getSwitchOrder	autoload/fuf/jumplist.vim	/^function fuf#jumplist#getSwitchOrder()$/;"	f
fuf#jumplist#onInit	autoload/fuf/jumplist.vim	/^function fuf#jumplist#onInit()$/;"	f
fuf#jumplist#renewCache	autoload/fuf/jumplist.vim	/^function fuf#jumplist#renewCache()$/;"	f
fuf#jumplist#requiresOnCommandPre	autoload/fuf/jumplist.vim	/^function fuf#jumplist#requiresOnCommandPre()$/;"	f
fuf#launch	autoload/fuf.vim	/^function fuf#launch(modeName, initialPattern, partialMatching)$/;"	f
fuf#line#createHandler	autoload/fuf/line.vim	/^function fuf#line#createHandler(base)$/;"	f
fuf#line#getEditableDataNames	autoload/fuf/line.vim	/^function fuf#line#getEditableDataNames()$/;"	f
fuf#line#getSwitchOrder	autoload/fuf/line.vim	/^function fuf#line#getSwitchOrder()$/;"	f
fuf#line#onInit	autoload/fuf/line.vim	/^function fuf#line#onInit()$/;"	f
fuf#line#renewCache	autoload/fuf/line.vim	/^function fuf#line#renewCache()$/;"	f
fuf#line#requiresOnCommandPre	autoload/fuf/line.vim	/^function fuf#line#requiresOnCommandPre()$/;"	f
fuf#loadDataFile	autoload/fuf.vim	/^function fuf#loadDataFile(modeName, dataName)$/;"	f
fuf#makeNonPathItem	autoload/fuf.vim	/^function fuf#makeNonPathItem(word, menu)$/;"	f
fuf#makePathItem	autoload/fuf.vim	/^function fuf#makePathItem(fname, menu, appendsDirSuffix)$/;"	f
fuf#makePatternSet	autoload/fuf.vim	/^function fuf#makePatternSet(patternBase, interpreter, partialMatching)$/;"	f
fuf#makePreviewLinesAround	autoload/fuf.vim	/^function fuf#makePreviewLinesAround(lines, indices, page, maxHeight)$/;"	f
fuf#makePreviewLinesForFile	autoload/fuf.vim	/^function fuf#makePreviewLinesForFile(file, count, maxHeight)$/;"	f
fuf#mapToSetAbbrWithSnippedWordAsPath	autoload/fuf.vim	/^function fuf#mapToSetAbbrWithSnippedWordAsPath(items)$/;"	f
fuf#mapToSetSerialIndex	autoload/fuf.vim	/^function fuf#mapToSetSerialIndex(in, offset)$/;"	f
fuf#mrucmd#createHandler	autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#createHandler(base)$/;"	f
fuf#mrucmd#getEditableDataNames	autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#getEditableDataNames()$/;"	f
fuf#mrucmd#getSwitchOrder	autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#getSwitchOrder()$/;"	f
fuf#mrucmd#onCommandPre	autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#onCommandPre(cmd)$/;"	f
fuf#mrucmd#onInit	autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#onInit()$/;"	f
fuf#mrucmd#renewCache	autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#renewCache()$/;"	f
fuf#mrucmd#requiresOnCommandPre	autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#requiresOnCommandPre()$/;"	f
fuf#mrufile#createHandler	autoload/fuf/mrufile.vim	/^function fuf#mrufile#createHandler(base)$/;"	f
fuf#mrufile#getEditableDataNames	autoload/fuf/mrufile.vim	/^function fuf#mrufile#getEditableDataNames()$/;"	f
fuf#mrufile#getSwitchOrder	autoload/fuf/mrufile.vim	/^function fuf#mrufile#getSwitchOrder()$/;"	f
fuf#mrufile#onInit	autoload/fuf/mrufile.vim	/^function fuf#mrufile#onInit()$/;"	f
fuf#mrufile#renewCache	autoload/fuf/mrufile.vim	/^function fuf#mrufile#renewCache()$/;"	f
fuf#mrufile#requiresOnCommandPre	autoload/fuf/mrufile.vim	/^function fuf#mrufile#requiresOnCommandPre()$/;"	f
fuf#onComplete	autoload/fuf.vim	/^function fuf#onComplete(findstart, base)$/;"	f
fuf#openBuffer	autoload/fuf.vim	/^function fuf#openBuffer(bufNr, mode, reuse)$/;"	f
fuf#openFile	autoload/fuf.vim	/^function fuf#openFile(path, mode, reuse)$/;"	f
fuf#openHelp	autoload/fuf.vim	/^function fuf#openHelp(tag, mode)$/;"	f
fuf#openTag	autoload/fuf.vim	/^function fuf#openTag(tag, mode)$/;"	f
fuf#prejump	autoload/fuf.vim	/^function fuf#prejump(mode)$/;"	f
fuf#quickfix#createHandler	autoload/fuf/quickfix.vim	/^function fuf#quickfix#createHandler(base)$/;"	f
fuf#quickfix#getEditableDataNames	autoload/fuf/quickfix.vim	/^function fuf#quickfix#getEditableDataNames()$/;"	f
fuf#quickfix#getSwitchOrder	autoload/fuf/quickfix.vim	/^function fuf#quickfix#getSwitchOrder()$/;"	f
fuf#quickfix#onInit	autoload/fuf/quickfix.vim	/^function fuf#quickfix#onInit()$/;"	f
fuf#quickfix#renewCache	autoload/fuf/quickfix.vim	/^function fuf#quickfix#renewCache()$/;"	f
fuf#quickfix#requiresOnCommandPre	autoload/fuf/quickfix.vim	/^function fuf#quickfix#requiresOnCommandPre()$/;"	f
fuf#saveDataFile	autoload/fuf.vim	/^function fuf#saveDataFile(modeName, dataName, items)$/;"	f
fuf#setAbbrWithFormattedWord	autoload/fuf.vim	/^function fuf#setAbbrWithFormattedWord(item, abbrIndex)$/;"	f
fuf#setOneTimeVariables	autoload/fuf.vim	/^function fuf#setOneTimeVariables(...)$/;"	f
fuf#splitPath	autoload/fuf.vim	/^function fuf#splitPath(path)$/;"	f
fuf#suffixNumber	autoload/fuf.vim	/^function fuf#suffixNumber(str)$/;"	f
fuf#tag#createHandler	autoload/fuf/tag.vim	/^function fuf#tag#createHandler(base)$/;"	f
fuf#tag#getEditableDataNames	autoload/fuf/tag.vim	/^function fuf#tag#getEditableDataNames()$/;"	f
fuf#tag#getSwitchOrder	autoload/fuf/tag.vim	/^function fuf#tag#getSwitchOrder()$/;"	f
fuf#tag#onInit	autoload/fuf/tag.vim	/^function fuf#tag#onInit()$/;"	f
fuf#tag#renewCache	autoload/fuf/tag.vim	/^function fuf#tag#renewCache()$/;"	f
fuf#tag#requiresOnCommandPre	autoload/fuf/tag.vim	/^function fuf#tag#requiresOnCommandPre()$/;"	f
fuf#taggedfile#createHandler	autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#createHandler(base)$/;"	f
fuf#taggedfile#getEditableDataNames	autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#getEditableDataNames()$/;"	f
fuf#taggedfile#getSwitchOrder	autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#getSwitchOrder()$/;"	f
fuf#taggedfile#onInit	autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#onInit()$/;"	f
fuf#taggedfile#renewCache	autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#renewCache()$/;"	f
fuf#taggedfile#requiresOnCommandPre	autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#requiresOnCommandPre()$/;"	f
fuf#updateMruList	autoload/fuf.vim	/^function fuf#updateMruList(mrulist, newItem, maxItem, exclude)$/;"	f
function	autoload/rails.vim	/^function! s:function(name)$/;"	f
function	plugin/rails.vim	/^function! s:function(name)$/;"	f
functionaltestEdit	autoload/rails.vim	/^function! s:functionaltestEdit(cmd,...)$/;"	f
functionaltestList	autoload/rails.vim	/^function! s:functionaltestList(A,L,P)$/;"	f
fuzzyglob	autoload/rails.vim	/^function! s:fuzzyglob(arg)$/;"	f
g%	plugin/matchit.vim	/^nnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'n') <CR>$/;"	m
g%	plugin/matchit.vim	/^onoremap <silent> g% v:<C-U>call <SID>Match_wrapper('',0,'o') <CR>$/;"	m
g%	plugin/matchit.vim	/^vnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'v') <CR>m'gv``$/;"	m
g:EasyGrepAllOptionsInExplorer	plugin/EasyGrep.vim	/^    let g:EasyGrepAllOptionsInExplorer=0$/;"	v
g:EasyGrepCommand	plugin/EasyGrep.vim	/^    let g:EasyGrepCommand=0$/;"	v
g:EasyGrepEveryMatch	plugin/EasyGrep.vim	/^    let g:EasyGrepEveryMatch=0$/;"	v
g:EasyGrepExtraWarnings	plugin/EasyGrep.vim	/^    let g:EasyGrepExtraWarnings=1$/;"	v
g:EasyGrepFileAssociationsInExplorer	plugin/EasyGrep.vim	/^    let g:EasyGrepFileAssociationsInExplorer=0$/;"	v
g:EasyGrepHidden	plugin/EasyGrep.vim	/^    let g:EasyGrepHidden=0$/;"	v
g:EasyGrepIgnoreCase	plugin/EasyGrep.vim	/^    let g:EasyGrepIgnoreCase=&ignorecase$/;"	v
g:EasyGrepInvertWholeWord	plugin/EasyGrep.vim	/^    let g:EasyGrepInvertWholeWord=0$/;"	v
g:EasyGrepJumpToMatch	plugin/EasyGrep.vim	/^    let g:EasyGrepJumpToMatch=1$/;"	v
g:EasyGrepMappingsSet	plugin/EasyGrep.vim	/^    let g:EasyGrepMappingsSet = 1$/;"	v
g:EasyGrepMode	plugin/EasyGrep.vim	/^        let g:EasyGrepMode = 0$/;"	v
g:EasyGrepMode	plugin/EasyGrep.vim	/^    let g:EasyGrepMode=0$/;"	v
g:EasyGrepOpenWindowOnMatch	plugin/EasyGrep.vim	/^    let g:EasyGrepOpenWindowOnMatch=1$/;"	v
g:EasyGrepOptionPrefix	plugin/EasyGrep.vim	/^    let g:EasyGrepOptionPrefix='<leader>vy'$/;"	v
g:EasyGrepRecursive	plugin/EasyGrep.vim	/^    let g:EasyGrepRecursive=0$/;"	v
g:EasyGrepReplaceAllPerFile	plugin/EasyGrep.vim	/^    let g:EasyGrepReplaceAllPerFile=0$/;"	v
g:EasyGrepReplaceWindowMode	plugin/EasyGrep.vim	/^        let g:EasyGrepReplaceWindowMode = 0$/;"	v
g:EasyGrepReplaceWindowMode	plugin/EasyGrep.vim	/^    let g:EasyGrepReplaceWindowMode=0$/;"	v
g:EasyGrepSearchCurrentBufferDir	plugin/EasyGrep.vim	/^    let g:EasyGrepSearchCurrentBufferDir=1$/;"	v
g:EasyGrepVersion	plugin/EasyGrep.vim	/^let g:EasyGrepVersion = ".98"$/;"	v
g:EasyGrepWindow	plugin/EasyGrep.vim	/^    let g:EasyGrepWindow=0$/;"	v
g:EasyGrepWindowPosition	plugin/EasyGrep.vim	/^       let g:EasyGrepWindowPosition=""$/;"	v
g:EasyGrepWindowPosition	plugin/EasyGrep.vim	/^    let g:EasyGrepWindowPosition=""$/;"	v
g:NERDTreeBookmark	plugin/NERD_tree.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeDirNode	plugin/NERD_tree.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeFileNode	plugin/NERD_tree.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeIgnore	plugin/NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreePath	plugin/NERD_tree.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreeSortOrder	plugin/NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:NERDTreeStatusline	plugin/NERD_tree.vim	/^    let g:NERDTreeStatusline = "%{exists('b:NERDTreeRoot')?b:NERDTreeRoot.path.str():''}"$/;"	v
g:SimpleFold_use_subfolds	plugin/SimpleFold.vim	/^    let g:SimpleFold_use_subfolds = 1$/;"	v
g:autoloaded_rails	autoload/rails.vim	/^let g:autoloaded_rails = '4.3'$/;"	v
g:command_t_loaded	plugin/command-t.vim	/^let g:command_t_loaded = 1$/;"	v
g:did_ft	plugin/snipMate.vim	/^let g:did_ft = {}$/;"	v
g:java_simplefold_expr	plugin/SimpleFold.vim	/^let g:java_simplefold_expr = $/;"	v
g:loaded_autoload_l9	autoload/l9.vim	/^let g:loaded_autoload_l9 = 1$/;"	v
g:loaded_nerdtree_fs_menu	plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:loaded_php_doc	ftplugin/php_doc.vim	/^let g:loaded_php_doc = 1$/;"	v
g:loaded_rails	plugin/rails.vim	/^let g:loaded_rails = 1$/;"	v
g:loaded_repeat	autoload/repeat.vim	/^let g:loaded_repeat = 1$/;"	v
g:loaded_session	plugin/session.vim	/^let g:loaded_session = 1$/;"	v
g:loaded_surround	plugin/surround.vim	/^let g:loaded_surround = 1$/;"	v
g:loaded_syntastic_plugin	plugin/syntastic.vim	/^let g:loaded_syntastic_plugin = 1$/;"	v
g:loaded_textobj_rubyblock	plugin/textobj/rubyblock.vim	/^let g:loaded_textobj_rubyblock = 1$/;"	v
g:loaded_unimpaired	plugin/unimpaired.vim	/^let g:loaded_unimpaired = 1$/;"	v
g:loaded_vimball	autoload/vimball.vim	/^let g:loaded_vimball = "v30"$/;"	v
g:loaded_vimballPlugin	plugin/vimballPlugin.vim	/^let g:loaded_vimballPlugin = "v30"$/;"	v
g:miniBufExplBufList	plugin/minibufexpl.vim	/^  let g:miniBufExplBufList = ''$/;"	v
g:miniBufExplDoneClickSave	plugin/minibufexpl.vim	/^    let  g:miniBufExplDoneClickSave = 1$/;"	v
g:miniBufExplForceDisplay	plugin/minibufexpl.vim	/^  let g:miniBufExplForceDisplay = 0$/;"	v
g:miniBufExplForceSyntaxEnable	plugin/minibufexpl.vim	/^  let g:miniBufExplForceSyntaxEnable = 0$/;"	v
g:miniBufExplInAutoUpdate	plugin/minibufexpl.vim	/^  let g:miniBufExplInAutoUpdate = 0$/;"	v
g:miniBufExplMapCTabSwitchBufs	plugin/minibufexpl.vim	/^  let g:miniBufExplMapCTabSwitchBufs = 0$/;"	v
g:miniBufExplMapCTabSwitchWindows	plugin/minibufexpl.vim	/^  let g:miniBufExplMapCTabSwitchWindows = 0$/;"	v
g:miniBufExplMapWindowNav	plugin/minibufexpl.vim	/^  let g:miniBufExplMapWindowNav = 0$/;"	v
g:miniBufExplMapWindowNavArrows	plugin/minibufexpl.vim	/^  let g:miniBufExplMapWindowNavArrows = 0$/;"	v
g:miniBufExplMapWindowNavVim	plugin/minibufexpl.vim	/^  let g:miniBufExplMapWindowNavVim = 0$/;"	v
g:miniBufExplMaxHeight	plugin/minibufexpl.vim	/^  let g:miniBufExplMaxHeight = 0$/;"	v
g:miniBufExplMaxSize	plugin/minibufexpl.vim	/^  let g:miniBufExplMaxSize = g:miniBufExplMaxHeight$/;"	v
g:miniBufExplMinHeight	plugin/minibufexpl.vim	/^  let g:miniBufExplMinHeight = 1$/;"	v
g:miniBufExplMinSize	plugin/minibufexpl.vim	/^  let g:miniBufExplMinSize = g:miniBufExplMinHeight$/;"	v
g:miniBufExplModSelTarget	plugin/minibufexpl.vim	/^  let g:miniBufExplModSelTarget = 0$/;"	v
g:miniBufExplSplitBelow	plugin/minibufexpl.vim	/^  let g:miniBufExplSplitBelow = &splitbelow$/;"	v
g:miniBufExplSplitToEdge	plugin/minibufexpl.vim	/^  let g:miniBufExplSplitToEdge = 1$/;"	v
g:miniBufExplTabWrap	plugin/minibufexpl.vim	/^  let g:miniBufExplTabWrap = 0$/;"	v
g:miniBufExplUseSingleClick	plugin/minibufexpl.vim	/^  let g:miniBufExplUseSingleClick = 0$/;"	v
g:miniBufExplVSplit	plugin/minibufexpl.vim	/^  let g:miniBufExplVSplit = 0$/;"	v
g:miniBufExplorerAutoUpdate	plugin/minibufexpl.vim	/^  let g:miniBufExplorerAutoUpdate = 0$/;"	v
g:miniBufExplorerDebugLevel	plugin/minibufexpl.vim	/^  let g:miniBufExplorerDebugLevel = 0 $/;"	v
g:miniBufExplorerDebugMode	plugin/minibufexpl.vim	/^  let g:miniBufExplorerDebugMode = 3 $/;"	v
g:miniBufExplorerDebugOutput	plugin/minibufexpl.vim	/^  let g:miniBufExplorerDebugOutput = ''$/;"	v
g:miniBufExplorerMoreThanOne	plugin/minibufexpl.vim	/^  let g:miniBufExplorerMoreThanOne = 2$/;"	v
g:netrw_cygwin	autoload/vimball.vim	/^    let g:netrw_cygwin= 0$/;"	v
g:netrw_cygwin	autoload/vimball.vim	/^    let g:netrw_cygwin= 1$/;"	v
g:netrw_cygwin	autoload/vimball.vim	/^   let g:netrw_cygwin= 0$/;"	v
g:ocaml_simplefold_expr	plugin/SimpleFold.vim	/^let g:ocaml_simplefold_expr = $/;"	v
g:ocaml_simplefold_nestable_end_expr	plugin/SimpleFold.vim	/^let g:ocaml_simplefold_nestable_end_expr = $/;"	v
g:ocaml_simplefold_nestable_start_expr	plugin/SimpleFold.vim	/^let g:ocaml_simplefold_nestable_start_expr = $/;"	v
g:ocaml_simplefold_prefix	plugin/SimpleFold.vim	/^let g:ocaml_simplefold_prefix =$/;"	v
g:omlet_simplefold_expr	plugin/SimpleFold.vim	/^let g:omlet_simplefold_expr = g:ocaml_simplefold_expr$/;"	v
g:omlet_simplefold_nestable_end_expr	plugin/SimpleFold.vim	/^let g:omlet_simplefold_nestable_end_expr = g:ocaml_simplefold_nestable_end_expr$/;"	v
g:omlet_simplefold_nestable_start_expr	plugin/SimpleFold.vim	/^let g:omlet_simplefold_nestable_start_expr = g:ocaml_simplefold_nestable_start_expr$/;"	v
g:omlet_simplefold_prefix	plugin/SimpleFold.vim	/^let g:omlet_simplefold_prefix = g:ocaml_simplefold_prefix$/;"	v
g:perl_simplefold_expr	plugin/SimpleFold.vim	/^let g:perl_simplefold_expr =$/;"	v
g:perl_simplefold_nestable_end_expr	plugin/SimpleFold.vim	/^let g:perl_simplefold_nestable_end_expr =$/;"	v
g:perl_simplefold_nestable_start_expr	plugin/SimpleFold.vim	/^let g:perl_simplefold_nestable_start_expr =$/;"	v
g:perl_simplefold_prefix	plugin/SimpleFold.vim	/^let g:perl_simplefold_prefix =$/;"	v
g:php_simplefold_expr	plugin/SimpleFold.vim	/^let g:php_simplefold_expr =$/;"	v
g:php_simplefold_nestable_end_expr	plugin/SimpleFold.vim	/^let g:php_simplefold_nestable_end_expr =$/;"	v
g:php_simplefold_nestable_start_expr	plugin/SimpleFold.vim	/^let g:php_simplefold_nestable_start_expr =$/;"	v
g:php_simplefold_prefix	plugin/SimpleFold.vim	/^let g:php_simplefold_prefix =$/;"	v
g:proj_running	plugin/project.vim	/^        let g:proj_running = bufnr(bufname.'\\>')$/;"	v
g:rails_default_file	ftplugin/ruby.vim	/^let g:rails_default_file='config\/database.yml'$/;"	v
g:repeat_tick	autoload/repeat.vim	/^let g:repeat_tick = -1$/;"	v
g:ruby_simplefold_expr	plugin/SimpleFold.vim	/^let g:ruby_simplefold_expr = $/;"	v
g:ruby_simplefold_nestable_end_expr	plugin/SimpleFold.vim	/^let g:ruby_simplefold_nestable_end_expr = '\\v^\\s*end'$/;"	v
g:ruby_simplefold_nestable_start_expr	plugin/SimpleFold.vim	/^let g:ruby_simplefold_nestable_start_expr = $/;"	v
g:ruby_simplefold_prefix	plugin/SimpleFold.vim	/^let g:ruby_simplefold_prefix = '\\v^\\s*(#([^{]+|\\{[^{]|\\{\\{[^{])*)?$'$/;"	v
g:session_autoload	plugin/session.vim	/^  let g:session_autoload = 0$/;"	v
g:session_autosave	plugin/session.vim	/^  let g:session_autosave = 0$/;"	v
g:session_directory	plugin/session.vim	/^    let g:session_directory = '~\/.vim\/sessions'$/;"	v
g:session_directory	plugin/session.vim	/^    let g:session_directory = '~\\vimfiles\\sessions'$/;"	v
g:simplefold_expr	plugin/SimpleFold.vim	/^let g:simplefold_expr = '\\v^\\s*[#%"0-9]{0,4}\\s*\\{(\\{\\{|!!)'$/;"	v
g:simplefold_marker_end	plugin/SimpleFold.vim	/^let g:simplefold_marker_end = '\\v\\}\\}\\}\\}'$/;"	v
g:simplefold_marker_start	plugin/SimpleFold.vim	/^let g:simplefold_marker_start = '\\v\\{\\{\\{\\{'$/;"	v
g:solarized_bold	colors/solarized.vim	/^    let g:solarized_bold = 1$/;"	v
g:solarized_contrast	colors/solarized.vim	/^    let g:solarized_contrast = "normal"$/;"	v
g:solarized_degrade	colors/solarized.vim	/^    let g:solarized_degrade = 0$/;"	v
g:solarized_italic	colors/solarized.vim	/^    let g:solarized_italic = 1$/;"	v
g:solarized_style	colors/solarized.vim	/^    let g:solarized_style = &background$/;"	v
g:solarized_termcolors	colors/solarized.vim	/^    let g:solarized_termcolors = 256$/;"	v
g:solarized_termtrans	colors/solarized.vim	/^    let g:solarized_termtrans = 0$/;"	v
g:solarized_underline	colors/solarized.vim	/^    let g:solarized_underline = 1$/;"	v
g:syntastic_auto_loc_list	plugin/syntastic.vim	/^    let g:syntastic_auto_loc_list = 0$/;"	v
g:syntastic_disabled_filetypes	plugin/syntastic.vim	/^    let g:syntastic_disabled_filetypes = []$/;"	v
g:syntastic_enable_signs	plugin/syntastic.vim	/^    let g:syntastic_enable_signs = 0$/;"	v
g:syntastic_quiet_warnings	ftplugin/javascript.vim	/^let g:syntastic_quiet_warnings=1$/;"	v
g:syntastic_quiet_warnings	ftplugin/php.vim	/^let g:syntastic_quiet_warnings=0$/;"	v
g:syntastic_quiet_warnings	plugin/syntastic.vim	/^    let g:syntastic_quiet_warnings = 0$/;"	v
g:timer_enabled	autoload/xolox/timer.vim	/^  let g:timer_enabled = 0$/;"	v
g:timer_verbosity	autoload/xolox/timer.vim	/^  let g:timer_verbosity = 1$/;"	v
g:unimpaired_html_entities	plugin/unimpaired.vim	/^let g:unimpaired_html_entities = {$/;"	v
g:vimball_mkdir	autoload/vimball.vim	/^   let g:vimball_mkdir= "makedir"$/;"	v
g:vimball_mkdir	autoload/vimball.vim	/^   let g:vimball_mkdir= "mkdir"$/;"	v
g:vimball_mkdir	autoload/vimball.vim	/^   let g:vimball_mkdir= g:netrw_local_mkdir$/;"	v
g:xolox_message_buffer	autoload/xolox.vim	/^  let g:xolox_message_buffer = 100$/;"	v
g:xolox_messages	autoload/xolox.vim	/^  let g:xolox_messages = []$/;"	v
gS	plugin/surround.vim	/^    vmap    gS   <Plug>VgSurround$/;"	m
getBufIndicator	autoload/fuf/buffer.vim	/^function s:getBufIndicator(bufNr)$/;"	f
getChangesLines	autoload/fuf/changelist.vim	/^function s:getChangesLines()$/;"	f
getCurrentHelpTagFiles	autoload/fuf/help.vim	/^function s:getCurrentHelpTagFiles()$/;"	f
getEditableDataFiles	autoload/fuf.vim	/^function s:getEditableDataFiles(modeName)$/;"	f
getHelpTagEntries	autoload/fuf/help.vim	/^function s:getHelpTagEntries(tagFile)$/;"	f
getJumpsLines	autoload/fuf/jumplist.vim	/^function s:getJumpsLines()$/;"	f
getJumpsLines	autoload/fuf/quickfix.vim	/^function s:getJumpsLines()$/;"	f
getLastBlockLength	autoload/fuf.vim	/^function s:getLastBlockLength(pattern, patternIsPath)$/;"	f
getLinePattern	autoload/fuf/bookmarkfile.vim	/^function s:getLinePattern(lnum)$/;"	f
getMatchingIndex	autoload/fuf/help.vim	/^function s:getMatchingIndex(lines, pattern)$/;"	f
getMatchingIndex	autoload/fuf/tag.vim	/^function s:getMatchingIndex(lines, cmd)$/;"	f
getMatchingLineNumber	autoload/fuf/bookmarkfile.vim	/^function s:getMatchingLineNumber(lines, pattern, lnumBegin)$/;"	f
getPath	plugin/NERD_tree.vim	/^function! s:getPath(ln)$/;"	f
getSnippedHead	autoload/fuf.vim	/^function s:getSnippedHead(head, baseLen)$/;"	f
getTagNames	autoload/fuf/tag.vim	/^function s:getTagNames(tagFile)$/;"	f
getTaggedFileList	autoload/fuf/taggedfile.vim	/^function s:getTaggedFileList(tagfile)$/;"	f
getTreeWinNum	plugin/NERD_tree.vim	/^function! s:getTreeWinNum()$/;"	f
getWordBoundaries	autoload/fuf.vim	/^function s:getWordBoundaries(word)$/;"	f
get_bool	ruby/command-t/controller.rb	/^    def get_bool name$/;"	f	class:CommandT.Controller
get_bool	ruby/command-t/settings.rb	/^    def get_bool setting$/;"	f	class:CommandT.Settings
get_cursor_highlight	ruby/command-t/match_window.rb	/^    def get_cursor_highlight$/;"	f	class:CommandT.MatchWindow
get_list_or_string	ruby/command-t/controller.rb	/^    def get_list_or_string name$/;"	f	class:CommandT.Controller
get_name	autoload/session.vim	/^function! s:get_name(name, use_default) " {{{2$/;"	f
get_number	ruby/command-t/controller.rb	/^    def get_number name$/;"	f	class:CommandT.Controller
get_number	ruby/command-t/settings.rb	/^    def get_number setting$/;"	f	class:CommandT.Settings
get_string	ruby/command-t/controller.rb	/^    def get_string name$/;"	f	class:CommandT.Controller
getchar	plugin/surround.vim	/^function! s:getchar()$/;"	f
getopt	autoload/rails.vim	/^function! s:getopt(opt,...)$/;"	f
getpidfor	autoload/rails.vim	/^function! s:getpidfor(bind,port)$/;"	f
gpos_to_spos	autoload/textobj/user.vim	/^function! s:gpos_to_spos(gpos)$/;"	f
gsub	autoload/rails.vim	/^function! s:gsub(str,pat,rep)$/;"	f
gsub	plugin/rails.vim	/^function! s:gsub(str,pat,rep)$/;"	f
handleFailedAssersion	plugin/l9.vim	/^  function s:handleFailedAssersion(expr)$/;"	f
handleMiddleMouse	plugin/NERD_tree.vim	/^function! s:handleMiddleMouse()$/;"	f
handle_key	ruby/command-t/controller.rb	/^    def handle_key$/;"	f	class:CommandT.Controller
handler.getCompleteItems	autoload/fuf/bookmarkdir.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/bookmarkfile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/buffer.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/callbackfile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/callbackitem.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/changelist.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/coveragefile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/dir.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/file.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/givencmd.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/givendir.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/givenfile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/help.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/jumplist.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/line.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/mrucmd.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/mrufile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/quickfix.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/tag.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/taggedfile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getModeName	autoload/fuf/bookmarkdir.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/bookmarkfile.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/buffer.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/callbackfile.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/callbackitem.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/changelist.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/coveragefile.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/dir.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/file.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/givencmd.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/givendir.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/givenfile.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/help.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/jumplist.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/line.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/mrucmd.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/mrufile.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/quickfix.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/tag.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/taggedfile.vim	/^function s:handler.getModeName()$/;"	f
handler.getPreviewHeight	autoload/fuf/bookmarkdir.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/bookmarkfile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/buffer.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/callbackfile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/callbackitem.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/changelist.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/coveragefile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/dir.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/file.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/givencmd.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/givendir.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/givenfile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/help.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/jumplist.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/line.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/mrucmd.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/mrufile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/quickfix.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/tag.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/taggedfile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPrompt	autoload/fuf/bookmarkdir.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/bookmarkfile.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/buffer.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/callbackfile.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/callbackitem.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/changelist.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/coveragefile.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/dir.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/file.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/givencmd.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/givendir.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/givenfile.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/help.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/jumplist.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/line.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/mrucmd.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/mrufile.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/quickfix.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/tag.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/taggedfile.vim	/^function s:handler.getPrompt()$/;"	f
handler.isOpenable	autoload/fuf/bookmarkdir.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/bookmarkfile.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/buffer.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/callbackfile.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/callbackitem.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/changelist.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/coveragefile.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/dir.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/file.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/givencmd.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/givendir.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/givenfile.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/help.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/jumplist.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/line.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/mrucmd.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/mrufile.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/quickfix.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/tag.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/taggedfile.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.makePatternSet	autoload/fuf/bookmarkdir.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/bookmarkfile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/buffer.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/callbackfile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/callbackitem.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/changelist.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/coveragefile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/dir.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/file.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/givencmd.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/givendir.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/givenfile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/help.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/jumplist.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/line.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/mrucmd.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/mrufile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/quickfix.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/tag.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/taggedfile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePreviewLines	autoload/fuf/bookmarkdir.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/bookmarkfile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/buffer.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/callbackfile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/callbackitem.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/changelist.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/coveragefile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/dir.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/file.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/givencmd.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/givendir.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/givenfile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/help.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/jumplist.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/line.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/mrucmd.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/mrufile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/quickfix.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/tag.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/taggedfile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.onModeEnterPost	autoload/fuf/bookmarkdir.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/bookmarkfile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/buffer.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/callbackfile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/callbackitem.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/changelist.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/coveragefile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/dir.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/file.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/givencmd.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/givendir.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/givenfile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/help.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/jumplist.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/line.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/mrucmd.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/mrufile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/quickfix.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/tag.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/taggedfile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPre	autoload/fuf/bookmarkdir.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/bookmarkfile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/buffer.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/callbackfile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/callbackitem.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/changelist.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/coveragefile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/dir.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/file.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/givencmd.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/givendir.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/givenfile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/help.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/jumplist.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/line.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/mrucmd.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/mrufile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/quickfix.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/tag.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/taggedfile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeLeavePost	autoload/fuf/bookmarkdir.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/bookmarkfile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/buffer.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/callbackfile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/callbackitem.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/changelist.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/coveragefile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/dir.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/file.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/givencmd.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/givendir.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/givenfile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/help.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/jumplist.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/line.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/mrucmd.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/mrufile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/quickfix.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/tag.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/taggedfile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onOpen	autoload/fuf/bookmarkdir.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/bookmarkfile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/buffer.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/callbackfile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/callbackitem.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/changelist.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/coveragefile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/dir.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/file.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/givencmd.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/givendir.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/givenfile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/help.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/jumplist.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/line.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/mrucmd.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/mrufile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/quickfix.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/tag.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/taggedfile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handlerBase.addStat	autoload/fuf.vim	/^function s:handlerBase.addStat(pattern, word)$/;"	f
handlerBase.concretize	autoload/fuf.vim	/^function s:handlerBase.concretize(deriv)$/;"	f
handlerBase.existsPrompt	autoload/fuf.vim	/^function s:handlerBase.existsPrompt(line)$/;"	f
handlerBase.getMatchingCompleteItems	autoload/fuf.vim	/^function s:handlerBase.getMatchingCompleteItems(patternBase)$/;"	f
handlerBase.onBs	autoload/fuf.vim	/^function s:handlerBase.onBs()$/;"	f
handlerBase.onComplete	autoload/fuf.vim	/^function s:handlerBase.onComplete(findstart, base)$/;"	f
handlerBase.onCr	autoload/fuf.vim	/^function s:handlerBase.onCr(openType)$/;"	f
handlerBase.onCursorMovedI	autoload/fuf.vim	/^function s:handlerBase.onCursorMovedI()$/;"	f
handlerBase.onDeleteWord	autoload/fuf.vim	/^function s:handlerBase.onDeleteWord()$/;"	f
handlerBase.onInsertLeave	autoload/fuf.vim	/^function s:handlerBase.onInsertLeave()$/;"	f
handlerBase.onPreviewBase	autoload/fuf.vim	/^function s:handlerBase.onPreviewBase(repeatable)$/;"	f
handlerBase.onRecallPattern	autoload/fuf.vim	/^function s:handlerBase.onRecallPattern(shift)$/;"	f
handlerBase.onSwitchMatching	autoload/fuf.vim	/^function s:handlerBase.onSwitchMatching()$/;"	f
handlerBase.onSwitchMode	autoload/fuf.vim	/^function s:handlerBase.onSwitchMode(shift)$/;"	f
handlerBase.removePrompt	autoload/fuf.vim	/^function s:handlerBase.removePrompt(line)$/;"	f
handlerBase.restorePrompt	autoload/fuf.vim	/^function s:handlerBase.restorePrompt(line)$/;"	f
has_syntax	ruby/command-t/vim.rb	/^    def self.has_syntax?$/;"	F	class:CommandT.VIM
hdrdir	ruby/command-t/Makefile	/^hdrdir = $(topdir)$/;"	m
help	plugin/project.vim	/^        cnoremap <buffer> help let g:proj_doinghelp = 1<CR>:help$/;"	m
helperEdit	autoload/rails.vim	/^function! s:helperEdit(cmd,...)$/;"	f
helperList	autoload/rails.vim	/^function! s:helperList(A,L,P)$/;"	f
helpermethods	autoload/rails.vim	/^function! s:helpermethods()$/;"	f
hide	ruby/command-t/controller.rb	/^    def hide$/;"	f	class:CommandT.Controller
hide_cursor	ruby/command-t/match_window.rb	/^    def hide_cursor$/;"	f	class:CommandT.MatchWindow
highlightError	autoload/fuf.vim	/^function s:highlightError()$/;"	f
highlightPrompt	autoload/fuf.vim	/^function s:highlightPrompt(prompt)$/;"	f
home	plugin/project.vim	/^                let home=s:GetHome(info, '')$/;"	v
hs_highlight_boolean	colors/solarized.vim	/^let hs_highlight_boolean=1$/;"	v
hs_highlight_delimiters	colors/solarized.vim	/^let hs_highlight_delimiters=1$/;"	v
htmldir	ruby/command-t/Makefile	/^htmldir = $(docdir)$/;"	m
includedir	ruby/command-t/Makefile	/^includedir = $(prefix)\/include$/;"	m
indentLevelFor	plugin/NERD_tree.vim	/^function! s:indentLevelFor(line)$/;"	f
info	plugin/project.vim	/^                let info=s:RecursivelyConstructDirectives(line('.'))$/;"	v
infodir	ruby/command-t/Makefile	/^infodir = $(datarootdir)\/info$/;"	m
initNerdTree	plugin/NERD_tree.vim	/^function! s:initNerdTree(name)$/;"	f
initNerdTreeInPlace	plugin/NERD_tree.vim	/^function! s:initNerdTreeInPlace(dir)$/;"	f
initNerdTreeMirror	plugin/NERD_tree.vim	/^function! s:initNerdTreeMirror()$/;"	f
initOpenURL	autoload/rails.vim	/^function! s:initOpenURL()$/;"	f
initVariable	plugin/NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
initialize	plugin/fuf.vim	/^function s:initialize()$/;"	f
initialize	ruby/command-t/controller.rb	/^    def initialize$/;"	f	class:CommandT.Controller
initialize	ruby/command-t/finder.rb	/^    def initialize path = Dir.pwd, options = {}$/;"	f	class:CommandT.Finder
initialize	ruby/command-t/match_window.rb	/^    def initialize options = {}$/;"	f	class:CommandT.MatchWindow
initialize	ruby/command-t/prompt.rb	/^    def initialize$/;"	f	class:CommandT.Prompt
initialize	ruby/command-t/scanner.rb	/^    def initialize path = Dir.pwd, options = {}$/;"	f	class:CommandT.Scanner
initialize	ruby/command-t/settings.rb	/^    def initialize$/;"	f	class:CommandT.Settings
initializerEdit	autoload/rails.vim	/^function! s:initializerEdit(cmd,...)$/;"	f
initializerList	autoload/rails.vim	/^function! s:initializerList(A,L,P)$/;"	f
inputreplacement	plugin/surround.vim	/^function! s:inputreplacement()$/;"	f
inputtarget	plugin/surround.vim	/^function! s:inputtarget()$/;"	f
insert	plugin/surround.vim	/^function! s:insert(...) " {{{1$/;"	f
integrationtestEdit	autoload/rails.vim	/^function! s:integrationtestEdit(cmd,...)$/;"	f
integrationtestList	autoload/rails.vim	/^function! s:integrationtestList(A,L,P)$/;"	f
interpretPrimaryPatternForNonPath	autoload/fuf.vim	/^function s:interpretPrimaryPatternForNonPath(pattern)$/;"	f
interpretPrimaryPatternForPath	autoload/fuf.vim	/^function s:interpretPrimaryPatternForPath(pattern)$/;"	f
interpretPrimaryPatternForPathTail	autoload/fuf.vim	/^function s:interpretPrimaryPatternForPathTail(pattern)$/;"	f
invertrange	autoload/rails.vim	/^function! s:invertrange(beg,end)$/;"	f
isTreeOpen	plugin/NERD_tree.vim	/^function! s:isTreeOpen()$/;"	f
isWindowUsable	plugin/NERD_tree.vim	/^function! s:isWindowUsable(winnumber)$/;"	f
javascriptEdit	autoload/rails.vim	/^function! s:javascriptEdit(cmd,...)$/;"	f
javascriptList	autoload/rails.vim	/^function! s:javascriptList(A,L,P)$/;"	f
jumpToBookmark	autoload/fuf/bookmarkfile.vim	/^function s:jumpToBookmark(path, mode, pattern, lnum)$/;"	f
jumpToChild	plugin/NERD_tree.vim	/^function! s:jumpToChild(direction)$/;"	f
jumpToFirstChild	plugin/NERD_tree.vim	/^function! s:jumpToFirstChild()$/;"	f
jumpToLastChild	plugin/NERD_tree.vim	/^function! s:jumpToLastChild()$/;"	f
jumpToParent	plugin/NERD_tree.vim	/^function! s:jumpToParent()$/;"	f
jumpToRoot	plugin/NERD_tree.vim	/^function! s:jumpToRoot()$/;"	f
jumpToSibling	plugin/NERD_tree.vim	/^function! s:jumpToSibling(forward)$/;"	f
jump_to_window	autoload/session.vim	/^function! s:jump_to_window(session, tabpage, window)$/;"	f
k	plugin/project.vim	/^            let k=k+1$/;"	v
k	plugin/project.vim	/^        let k=1$/;"	v
l9#async#execute	autoload/l9/async.vim	/^function l9#async#execute(key, cmd, cwd, input, appends)$/;"	f
l9#async#listActiveWorkers	autoload/l9/async.vim	/^function l9#async#listActiveWorkers()$/;"	f
l9#async#listWorkers	autoload/l9/async.vim	/^function l9#async#listWorkers()$/;"	f
l9#async#read	autoload/l9/async.vim	/^function l9#async#read(key)$/;"	f
l9#completeForInputHl	autoload/l9.vim	/^function l9#completeForInputHl(lead, line, pos)$/;"	f
l9#concat	autoload/l9.vim	/^function l9#concat(items)$/;"	f
l9#concatPaths	autoload/l9.vim	/^function l9#concatPaths(paths)$/;"	f
l9#convertWildcardToRegexp	autoload/l9.vim	/^function l9#convertWildcardToRegexp(expr)$/;"	f
l9#defineVariableDefault	autoload/l9.vim	/^function l9#defineVariableDefault(name, default)$/;"	f
l9#deleteAllBuffersExcept	autoload/l9.vim	/^function l9#deleteAllBuffersExcept(files)$/;"	f
l9#echoHl	autoload/l9.vim	/^function l9#echoHl(hl, msg, prefix, addingHistory)$/;"	f
l9#filterWithLimit	autoload/l9.vim	/^function l9#filterWithLimit(items, expr, limit)$/;"	f
l9#getPathSeparator	autoload/l9.vim	/^function l9#getPathSeparator()$/;"	f
l9#getSelectedText	autoload/l9.vim	/^function l9#getSelectedText()$/;"	f
l9#getVersion	autoload/l9.vim	/^function l9#getVersion()$/;"	f
l9#grepBuffers	autoload/l9.vim	/^function l9#grepBuffers(pattern, bufNrs)$/;"	f
l9#grepFiles	autoload/l9.vim	/^function l9#grepFiles(pattern, files)$/;"	f
l9#guardScriptLoading	autoload/l9.vim	/^function l9#guardScriptLoading(path, vimVersion, l9Version)$/;"	f
l9#hash224	autoload/l9.vim	/^function l9#hash224(str)$/;"	f
l9#inputHl	autoload/l9.vim	/^function l9#inputHl(hl, ...)$/;"	f
l9#isCompatible	autoload/l9.vim	/^function l9#isCompatible(ver)$/;"	f
l9#loadFilesToBuffers	autoload/l9.vim	/^function l9#loadFilesToBuffers(files)$/;"	f
l9#loadScript	autoload/l9.vim	/^function l9#loadScript(text)$/;"	f
l9#modifyPathRelativeToDir	autoload/l9.vim	/^function l9#modifyPathRelativeToDir(path, dir)$/;"	f
l9#moveToBufferWindowInCurrentTabpage	autoload/l9.vim	/^function l9#moveToBufferWindowInCurrentTabpage(bufNr)$/;"	f
l9#moveToBufferWindowInOtherTabpage	autoload/l9.vim	/^function l9#moveToBufferWindowInOtherTabpage(bufNr)$/;"	f
l9#notifyBalloonly	autoload/l9.vim	/^function l9#notifyBalloonly(msg)$/;"	f
l9#notifyExternally	autoload/l9.vim	/^function l9#notifyExternally(msg)$/;"	f
l9#notifyScreen	autoload/l9.vim	/^function l9#notifyScreen(msg)$/;"	f
l9#notifyTmux	autoload/l9.vim	/^function l9#notifyTmux(msg)$/;"	f
l9#placeSign	autoload/l9.vim	/^function l9#placeSign(linehl, text, texthl, locations)$/;"	f
l9#quickfix#compareEntries	autoload/l9/quickfix.vim	/^function l9#quickfix#compareEntries(e0, e1)$/;"	f
l9#quickfix#isWindowOpened	autoload/l9/quickfix.vim	/^function l9#quickfix#isWindowOpened()$/;"	f
l9#quickfix#openIfNotEmpty	autoload/l9/quickfix.vim	/^function l9#quickfix#openIfNotEmpty(onlyRecognized, holdCursor)$/;"	f
l9#quickfix#placeSign	autoload/l9/quickfix.vim	/^function l9#quickfix#placeSign()$/;"	f
l9#quickfix#setMakeResult	autoload/l9/quickfix.vim	/^function l9#quickfix#setMakeResult(lines)$/;"	f
l9#quickfix#sort	autoload/l9/quickfix.vim	/^function l9#quickfix#sort()$/;"	f
l9#quickfix#toggleWindow	autoload/l9/quickfix.vim	/^function l9#quickfix#toggleWindow()$/;"	f
l9#readFile	autoload/l9.vim	/^function l9#readFile(...)$/;"	f
l9#removeIf	autoload/l9.vim	/^function l9#removeIf(items, expr)$/;"	f
l9#removeLinesBetween	autoload/l9.vim	/^function l9#removeLinesBetween(lines, begin, end)$/;"	f
l9#shiftWinNextTabpage	autoload/l9.vim	/^function l9#shiftWinNextTabpage()$/;"	f
l9#shiftWinPrevTabpage	autoload/l9.vim	/^function l9#shiftWinPrevTabpage()$/;"	f
l9#snipHead	autoload/l9.vim	/^function l9#snipHead(str, len, mask)$/;"	f
l9#snipMid	autoload/l9.vim	/^function l9#snipMid(str, len, mask)$/;"	f
l9#snipTail	autoload/l9.vim	/^function l9#snipTail(str, len, mask)$/;"	f
l9#tempbuffer#close	autoload/l9/tempbuffer.vim	/^function l9#tempbuffer#close(bufname)$/;"	f
l9#tempbuffer#isOpen	autoload/l9/tempbuffer.vim	/^function l9#tempbuffer#isOpen(bufname)$/;"	f
l9#tempbuffer#moveTo	autoload/l9/tempbuffer.vim	/^function l9#tempbuffer#moveTo(bufname)$/;"	f
l9#tempbuffer#openReadOnly	autoload/l9/tempbuffer.vim	/^function l9#tempbuffer#openReadOnly(bufname, filetype, lines, topleft, vertical, height, listener)$/;"	f
l9#tempbuffer#openScratch	autoload/l9/tempbuffer.vim	/^function l9#tempbuffer#openScratch(bufname, filetype, lines, topleft, vertical, height, listener)$/;"	f
l9#tempbuffer#openWritable	autoload/l9/tempbuffer.vim	/^function l9#tempbuffer#openWritable(bufname, filetype, lines, topleft, vertical, height, listener)$/;"	f
l9#tempvariables#end	autoload/l9/tempvariables.vim	/^function l9#tempvariables#end(group)$/;"	f
l9#tempvariables#set	autoload/l9/tempvariables.vim	/^function l9#tempvariables#set(group, name, value)$/;"	f
l9#tempvariables#setList	autoload/l9/tempvariables.vim	/^function l9#tempvariables#setList(group, variables)$/;"	f
l9#tempvariables#swap	autoload/l9/tempvariables.vim	/^function l9#tempvariables#swap(group)$/;"	f
l9#unique	autoload/l9.vim	/^function l9#unique(items)$/;"	f
l9#uniqueStably	autoload/l9.vim	/^function l9#uniqueStably(items)$/;"	f
l9#writeAll	autoload/l9.vim	/^function l9#writeAll()$/;"	f
l9#writeFile	autoload/l9.vim	/^function l9#writeFile(...)$/;"	f
lastformat	autoload/rails.vim	/^function! s:lastformat(start)$/;"	f
lastmethod	autoload/rails.vim	/^function! s:lastmethod(...)$/;"	f
lastmethodline	autoload/rails.vim	/^function! s:lastmethodline(start)$/;"	f
lastopeningline	autoload/rails.vim	/^function! s:lastopeningline(pattern,limit,start)$/;"	f
layoutEdit	autoload/rails.vim	/^function! s:layoutEdit(cmd,...)$/;"	f
layoutList	autoload/rails.vim	/^function! s:layoutList(A,L,P)$/;"	f
ldflags	ruby/command-t/Makefile	/^ldflags  = -L.  -rdynamic -Wl,-export-dynamic$/;"	m
leave	ruby/command-t/controller.rb	/^    def leave$/;"	f	class:CommandT.Controller
leave	ruby/command-t/match_window.rb	/^    def leave$/;"	f	class:CommandT.MatchWindow
libEdit	autoload/rails.vim	/^function! s:libEdit(cmd,...)$/;"	f
libList	autoload/rails.vim	/^function! s:libList(A,L,P)$/;"	f
libdir	ruby/command-t/Makefile	/^libdir = $(exec_prefix)\/lib$/;"	m
libexecdir	ruby/command-t/Makefile	/^libexecdir = $(exec_prefix)\/libexec$/;"	m
libpath	ruby/command-t/Makefile	/^libpath = . $(libdir)$/;"	m
linepeak	autoload/rails.vim	/^function! s:linepeak()$/;"	f
lines	ruby/command-t/vim/screen.rb	/^      def self.lines$/;"	F	class:CommandT.VIM.Screen
listAroundFilesUsingCache	autoload/fuf/mrufile.vim	/^function s:listAroundFilesUsingCache(dir)$/;"	f
list_matches	ruby/command-t/controller.rb	/^    def list_matches$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
loaded_bclose	plugin/bclose.vim	/^let loaded_bclose = 1$/;"	v
loaded_c_syntax_checker	syntax_checkers/c.vim	/^let loaded_c_syntax_checker = 1$/;"	v
loaded_coffee_syntax_checker	syntax_checkers/coffee.vim	/^let loaded_coffee_syntax_checker = 1$/;"	v
loaded_cpp_syntax_checker	syntax_checkers/cpp.vim	/^let loaded_cpp_syntax_checker = 1$/;"	v
loaded_cucumber_syntax_checker	syntax_checkers/cucumber.vim	/^let loaded_cucumber_syntax_checker = 1$/;"	v
loaded_eruby_syntax_checker	syntax_checkers/eruby.vim	/^let loaded_eruby_syntax_checker = 1$/;"	v
loaded_genutils	plugin/genutils.vim	/^let loaded_genutils = 205$/;"	v
loaded_haml_syntax_checker	syntax_checkers/haml.vim	/^let loaded_haml_syntax_checker = 1$/;"	v
loaded_haskell_syntax_checker	syntax_checkers/haskell.vim	/^let loaded_haskell_syntax_checker = 1$/;"	v
loaded_html_syntax_checker	syntax_checkers/html.vim	/^let loaded_html_syntax_checker = 1$/;"	v
loaded_javascript_syntax_checker	syntax_checkers/javascript.vim	/^let loaded_javascript_syntax_checker = 1$/;"	v
loaded_lua_syntax_checker	syntax_checkers/lua.vim	/^let loaded_lua_syntax_checker = 1$/;"	v
loaded_matchit	plugin/matchit.vim	/^let loaded_matchit = 1$/;"	v
loaded_minibufexplorer	plugin/minibufexpl.vim	/^let loaded_minibufexplorer = 1$/;"	v
loaded_nerd_tree	plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_perl_syntax_checker	syntax_checkers/perl.vim	/^let loaded_perl_syntax_checker = 1$/;"	v
loaded_php_syntax_checker	syntax_checkers/php.vim	/^let loaded_php_syntax_checker = 1$/;"	v
loaded_project	plugin/project.vim	/^let loaded_project=1$/;"	v
loaded_python_syntax_checker	syntax_checkers/python.vim	/^let loaded_python_syntax_checker = 1$/;"	v
loaded_ruby_syntax_checker	syntax_checkers/ruby.vim	/^let loaded_ruby_syntax_checker = 1$/;"	v
loaded_sass_syntax_checker	syntax_checkers/sass.vim	/^let loaded_sass_syntax_checker = 1$/;"	v
loaded_sh_syntax_checker	syntax_checkers/sh.vim	/^let loaded_sh_syntax_checker = 1$/;"	v
loaded_showmarks	plugin/showmarks.vim	/^let loaded_showmarks = 1$/;"	v
loaded_simplefold	plugin/SimpleFold.vim	/^let loaded_simplefold = 1$/;"	v
loaded_snips	plugin/snipMate.vim	/^let loaded_snips = 1$/;"	v
loaded_tex_syntax_checker	syntax_checkers/tex.vim	/^let loaded_tex_syntax_checker = 1$/;"	v
loaded_xhtml_syntax_checker	syntax_checkers/xhtml.vim	/^let loaded_xhtml_syntax_checker = 1$/;"	v
localeEdit	autoload/rails.vim	/^function! s:localeEdit(cmd,...)$/;"	f
localeList	autoload/rails.vim	/^function! s:localeList(A,L,P)$/;"	f
localedir	ruby/command-t/Makefile	/^localedir = $(datarootdir)\/locale$/;"	m
localstatedir	ruby/command-t/Makefile	/^localstatedir = $(prefix)\/var$/;"	m
lock	ruby/command-t/match_window.rb	/^    def lock$/;"	f	class:CommandT.MatchWindow
lock_session	autoload/session.vim	/^function! s:lock_session(session_path)$/;"	f
m	plugin/showmarks.vim	/^noremap <silent> m :exe 'norm \\sm'.nr2char(getchar())<bar>call <sid>ShowMarks()<CR>$/;"	m
mCommandT	ruby/command-t/ext.c	/^VALUE mCommandT         = 0; \/\/ module CommandT$/;"	v
mailerEdit	autoload/rails.vim	/^function! s:mailerEdit(cmd,...)$/;"	f
mailerList	autoload/rails.vim	/^function! s:mailerList(A,L,P)$/;"	f
makeAdditionalMigemoPattern	autoload/fuf.vim	/^function s:makeAdditionalMigemoPattern(pattern)$/;"	f
makeFileAbbrInfo	autoload/fuf.vim	/^function s:makeFileAbbrInfo(item, maxLenStats)$/;"	f
makeFuzzyMatchingExpr	autoload/fuf.vim	/^function s:makeFuzzyMatchingExpr(target, pattern)$/;"	f
makeItem	autoload/fuf/buffer.vim	/^function s:makeItem(nr)$/;"	f
makeItem	autoload/fuf/changelist.vim	/^function s:makeItem(line)$/;"	f
makeItem	autoload/fuf/jumplist.vim	/^function s:makeItem(line, bufnrPrev)$/;"	f
makeItem	autoload/fuf/quickfix.vim	/^function s:makeItem(qfItem)$/;"	f
makePartialMatchingExpr	autoload/fuf.vim	/^function s:makePartialMatchingExpr(target, pattern)$/;"	f
makeRefiningExpr	autoload/fuf.vim	/^function s:makeRefiningExpr(pattern)$/;"	f
makewithruby	autoload/rails.vim	/^function! s:makewithruby(arg,bang,...)$/;"	f
mandir	ruby/command-t/Makefile	/^mandir = $(datarootdir)\/man$/;"	m
map	autoload/textobj/user.vim	/^function! s:map(forced_p, lhs, rhs)$/;"	f
map	ruby/command-t/controller.rb	/^    def map key, function, param = nil$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
mapargs_pair_select	autoload/textobj/user.vim	/^function! s:mapargs_pair_select(lhs, pattern1, pattern2, flags, previous_mode)$/;"	f
mapargs_single_move	autoload/textobj/user.vim	/^function! s:mapargs_single_move(lhs, pattern, flags, previous_mode)$/;"	f
mapargs_single_select	autoload/textobj/user.vim	/^function! s:mapargs_single_select(lhs, pattern, flags, previous_mode)$/;"	f
match_limit	ruby/command-t/controller.rb	/^    def match_limit$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
match_text_for_idx	ruby/command-t/match_window.rb	/^    def match_text_for_idx idx$/;"	f	class:CommandT.MatchWindow
match_type	autoload/rails.vim	/^function! s:match_type(type,...)$/;"	f
matchcursor	autoload/rails.vim	/^function! s:matchcursor(pat)$/;"	f
matches=	ruby/command-t/match_window.rb	/^    def matches= matches$/;"	f	class:CommandT.MatchWindow
matchinfo_t	ruby/command-t/match.c	/^} matchinfo_t;$/;"	t	typeref:struct:__anon1	file:
max_score_per_char	ruby/command-t/match.c	/^    double  max_score_per_char;$/;"	m	struct:__anon1	file:
menuBufEnter	plugin/rails.vim	/^function! s:menuBufEnter()$/;"	f
menuBufLeave	plugin/rails.vim	/^function! s:menuBufLeave()$/;"	f
menucmd	plugin/rails.vim	/^function! s:menucmd(priority)$/;"	f
menuprompt	plugin/rails.vim	/^function! s:menuprompt(vimcmd,prompt)$/;"	f
message	autoload/xolox.vim	/^function! s:message(hlgroup, args) " -- implementation of message() and warning() {{{1$/;"	f
metalEdit	autoload/rails.vim	/^function! s:metalEdit(cmd,...)$/;"	f
metalList	autoload/rails.vim	/^function! s:metalList(A,L,P)$/;"	f
mextargs	autoload/rails.vim	/^function! s:mextargs(str,num)$/;"	f
migrationEdit	autoload/rails.vim	/^function! s:migrationEdit(cmd,...)$/;"	f
migrationList	autoload/rails.vim	/^function! s:migrationList(A,L,P)$/;"	f
migspc	autoload/rails.vim	/^function! s:migspc(line)$/;"	f
missing	ruby/command-t/extconf.rb	/^def missing item$/;"	f
mkeep	autoload/rails.vim	/^function! s:mkeep(str)$/;"	f
model	autoload/rails.vim	/^function! s:model(...)$/;"	f
modelEdit	autoload/rails.vim	/^function! s:modelEdit(cmd,...)$/;"	f
modelList	autoload/rails.vim	/^function! s:modelList(A,L,P)$/;"	f
moveToOtherTabpageOpeningBuffer	autoload/l9.vim	/^function s:moveToOtherTabpageOpeningBuffer(bufNr)$/;"	f
never_show_dot_files	ruby/command-t/match.c	/^    int     never_show_dot_files;   \/\/ boolean$/;"	m	struct:__anon1	file:
nextBufferName	plugin/NERD_tree.vim	/^function! s:nextBufferName()$/;"	f
noremap	autoload/textobj/user.vim	/^function! s:noremap(forced_p, lhs, rhs)$/;"	f
objmap	autoload/textobj/user.vim	/^function! s:objmap(forced_p, lhs, rhs)$/;"	f
objnoremap	autoload/textobj/user.vim	/^function! s:objnoremap(forced_p, lhs, rhs)$/;"	f
observerEdit	autoload/rails.vim	/^function! s:observerEdit(cmd,...)$/;"	f
observerList	autoload/rails.vim	/^function! s:observerList(A,L,P)$/;"	f
oldincludedir	ruby/command-t/Makefile	/^oldincludedir = $(DESTDIR)\/usr\/include$/;"	m
onBufDelete	autoload/l9/tempbuffer.vim	/^function s:onBufDelete(bufname)$/;"	f
onBufWriteCmd	autoload/l9/tempbuffer.vim	/^function s:onBufWriteCmd(bufname)$/;"	f
onCommandPre	autoload/fuf.vim	/^function s:onCommandPre()$/;"	f
openBookmark	plugin/NERD_tree.vim	/^function! s:openBookmark(name)$/;"	f
openEntrySplit	plugin/NERD_tree.vim	/^function! s:openEntrySplit(vertical, forceKeepWindowOpen)$/;"	f
openExplorer	plugin/NERD_tree.vim	/^function! s:openExplorer()$/;"	f
openInNewTab	plugin/NERD_tree.vim	/^function! s:openInNewTab(stayCurrentTab)$/;"	f
openNodeRecursively	plugin/NERD_tree.vim	/^function! s:openNodeRecursively()$/;"	f
open_selection	ruby/command-t/controller.rb	/^    def open_selection selection, options = {}$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
opfunc	plugin/surround.vim	/^function! s:opfunc(type,...) " {{{1$/;"	f
opfunc2	plugin/surround.vim	/^function! s:opfunc2(arg)$/;"	f
opts	autoload/rails.vim	/^function! s:opts()$/;"	f
padding_for_selected_match	ruby/command-t/match_window.rb	/^    def padding_for_selected_match str$/;"	f	class:CommandT.MatchWindow
parseChangesLine	autoload/fuf/changelist.vim	/^function s:parseChangesLine(line)$/;"	f
parseHelpTagEntry	autoload/fuf/help.vim	/^function s:parseHelpTagEntry(line, tagFile)$/;"	f
parseHelpTagFiles	autoload/fuf/help.vim	/^function s:parseHelpTagFiles(tagFiles, key)$/;"	f
parseJumpsLine	autoload/fuf/jumplist.vim	/^function s:parseJumpsLine(line, bufnrPrev)$/;"	f
parseJumpsLine	autoload/fuf/quickfix.vim	/^function s:parseJumpsLine(line)$/;"	f
parseTagFiles	autoload/fuf/tag.vim	/^function s:parseTagFiles(tagFiles, key)$/;"	f
parseTagFiles	autoload/fuf/taggedfile.vim	/^function s:parseTagFiles(tagFiles, key)$/;"	f
path=	ruby/command-t/finder.rb	/^    def path= path$/;"	f	class:CommandT.Finder
path=	ruby/command-t/scanner.rb	/^    def path= str$/;"	f	class:CommandT.Scanner
path_excluded?	ruby/command-t/scanner.rb	/^    def path_excluded? path$/;"	f	class:CommandT.Scanner
pathjoin	autoload/rails.vim	/^function! s:pathjoin(...) abort$/;"	f
paths	ruby/command-t/scanner.rb	/^    def paths$/;"	f	class:CommandT.Scanner
pathsplit	autoload/rails.vim	/^function! s:pathsplit(path) abort$/;"	f
pdfdir	ruby/command-t/Makefile	/^pdfdir = $(docdir)$/;"	m
plugin.define_default_key_mappings	autoload/textobj/user.vim	/^function! s:plugin.define_default_key_mappings(banged_p)  "{{{3$/;"	f
plugin.define_interface_key_mappings	autoload/textobj/user.vim	/^function! s:plugin.define_interface_key_mappings()  "{{{3$/;"	f
plugin.interface_mapping_name	autoload/textobj/user.vim	/^function! s:plugin.interface_mapping_name(obj_name, spec_name)  "{{{3$/;"	f
plugin.move	autoload/textobj/user.vim	/^function! s:plugin.move(obj_name, flags, previous_mode)$/;"	f
plugin.new	autoload/textobj/user.vim	/^function s:plugin.new(plugin_name, obj_specs)$/;"	f
plugin.normalize	autoload/textobj/user.vim	/^function s:plugin.normalize()$/;"	f
plugin.select	autoload/textobj/user.vim	/^function! s:plugin.select(obj_name, flags, previous_mode)$/;"	f
plugin.select_pair	autoload/textobj/user.vim	/^function! s:plugin.select_pair(obj_name, flags, previous_mode)$/;"	f
pluginEdit	autoload/rails.vim	/^function! s:pluginEdit(cmd,...)$/;"	f
pluginList	autoload/rails.vim	/^function! s:pluginList(A,L,P)$/;"	f
pop_command	autoload/rails.vim	/^function! s:pop_command()$/;"	f
pos_headp	autoload/textobj/user.vim	/^function! s:pos_headp(pos)$/;"	f
pos_lastp	autoload/textobj/user.vim	/^function! s:pos_lastp(pos)$/;"	f
pos_le	autoload/textobj/user.vim	/^function! s:pos_le(pos1, pos2)  " less than or equal$/;"	f
prefix	ruby/command-t/Makefile	/^prefix = $(DESTDIR)\/home\/onno\/.rvm\/rubies\/ruby-1.8.7-p302$/;"	m
preload	ruby/command-t/Makefile	/^preload = $/;"	m
prepare_movement	autoload/textobj/user.vim	/^function! s:prepare_movement(previous_mode)$/;"	f
prepare_selection	autoload/textobj/user.vim	/^function! s:prepare_selection(previous_mode)$/;"	f
prephelp	autoload/rails.vim	/^function! s:prephelp()$/;"	f
previewNode	plugin/NERD_tree.vim	/^function! s:previewNode(openNewWin)$/;"	f
print_active_worker_keys	autoload/l9/async.py	/^    def print_active_worker_keys(self):$/;"	m	class:Asyncer
print_error	ruby/command-t/match_window.rb	/^    def print_error msg$/;"	f	class:CommandT.MatchWindow
print_match	ruby/command-t/match_window.rb	/^    def print_match idx$/;"	f	class:CommandT.MatchWindow
print_matches	ruby/command-t/match_window.rb	/^    def print_matches$/;"	f	class:CommandT.MatchWindow
print_no_such_file_or_directory	ruby/command-t/match_window.rb	/^    def print_no_such_file_or_directory$/;"	f	class:CommandT.MatchWindow
print_output	autoload/l9/async.py	/^    def print_output(self, var_key):$/;"	m	class:Asyncer
print_worker_keys	autoload/l9/async.py	/^    def print_worker_keys(self):$/;"	m	class:Asyncer
process	plugin/surround.vim	/^function! s:process(string)$/;"	f
prompt	autoload/session.vim	/^function! s:prompt(msg, var) " {{{2$/;"	f
promptToDelBuffer	plugin/NERD_tree.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
promptToDelBuffer	plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
proper_visual_mode	autoload/textobj/user.vim	/^function! s:proper_visual_mode(lhs)$/;"	f
psdir	ruby/command-t/Makefile	/^psdir = $(docdir)$/;"	m
push_chdir	autoload/rails.vim	/^function! s:push_chdir(...)$/;"	f
put	autoload/l9/async.py	/^    def put(self, executor):$/;"	m	class:Worker
putCursorInTreeWin	plugin/NERD_tree.vim	/^function! s:putCursorInTreeWin()$/;"	f
putCursorOnBookmarkTable	plugin/NERD_tree.vim	/^function! s:putCursorOnBookmarkTable()$/;"	f
pwd	ruby/command-t/vim.rb	/^    def self.pwd$/;"	F	class:CommandT.VIM
rails#STATUSLINE	autoload/rails.vim	/^function! rails#STATUSLINE(...)$/;"	f
rails#app	autoload/rails.vim	/^function! rails#app(...)$/;"	f
rails#buffer	autoload/rails.vim	/^function! rails#buffer(...)$/;"	f
rails#cache_clear	autoload/rails.vim	/^function! rails#cache_clear(...)$/;"	f
rails#camelize	autoload/rails.vim	/^function! rails#camelize(str)$/;"	f
rails#log_syntax	autoload/rails.vim	/^function! rails#log_syntax()$/;"	f
rails#new_app_command	autoload/rails.vim	/^function! rails#new_app_command(bang,...)$/;"	f
rails#pluralize	autoload/rails.vim	/^function! rails#pluralize(word)$/;"	f
rails#singularize	autoload/rails.vim	/^function! rails#singularize(word)$/;"	f
rails#statusline	autoload/rails.vim	/^function! rails#statusline(...)$/;"	f
rails#underscore	autoload/rails.vim	/^function! rails#underscore(str)$/;"	f
railsPluginAbolish	plugin/rails.vim	/^augroup railsPluginAbolish$/;"	a
railsPluginAuto	autoload/rails.vim	/^augroup railsPluginAuto$/;"	a
railsPluginDetect	plugin/rails.vim	/^augroup railsPluginDetect$/;"	a
railsPluginMenu	plugin/rails.vim	/^augroup railsPluginMenu$/;"	a
range_containsp	autoload/textobj/user.vim	/^function! s:range_containsp(range_head, range_tail, target_pos)$/;"	f
range_no_text_without_edgesp	autoload/textobj/user.vim	/^function! s:range_no_text_without_edgesp(range_head, range_tail)$/;"	f
range_select	autoload/textobj/user.vim	/^function! s:range_select(range_head, range_tail)$/;"	f
range_validp	autoload/textobj/user.vim	/^function! s:range_validp(range_head, range_tail)$/;"	f
readable_app	autoload/rails.vim	/^function! s:readable_app() dict abort$/;"	f
readable_calculate_file_type	autoload/rails.vim	/^function! s:readable_calculate_file_type() dict abort$/;"	f
readable_controller_name	autoload/rails.vim	/^function! s:readable_controller_name(...) dict abort$/;"	f
readable_default_rake_task	autoload/rails.vim	/^function! s:readable_default_rake_task(lnum) dict abort$/;"	f
readable_define_pattern	autoload/rails.vim	/^function! s:readable_define_pattern() dict abort$/;"	f
readable_end_of	autoload/rails.vim	/^function! s:readable_end_of(lnum) dict abort$/;"	f
readable_last_format	autoload/rails.vim	/^function! s:readable_last_format(start) dict abort$/;"	f
readable_last_method	autoload/rails.vim	/^function! s:readable_last_method(start) dict abort$/;"	f
readable_last_method_line	autoload/rails.vim	/^function! s:readable_last_method_line(start) dict abort$/;"	f
readable_last_opening_line	autoload/rails.vim	/^function! s:readable_last_opening_line(start,pattern,limit) dict abort$/;"	f
readable_line_count	autoload/rails.vim	/^function! s:readable_line_count() dict abort$/;"	f
readable_model_name	autoload/rails.vim	/^function! s:readable_model_name(...) dict abort$/;"	f
readable_preview_urls	autoload/rails.vim	/^function! s:readable_preview_urls(lnum) dict abort$/;"	f
readable_related	autoload/rails.vim	/^function! s:readable_related(...) dict abort$/;"	f
readable_type_name	autoload/rails.vim	/^function! s:readable_type_name() dict abort$/;"	f
readfile	autoload/rails.vim	/^function! s:readfile(path,...)$/;"	f
record_output	autoload/l9/async.py	/^    def record_output(self, line):$/;"	m	class:Worker
recursive_match	ruby/command-t/match.c	/^double recursive_match(matchinfo_t *m,  \/\/ sharable meta-data$/;"	f
redraw	plugin/surround.vim	/^function! s:redraw()$/;"	f
redraw	ruby/command-t/prompt.rb	/^    def redraw$/;"	f	class:CommandT.Prompt
refreshCurrent	plugin/NERD_tree.vim	/^function! s:refreshCurrent()$/;"	f
refreshRoot	plugin/NERD_tree.vim	/^function! s:refreshRoot()$/;"	f
registerCoverage	autoload/fuf/coveragefile.vim	/^function s:registerCoverage()$/;"	f
register_for_key_presses	ruby/command-t/controller.rb	/^    def register_for_key_presses$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
reindent	plugin/surround.vim	/^function! s:reindent() " {{{1$/;"	f
relative_path_under_working_directory	ruby/command-t/controller.rb	/^    def relative_path_under_working_directory path$/;"	f	class:CommandT.Controller
relglob	autoload/rails.vim	/^function! s:relglob(...)$/;"	f
removeItemFromCache	autoload/fuf/mrufile.vim	/^function s:removeItemFromCache(word)$/;"	f
renderBookmarks	plugin/NERD_tree.vim	/^function! s:renderBookmarks()$/;"	f
renderView	plugin/NERD_tree.vim	/^function! s:renderView()$/;"	f
renderViewSavingPosition	plugin/NERD_tree.vim	/^function! s:renderViewSavingPosition()$/;"	f
renewCachesOfAllModes	plugin/fuf.vim	/^function s:renewCachesOfAllModes()$/;"	f
repeat	autoload/repeat.vim	/^function! s:repeat(count)$/;"	f
repeat	plugin/surround.vim	/^function! s:repeat(str,count)$/;"	f
repeat#set	autoload/repeat.vim	/^function! repeat#set(sequence,...)$/;"	f
repeatPlugin	autoload/repeat.vim	/^augroup repeatPlugin$/;"	a
resetomnicomplete	autoload/rails.vim	/^function! s:resetomnicomplete()$/;"	f
restore	ruby/command-t/settings.rb	/^    def restore$/;"	f	class:CommandT.Settings
restoreScreenState	plugin/NERD_tree.vim	/^function! s:restoreScreenState()$/;"	f
restore_window_dimensions	ruby/command-t/match_window.rb	/^    def restore_window_dimensions$/;"	f	class:CommandT.MatchWindow
retval	plugin/project.vim	/^        let retval=b:fnamelist$/;"	v
revealBookmark	plugin/NERD_tree.vim	/^function! s:revealBookmark(name)$/;"	f
rhs_escape	autoload/textobj/user.vim	/^function! s:rhs_escape(pattern)$/;"	f
rquote	autoload/rails.vim	/^function! s:rquote(str)$/;"	f
ruby	ruby/command-t/Makefile	/^ruby = \/home\/onno\/.rvm\/rubies\/ruby-1.8.7-p302\/bin\/ruby$/;"	m
ruby_inspect	ruby/command-t/ext.h	36;"	d
ruby_version	ruby/command-t/Makefile	/^ruby_version = 1.8$/;"	m
rubylibdir	ruby/command-t/Makefile	/^rubylibdir = $(libdir)\/ruby\/$(ruby_version)$/;"	m
run	autoload/l9/async.py	/^    def run(self):$/;"	m	class:Worker
s	plugin/surround.vim	/^      vmap  s    <Plug>Vsurround$/;"	m
s:ABBR_SNIP_MASK	autoload/fuf.vim	/^let s:ABBR_SNIP_MASK = '...'$/;"	v
s:ASYNC_PY_PATH	autoload/l9/async.vim	/^let s:ASYNC_PY_PATH = fnamemodify(expand('<sfile>:p:h'), ':p') . 'async.py'$/;"	v
s:Bookmark	plugin/NERD_tree.vim	/^let s:Bookmark = {}$/;"	v
s:CommandChoice	plugin/EasyGrep.vim	/^let s:CommandChoice = g:EasyGrepCommand < len(s:Commands) ? g:EasyGrepCommand : 0$/;"	v
s:Commands	plugin/EasyGrep.vim	/^let s:Commands = [ "vimgrep", "grep" ]$/;"	v
s:CurrentFileCurrentDirChecked	plugin/EasyGrep.vim	/^let s:CurrentFileCurrentDirChecked = 0$/;"	v
s:DATA_FILE_VERSION	autoload/fuf.vim	/^let s:DATA_FILE_VERSION = 400$/;"	v
s:ERROR	autoload/vimball.vim	/^ let s:ERROR   = 2$/;"	v
s:FUF_BUF_NAME	autoload/fuf.vim	/^let s:FUF_BUF_NAME = '[fuf]'$/;"	v
s:FilesToGrep	plugin/EasyGrep.vim	/^let s:FilesToGrep="*"$/;"	v
s:HexColored	plugin/hexHighlight.vim	/^let s:HexColored = 0$/;"	v
s:HexColors	plugin/hexHighlight.vim	/^let s:HexColors = []$/;"	v
s:KeyMap	plugin/NERD_tree.vim	/^let s:KeyMap = {}$/;"	v
s:L9_VERSION_COMPATIBLE	autoload/l9.vim	/^let s:L9_VERSION_COMPATIBLE =   0$/;"	v
s:L9_VERSION_CURRENT	autoload/l9.vim	/^let s:L9_VERSION_CURRENT    = 100$/;"	v
s:MODE_NAME	autoload/fuf/bookmarkdir.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/bookmarkfile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/buffer.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/callbackfile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/callbackitem.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/changelist.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/coveragefile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/dir.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/file.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/givencmd.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/givendir.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/givenfile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/help.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/jumplist.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/line.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/mrucmd.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/mrufile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/quickfix.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/tag.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/taggedfile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MenuController	plugin/NERD_tree.vim	/^let s:MenuController = {}$/;"	v
s:MenuItem	plugin/NERD_tree.vim	/^let s:MenuItem = {}$/;"	v
s:NERDTreeBufName	plugin/NERD_tree.vim	/^let s:NERDTreeBufName = 'NERD_tree_'$/;"	v
s:NERDTreeSortStarIndex	plugin/NERD_tree.vim	/^let s:NERDTreeSortStarIndex = index(g:NERDTreeSortOrder, '*')$/;"	v
s:NERD_tree_version	plugin/NERD_tree.vim	/^let s:NERD_tree_version = '4.1.0'$/;"	v
s:NumReplaceModeOptions	plugin/EasyGrep.vim	/^let s:NumReplaceModeOptions = 3$/;"	v
s:OPEN_TYPE_CURRENT	autoload/fuf.vim	/^let s:OPEN_TYPE_CURRENT = 1$/;"	v
s:OPEN_TYPE_DELETE	autoload/fuf/bookmarkdir.vim	/^let s:OPEN_TYPE_DELETE = -1$/;"	v
s:OPEN_TYPE_DELETE	autoload/fuf/bookmarkfile.vim	/^let s:OPEN_TYPE_DELETE = -1$/;"	v
s:OPEN_TYPE_DELETE	autoload/fuf/buffer.vim	/^let s:OPEN_TYPE_DELETE = -1$/;"	v
s:OPEN_TYPE_DELETE	autoload/fuf/line.vim	/^let s:OPEN_TYPE_DELETE = -1$/;"	v
s:OPEN_TYPE_EXPAND	autoload/fuf/mrufile.vim	/^let s:OPEN_TYPE_EXPAND = -1$/;"	v
s:OPEN_TYPE_SPLIT	autoload/fuf.vim	/^let s:OPEN_TYPE_SPLIT   = 2$/;"	v
s:OPEN_TYPE_TAB	autoload/fuf.vim	/^let s:OPEN_TYPE_TAB     = 4$/;"	v
s:OPEN_TYPE_VSPLIT	autoload/fuf.vim	/^let s:OPEN_TYPE_VSPLIT  = 3$/;"	v
s:OptionsExplorerOpen	plugin/EasyGrep.vim	/^let s:OptionsExplorerOpen = 0$/;"	v
s:Path	plugin/NERD_tree.vim	/^let s:Path = {}$/;"	v
s:SortChoice	plugin/EasyGrep.vim	/^let s:SortChoice = 0$/;"	v
s:SortFunctions	plugin/EasyGrep.vim	/^let s:SortFunctions = [ "SortName", "SortNameReversed", "SortExtension", "SortExtensionReversed" ]$/;"	v
s:SortOptions	plugin/EasyGrep.vim	/^let s:SortOptions = [ "Name", "Name Reversed", "Extension", "Extension Reversed" ]$/;"	v
s:TEMP_VARIABLES_GROUP	autoload/fuf.vim	/^let s:TEMP_VARIABLES_GROUP = "FuzzyFinder"$/;"	v
s:TrackedExt	plugin/EasyGrep.vim	/^let s:TrackedExt = "*"$/;"	v
s:TreeDirNode	plugin/NERD_tree.vim	/^let s:TreeDirNode = copy(s:TreeFileNode)$/;"	v
s:TreeFileNode	plugin/NERD_tree.vim	/^let s:TreeFileNode = {}$/;"	v
s:USAGE	autoload/vimball.vim	/^ let s:USAGE   = 0$/;"	v
s:VERSION_FACTOR	autoload/l9.vim	/^let s:VERSION_FACTOR = str2float('0.01')$/;"	v
s:WARNING	autoload/vimball.vim	/^ let s:WARNING = 1$/;"	v
s:all_marks	plugin/showmarks.vim	/^let s:all_marks = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.'`^<>[]{}()\\""$/;"	v
s:app_prototype	autoload/rails.vim	/^let s:app_prototype = {}$/;"	v
s:app_prototype	autoload/rails.vim	/^let s:app_prototype.cache = s:cache_prototype$/;"	v
s:apps	autoload/rails.vim	/^  let s:apps = {}$/;"	v
s:b	colors/solarized.vim	/^    let s:b             = ""$/;"	v
s:b	colors/solarized.vim	/^    let s:b             = ",bold"$/;"	v
s:block_openers	plugin/textobj/rubyblock.vim	/^let s:block_openers = '\\zs(<def>|<if>|<do>|<module>|<class>)'$/;"	v
s:bufTimes	autoload/fuf/buffer.vim	/^let s:bufTimes = {}$/;"	v
s:bufferCursorPosMap	autoload/fuf.vim	/^let s:bufferCursorPosMap = {}$/;"	v
s:buffer_prototype	autoload/rails.vim	/^let s:buffer_prototype = {}$/;"	v
s:c	colors/solarized.vim	/^let s:c                 = ",undercurl"$/;"	v
s:c_back	colors/solarized.vim	/^    let s:c_back        = "234"$/;"	v
s:c_back	colors/solarized.vim	/^    let s:c_back        = "NONE"   $/;"	v
s:c_back	colors/solarized.vim	/^    let s:c_back        = "NONE"$/;"	v
s:c_back	colors/solarized.vim	/^    let s:c_back        = s:c_base03$/;"	v
s:c_base0	colors/solarized.vim	/^    let s:c_base0       = "12"$/;"	v
s:c_base0	colors/solarized.vim	/^    let s:c_base0       = "244"$/;"	v
s:c_base0	colors/solarized.vim	/^    let s:c_base0       = "6"$/;"	v
s:c_base0	colors/solarized.vim	/^    let s:c_base0       = s:c_temp00$/;"	v
s:c_base00	colors/solarized.vim	/^    let s:c_base00      = "11"$/;"	v
s:c_base00	colors/solarized.vim	/^    let s:c_base00      = "240"$/;"	v
s:c_base00	colors/solarized.vim	/^    let s:c_base00      = "darkgrey"$/;"	v
s:c_base00	colors/solarized.vim	/^    let s:c_base00      = s:c_base0$/;"	v
s:c_base01	colors/solarized.vim	/^    let s:c_base01      = "10"$/;"	v
s:c_base01	colors/solarized.vim	/^    let s:c_base01      = "239"$/;"	v
s:c_base01	colors/solarized.vim	/^    let s:c_base01      = "grey"$/;"	v
s:c_base01	colors/solarized.vim	/^    let s:c_base01      = s:c_base1$/;"	v
s:c_base02	colors/solarized.vim	/^    let s:c_base02      = "0"$/;"	v
s:c_base02	colors/solarized.vim	/^    let s:c_base02      = "235"$/;"	v
s:c_base02	colors/solarized.vim	/^    let s:c_base02      = "darkgrey"$/;"	v
s:c_base02	colors/solarized.vim	/^    let s:c_base02      = s:c_base2$/;"	v
s:c_base02	colors/solarized.vim	/^    let s:c_base02      = s:c_temp03$/;"	v
s:c_base03	colors/solarized.vim	/^    let s:c_base03      = "234"$/;"	v
s:c_base03	colors/solarized.vim	/^    let s:c_base03      = "4"$/;"	v
s:c_base03	colors/solarized.vim	/^    let s:c_base03      = "8"$/;"	v
s:c_base03	colors/solarized.vim	/^    let s:c_base03      = s:c_base3$/;"	v
s:c_base03	colors/solarized.vim	/^    let s:c_base03      = s:c_temp02$/;"	v
s:c_base1	colors/solarized.vim	/^    let s:c_base1       = "14"$/;"	v
s:c_base1	colors/solarized.vim	/^    let s:c_base1       = "245"$/;"	v
s:c_base1	colors/solarized.vim	/^    let s:c_base1       = "4"$/;"	v
s:c_base1	colors/solarized.vim	/^    let s:c_base1       = s:c_temp01$/;"	v
s:c_base2	colors/solarized.vim	/^    let s:c_base2       = "187"$/;"	v
s:c_base2	colors/solarized.vim	/^    let s:c_base2       = "7"$/;"	v
s:c_base2	colors/solarized.vim	/^    let s:c_base2       = s:c_temp02$/;"	v
s:c_base3	colors/solarized.vim	/^    let s:c_base3       = "15"$/;"	v
s:c_base3	colors/solarized.vim	/^    let s:c_base3       = "230"$/;"	v
s:c_base3	colors/solarized.vim	/^    let s:c_base3       = "7"$/;"	v
s:c_base3	colors/solarized.vim	/^    let s:c_base3       = s:c_temp03$/;"	v
s:c_blue	colors/solarized.vim	/^    let s:c_blue        = "33"$/;"	v
s:c_blue	colors/solarized.vim	/^    let s:c_blue        = "4"$/;"	v
s:c_cyan	colors/solarized.vim	/^    let s:c_cyan        = "37"$/;"	v
s:c_cyan	colors/solarized.vim	/^    let s:c_cyan        = "6"$/;"	v
s:c_green	colors/solarized.vim	/^    let s:c_green       = "2"$/;"	v
s:c_green	colors/solarized.vim	/^    let s:c_green       = "64"$/;"	v
s:c_magenta	colors/solarized.vim	/^    let s:c_magenta     = "125"$/;"	v
s:c_magenta	colors/solarized.vim	/^    let s:c_magenta     = "5"$/;"	v
s:c_none	colors/solarized.vim	/^let s:c_none            = "NONE"$/;"	v
s:c_orange	colors/solarized.vim	/^    let s:c_orange      = "166"$/;"	v
s:c_orange	colors/solarized.vim	/^    let s:c_orange      = "3"$/;"	v
s:c_orange	colors/solarized.vim	/^    let s:c_orange      = "9"$/;"	v
s:c_red	colors/solarized.vim	/^    let s:c_red         = "1"$/;"	v
s:c_red	colors/solarized.vim	/^    let s:c_red         = "124"$/;"	v
s:c_temp00	colors/solarized.vim	/^    let s:c_temp00      = s:c_base00$/;"	v
s:c_temp01	colors/solarized.vim	/^    let s:c_temp01      = s:c_base01$/;"	v
s:c_temp02	colors/solarized.vim	/^    let s:c_temp02      = s:c_base02$/;"	v
s:c_temp03	colors/solarized.vim	/^    let s:c_temp03      = s:c_base03$/;"	v
s:c_violet	colors/solarized.vim	/^    let s:c_violet      = "13"$/;"	v
s:c_violet	colors/solarized.vim	/^    let s:c_violet      = "5"$/;"	v
s:c_violet	colors/solarized.vim	/^    let s:c_violet      = "61"$/;"	v
s:c_yellow	colors/solarized.vim	/^    let s:c_yellow      = "136"$/;"	v
s:c_yellow	colors/solarized.vim	/^    let s:c_yellow      = "3"$/;"	v
s:cache_prototype	autoload/rails.vim	/^let s:cache_prototype = {'dict': {}}$/;"	v
s:clickmap	plugin/minibufexpl.vim	/^  let s:clickmap = ':if bufname("%") == "-MiniBufExplorer-" <bar> call <SID>MBEClick() <bar> endif <CR>'$/;"	v
s:comment_escape	plugin/textobj/rubyblock.vim	/^let s:comment_escape = '\\v^[^#]*'$/;"	v
s:cpo_save	autoload/rails.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/php_doc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugin/surround.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugin/unimpaired.vim	/^let s:cpo_save = &cpo$/;"	v
s:dataMap	autoload/l9/tempbuffer.vim	/^let s:dataMap = {}$/;"	v
s:debugIndex	plugin/minibufexpl.vim	/^let s:debugIndex = 0 $/;"	v
s:did_snip_helper	ftplugin/html_snip_helper.vim	/^let s:did_snip_helper = 1$/;"	v
s:did_snips_mappings	after/plugin/snipMate.vim	/^let s:did_snips_mappings = 1$/;"	v
s:directory	plugin/session.vim	/^let s:directory = fnamemodify(g:session_directory, ':p')$/;"	v
s:efm_backtrace	autoload/rails.vim	/^let s:efm_backtrace='%D(in\\ %f),'$/;"	v
s:end_pattern	plugin/textobj/rubyblock.vim	/^let s:end_pattern = s:comment_escape . '\\zs<end>'$/;"	v
s:escape_chars	plugin/NERD_tree.vim	/^    let s:escape_chars =  " \\\\`\\|\\"#%&,?()\\*^<>"$/;"	v
s:escape_chars	plugin/NERD_tree.vim	/^    let s:escape_chars =  " `\\|\\"#%&,?()\\*^<>"$/;"	v
s:fg_pdef	colors/solarized.vim	/^let s:fg_pdef = s:fg_violet$/;"	v
s:fg_phead	colors/solarized.vim	/^let s:fg_phead = s:fg_orange$/;"	v
s:fg_ptable	colors/solarized.vim	/^let s:fg_ptable = s:fg_blue$/;"	v
s:file	autoload/rails.vim	/^let s:file = expand('<sfile>:p')$/;"	v
s:file_prototype	autoload/rails.vim	/^let s:file_prototype = {}$/;"	v
s:first_sign_id	plugin/syntastic.vim	/^let s:first_sign_id = 5000$/;"	v
s:g_back	colors/solarized.vim	/^    let s:g_back        = "#002b36"$/;"	v
s:g_back	colors/solarized.vim	/^    let s:g_back        = "#1c1c1c"$/;"	v
s:g_back	colors/solarized.vim	/^    let s:g_back        = s:g_back$/;"	v
s:g_back	colors/solarized.vim	/^    let s:g_back        = s:g_base02$/;"	v
s:g_back	colors/solarized.vim	/^    let s:g_back        = s:g_base03$/;"	v
s:g_base0	colors/solarized.vim	/^    let s:g_base0       = "#808080"$/;"	v
s:g_base0	colors/solarized.vim	/^    let s:g_base0       = "#839496"$/;"	v
s:g_base0	colors/solarized.vim	/^    let s:g_base0       = s:g_base1$/;"	v
s:g_base0	colors/solarized.vim	/^    let s:g_base0       = s:g_temp00$/;"	v
s:g_base00	colors/solarized.vim	/^    let s:g_base00      = "#585858"$/;"	v
s:g_base00	colors/solarized.vim	/^    let s:g_base00      = "#657b83"$/;"	v
s:g_base00	colors/solarized.vim	/^    let s:g_base00      = s:g_base0$/;"	v
s:g_base01	colors/solarized.vim	/^    let s:g_base01      = "#4e4e4e"$/;"	v
s:g_base01	colors/solarized.vim	/^    let s:g_base01      = "#586e75"$/;"	v
s:g_base01	colors/solarized.vim	/^    let s:g_base01      = s:g_base00$/;"	v
s:g_base01	colors/solarized.vim	/^    let s:g_base01      = s:g_base1$/;"	v
s:g_base02	colors/solarized.vim	/^    let s:g_base02      = "#073642"$/;"	v
s:g_base02	colors/solarized.vim	/^    let s:g_base02      = "#262626"$/;"	v
s:g_base02	colors/solarized.vim	/^    let s:g_base02      = s:g_base02$/;"	v
s:g_base02	colors/solarized.vim	/^    let s:g_base02      = s:g_base2$/;"	v
s:g_base02	colors/solarized.vim	/^    let s:g_base02      = s:g_temp03$/;"	v
s:g_base03	colors/solarized.vim	/^    let s:g_base03      = "#002b36"$/;"	v
s:g_base03	colors/solarized.vim	/^    let s:g_base03      = "#1c1c1c"$/;"	v
s:g_base03	colors/solarized.vim	/^    let s:g_base03      = s:g_base03$/;"	v
s:g_base03	colors/solarized.vim	/^    let s:g_base03      = s:g_base3$/;"	v
s:g_base03	colors/solarized.vim	/^    let s:g_base03      = s:g_temp02$/;"	v
s:g_base1	colors/solarized.vim	/^    let s:g_base1       = "#8a8a8a"$/;"	v
s:g_base1	colors/solarized.vim	/^    let s:g_base1       = "#93a1a1"$/;"	v
s:g_base1	colors/solarized.vim	/^    let s:g_base1       = s:g_base2$/;"	v
s:g_base1	colors/solarized.vim	/^    let s:g_base1       = s:g_temp01$/;"	v
s:g_base2	colors/solarized.vim	/^    let s:g_base2       = "#d7d7af"$/;"	v
s:g_base2	colors/solarized.vim	/^    let s:g_base2       = "#eee8d5"$/;"	v
s:g_base2	colors/solarized.vim	/^    let s:g_base2       = s:g_base3$/;"	v
s:g_base2	colors/solarized.vim	/^    let s:g_base2       = s:g_temp02$/;"	v
s:g_base3	colors/solarized.vim	/^    let s:g_base3       = "#fdf6e3"$/;"	v
s:g_base3	colors/solarized.vim	/^    let s:g_base3       = "#ffffd7"$/;"	v
s:g_base3	colors/solarized.vim	/^    let s:g_base3       = s:g_base3$/;"	v
s:g_base3	colors/solarized.vim	/^    let s:g_base3       = s:g_temp03$/;"	v
s:g_blue	colors/solarized.vim	/^    let s:g_blue        = "#0087ff"$/;"	v
s:g_blue	colors/solarized.vim	/^    let s:g_blue        = "#268bd2"$/;"	v
s:g_cyan	colors/solarized.vim	/^    let s:g_cyan        = "#00afaf"$/;"	v
s:g_cyan	colors/solarized.vim	/^    let s:g_cyan        = "#2aa198"$/;"	v
s:g_green	colors/solarized.vim	/^    let s:g_green       = "#5f8700"$/;"	v
s:g_green	colors/solarized.vim	/^    let s:g_green       = "#859900"$/;"	v
s:g_magenta	colors/solarized.vim	/^    let s:g_magenta     = "#af005f"$/;"	v
s:g_magenta	colors/solarized.vim	/^    let s:g_magenta     = "#d33682"$/;"	v
s:g_none	colors/solarized.vim	/^let s:g_none            = "NONE"$/;"	v
s:g_orange	colors/solarized.vim	/^    let s:g_orange      = "#cb4b16"$/;"	v
s:g_orange	colors/solarized.vim	/^    let s:g_orange      = "#d75f00"$/;"	v
s:g_red	colors/solarized.vim	/^    let s:g_red         = "#af0000"$/;"	v
s:g_red	colors/solarized.vim	/^    let s:g_red         = "#dc322f"$/;"	v
s:g_temp00	colors/solarized.vim	/^    let s:g_temp00      = s:g_base00$/;"	v
s:g_temp01	colors/solarized.vim	/^    let s:g_temp01      = s:g_base01$/;"	v
s:g_temp02	colors/solarized.vim	/^    let s:g_temp02      = s:g_base02$/;"	v
s:g_temp03	colors/solarized.vim	/^    let s:g_temp03      = s:g_base03$/;"	v
s:g_violet	colors/solarized.vim	/^    let s:g_violet      = "#5f5faf"$/;"	v
s:g_violet	colors/solarized.vim	/^    let s:g_violet      = "#6c71c4"$/;"	v
s:g_yellow	colors/solarized.vim	/^    let s:g_yellow      = "#af8700"$/;"	v
s:g_yellow	colors/solarized.vim	/^    let s:g_yellow      = "#b58900"$/;"	v
s:handler	autoload/fuf/bookmarkdir.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/bookmarkfile.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/buffer.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/callbackfile.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/callbackitem.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/changelist.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/coveragefile.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/dir.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/file.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/givencmd.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/givendir.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/givenfile.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/help.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/jumplist.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/line.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/mrucmd.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/mrufile.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/quickfix.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/tag.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/taggedfile.vim	/^let s:handler = {}$/;"	v
s:handlerBase	autoload/fuf.vim	/^let s:handlerBase = {}$/;"	v
s:has_reltime	autoload/xolox/timer.vim	/^let s:has_reltime = has('reltime')$/;"	v
s:i	colors/solarized.vim	/^    let s:i             = ""$/;"	v
s:i	colors/solarized.vim	/^    let s:i             = ",italic"$/;"	v
s:keepcpo	autoload/vimball.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugin/vimballPlugin.vim	/^let s:keepcpo              = &cpo$/;"	v
s:l	sessions/default.vim	/^let s:l = 281 - ((24 * winheight(0) + 21) \/ 43)$/;"	v
s:last_mps	plugin/matchit.vim	/^let s:last_mps = ""$/;"	v
s:last_words	plugin/matchit.vim	/^let s:last_words = ":"$/;"	v
s:lock_files	autoload/session.vim	/^  let s:lock_files = []$/;"	v
s:m	plugin/minibufexpl.vim	/^    let  s:m = ':nnoremap <silent> <LEFTMOUSE> <LEFTMOUSE>'$/;"	v
s:m	plugin/minibufexpl.vim	/^    let  s:m = s:m . s:clickmap$/;"	v
s:m	plugin/minibufexpl.vim	/^    let  s:m = s:m . substitute(substitute(maparg('<LEFTMOUSE>', 'n'), '|', '<bar>', 'g'), '\\c^<LEFTMOUSE>', '', '')$/;"	v
s:maxTabWidth	plugin/minibufexpl.vim	/^let s:maxTabWidth = 0 $/;"	v
s:modeNames	autoload/fuf.vim	/^let s:modeNames = []$/;"	v
s:msg	plugin/session.vim	/^  let s:msg = "session.vim: The sessions directory %s isn't writable!"$/;"	v
s:n	colors/solarized.vim	/^let s:n                 = "NONE"$/;"	v
s:next_buffer_number	plugin/NERD_tree.vim	/^let s:next_buffer_number = 1$/;"	v
s:next_sign_id	plugin/syntastic.vim	/^let s:next_sign_id = s:first_sign_id$/;"	v
s:notslash	plugin/matchit.vim	/^let s:notslash = '\\\\\\@<!\\%(\\\\\\\\\\)*'$/;"	v
s:ob	colors/solarized.vim	/^    let s:ob            = ""$/;"	v
s:ob	colors/solarized.vim	/^    let s:ob            = ",bold"$/;"	v
s:old_cpo	plugin/NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:oneTimeVariables	autoload/fuf.vim	/^let s:oneTimeVariables = []$/;"	v
s:ou	colors/solarized.vim	/^    let s:ou            = ""$/;"	v
s:ou	colors/solarized.vim	/^    let s:ou            = ",underline"$/;"	v
s:plugin	autoload/textobj/user.vim	/^let s:plugin = {}$/;"	v
s:r	colors/solarized.vim	/^let s:r                 = ",reverse"$/;"	v
s:readable_prototype	autoload/rails.vim	/^let s:readable_prototype = {}$/;"	v
s:running_windows	plugin/NERD_tree.vim	/^let s:running_windows = has("win16") || has("win32") || has("win64")$/;"	v
s:running_windows	plugin/syntastic.vim	/^let s:running_windows = has("win16") || has("win32") || has("win64")$/;"	v
s:s	colors/solarized.vim	/^let s:s                 = ",standout"$/;"	v
s:save_cpo	plugin/SimpleFold.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugin/matchit.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	syntax_checkers/c.vim	/^let s:save_cpo = &cpo$/;"	v
s:script	autoload/session.vim	/^let s:script = expand('<sfile>:p:~')$/;"	v
s:sid	autoload/rails.vim	/^let s:sid = s:sub(maparg("<SID>xx"),'xx$','')$/;"	v
s:sid	plugin/SimpleFold.vim	/^let s:sid = maparg("<SID>xx")$/;"	v
s:sid	plugin/SimpleFold.vim	/^let s:sid = substitute(s:sid, 'xx', '', '')$/;"	v
s:skip_pattern	plugin/textobj/rubyblock.vim	/^let s:skip_pattern = 'getline(".") =~ "\\\\w\\\\s\\\\+if"'$/;"	v
s:snippets	plugin/snipMate.vim	/^let s:snippets = {} | let s:multi_snips = {}$/;"	v
s:so_save	sessions/default.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:start_pattern	plugin/textobj/rubyblock.vim	/^let s:start_pattern = s:comment_escape . s:block_openers$/;"	v
s:sx	sessions/default.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:t_none	colors/solarized.vim	/^let s:t_none            = "NONE"$/;"	v
s:timerData	plugin/l9.vim	/^  let s:timerData = []$/;"	v
s:timerTagMaxLen	plugin/l9.vim	/^  let s:timerTagMaxLen = 0$/;"	v
s:tree_markup_reg	plugin/NERD_tree.vim	/^let s:tree_markup_reg = '^[ `|]*[\\-+~]'$/;"	v
s:tree_up_dir_line	plugin/NERD_tree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:tree_wid	plugin/NERD_tree.vim	/^let s:tree_wid = 2$/;"	v
s:u	colors/solarized.vim	/^    let s:u             = ""$/;"	v
s:u	colors/solarized.vim	/^    let s:u             = ",underline"$/;"	v
s:units	autoload/xolox/timer.vim	/^let s:units = [['day', 60 * 60 * 24], ['hour', 60 * 60], ['minute', 60], ['second', 1]]$/;"	v
s:varsMap	autoload/l9/tempvariables.vim	/^let s:varsMap = {}$/;"	v
s:view_types	autoload/rails.vim	/^let s:view_types = 'rhtml,erb,rxml,builder,rjs,mab,liquid,haml,dryml,mn'$/;"	v
s:windows_compatible	autoload/xolox/path.vim	/^let s:windows_compatible = has('win32') || has('win64')$/;"	v
s:wipebuf	sessions/default.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
sanitize_path_string	ruby/command-t/controller.rb	/^    def sanitize_path_string str$/;"	f	class:CommandT.Controller
save	ruby/command-t/settings.rb	/^    def save$/;"	f	class:CommandT.Settings
saveScreenState	plugin/NERD_tree.vim	/^function! s:saveScreenState()$/;"	f
sbindir	ruby/command-t/Makefile	/^sbindir = $(exec_prefix)\/sbin$/;"	m
scanlineforuris	autoload/rails.vim	/^function! s:scanlineforuris(line)$/;"	f
scoreBoundaryMatching	autoload/fuf.vim	/^function s:scoreBoundaryMatching(wordForBoundary, pattern, exprBoundary)$/;"	f
scoreSequentialMatching	autoload/fuf.vim	/^function s:scoreSequentialMatching(word, pattern)$/;"	f
scrub	autoload/rails.vim	/^function! s:scrub(collection,item)$/;"	f
search_boundary	plugin/SimpleFold.vim	/^function! s:search_boundary(fold_start_re, combined_re, use_combined, flags)$/;"	f
select	ruby/command-t/vim/window.rb	/^      def self.select window$/;"	F	class:CommandT.VIM.Window
select_a	plugin/textobj/rubyblock.vim	/^function! s:select_a()$/;"	f
select_function_wrapper	autoload/textobj/user.vim	/^function! s:select_function_wrapper(function_name, previous_mode)$/;"	f
select_i	plugin/textobj/rubyblock.vim	/^function! s:select_i()$/;"	f
select_name	autoload/session.vim	/^function! s:select_name(name, action) " {{{2$/;"	f
select_next	ruby/command-t/controller.rb	/^    def select_next$/;"	f	class:CommandT.Controller
select_next	ruby/command-t/match_window.rb	/^    def select_next$/;"	f	class:CommandT.MatchWindow
select_prev	ruby/command-t/controller.rb	/^    def select_prev$/;"	f	class:CommandT.Controller
select_prev	ruby/command-t/match_window.rb	/^    def select_prev$/;"	f	class:CommandT.MatchWindow
selection	ruby/command-t/match_window.rb	/^    def selection$/;"	f	class:CommandT.MatchWindow
selectiveexpand	autoload/rails.vim	/^function! s:selectiveexpand(pat,good,default,...)$/;"	f
session#auto_dirty_check	autoload/session.vim	/^function! session#auto_dirty_check() " {{{2$/;"	f
session#auto_load	autoload/session.vim	/^function! session#auto_load() " {{{2$/;"	f
session#auto_save	autoload/session.vim	/^function! session#auto_save() " {{{2$/;"	f
session#auto_unlock	autoload/session.vim	/^function! session#auto_unlock() " {{{2$/;"	f
session#close_cmd	autoload/session.vim	/^function! session#close_cmd(bang, silent) abort " {{{2$/;"	f
session#complete_names	autoload/session.vim	/^function! session#complete_names(arg, line, pos) " {{{2$/;"	f
session#delete_cmd	autoload/session.vim	/^function! session#delete_cmd(name, bang) " {{{2$/;"	f
session#get_names	autoload/session.vim	/^function! session#get_names() " {{{2$/;"	f
session#name_to_path	autoload/session.vim	/^function! session#name_to_path(name) " {{{2$/;"	f
session#open_cmd	autoload/session.vim	/^function! session#open_cmd(name, bang) abort " {{{2$/;"	f
session#path_to_name	autoload/session.vim	/^function! session#path_to_name(path) " {{{2$/;"	f
session#restart_cmd	autoload/session.vim	/^function! session#restart_cmd(bang, args) abort " {{{2$/;"	f
session#save_cmd	autoload/session.vim	/^function! session#save_cmd(name, bang) abort " {{{2$/;"	f
session#save_colors	autoload/session.vim	/^function! session#save_colors(commands) " {{{2$/;"	f
session#save_features	autoload/session.vim	/^function! session#save_features(commands) " {{{2$/;"	f
session#save_fullscreen	autoload/session.vim	/^function! session#save_fullscreen(commands) " {{{2$/;"	f
session#save_qflist	autoload/session.vim	/^function! session#save_qflist(commands) " {{{2$/;"	f
session#save_session	autoload/session.vim	/^function! session#save_session(commands, filename) " {{{2$/;"	f
session#save_special_windows	autoload/session.vim	/^function! session#save_special_windows(session)$/;"	f
session#save_state	autoload/session.vim	/^function! session#save_state(commands) " {{{2$/;"	f
session#view_cmd	autoload/session.vim	/^function! session#view_cmd(name) abort " {{{2$/;"	f
session_is_locked	autoload/session.vim	/^function! s:session_is_locked(session_path, ...)$/;"	f
setAbbrWithFileAbbrData	autoload/fuf.vim	/^function s:setAbbrWithFileAbbrData(item, snippedHeads)$/;"	f
setRanks	autoload/fuf.vim	/^function s:setRanks(item, pattern, exprBoundary, stats)$/;"	f
set_bool	ruby/command-t/settings.rb	/^    def set_bool setting, value$/;"	f	class:CommandT.Settings
set_number	ruby/command-t/settings.rb	/^    def set_number setting, value$/;"	f	class:CommandT.Settings
set_status	ruby/command-t/prompt.rb	/^    def set_status *args$/;"	f	class:CommandT.Prompt
set_up_finder	ruby/command-t/controller.rb	/^    def set_up_finder$/;"	f	class:CommandT.Controller
set_up_max_height	ruby/command-t/controller.rb	/^    def set_up_max_height$/;"	f	class:CommandT.Controller
setopt	autoload/rails.vim	/^function! s:setopt(opt,val)$/;"	f
setupStatusline	plugin/NERD_tree.vim	/^function! s:setupStatusline()$/;"	f
setupSyntaxHighlighting	plugin/NERD_tree.vim	/^function! s:setupSyntaxHighlighting()$/;"	f
sharedstatedir	ruby/command-t/Makefile	/^sharedstatedir = $(prefix)\/com$/;"	m
show	ruby/command-t/controller.rb	/^    def show$/;"	f	class:CommandT.Controller
show	ruby/command-t/stub.rb	/^    def show$/;"	f	class:CommandT.Stub
showMenu	plugin/NERD_tree.vim	/^function! s:showMenu()$/;"	f
show_cursor	ruby/command-t/match_window.rb	/^    def show_cursor$/;"	f	class:CommandT.MatchWindow
sitearch	ruby/command-t/Makefile	/^sitearch = x86_64-linux$/;"	m
sitearchdir	ruby/command-t/Makefile	/^sitearchdir = $(sitelibdir)\/$(sitearch)$/;"	m
sitedir	ruby/command-t/Makefile	/^sitedir = $(libdir)\/ruby\/site_ruby$/;"	m
sitelibdir	ruby/command-t/Makefile	/^sitelibdir = $(sitedir)\/$(ruby_version)$/;"	m
sname	autoload/rails.vim	/^function! s:sname()$/;"	f
snipMate#expandSnip	autoload/snipMate.vim	/^fun snipMate#expandSnip(snip, col)$/;"	f
snipMate#jumpTabStop	autoload/snipMate.vim	/^fun snipMate#jumpTabStop(backwards)$/;"	f
snippets_dir	plugin/snipMate.vim	/^	let snippets_dir = substitute(globpath(&rtp, 'snippets\/'), "\\n", ',', 'g')$/;"	v
snr_prefix	autoload/textobj/user.vim	/^function! s:snr_prefix(sfile)$/;"	f
sorted_matches_for	ruby/command-t/finder.rb	/^    def sorted_matches_for str, options = {}$/;"	f	class:CommandT.Finder
specEdit	autoload/rails.vim	/^function! s:specEdit(cmd,...)$/;"	f
specList	autoload/rails.vim	/^function! s:specList(A,L,P)$/;"	f
srcdir	ruby/command-t/Makefile	/^srcdir = .$/;"	m
start_comment	snippets/support_functions.vim	/^function! s:start_comment()$/;"	f
startswith	autoload/rails.vim	/^function! s:startswith(string,prefix)$/;"	f
str_len	ruby/command-t/match.c	/^    long    str_len;                \/\/ length of same$/;"	m	struct:__anon1	file:
str_p	ruby/command-t/match.c	/^    char    *str_p;                 \/\/ pointer to string to be searched$/;"	m	struct:__anon1	file:
stripMarkupFromLine	plugin/NERD_tree.vim	/^function! s:stripMarkupFromLine(line, removeLeadingSpaces)$/;"	f
stylesheetEdit	autoload/rails.vim	/^function! s:stylesheetEdit(cmd,...)$/;"	f
stylesheetList	autoload/rails.vim	/^function! s:stylesheetList(A,L,P)$/;"	f
sub	autoload/rails.vim	/^function! s:sub(str,pat,rep)$/;"	f
sub	plugin/rails.vim	/^function! s:sub(str,pat,rep)$/;"	f
sysconfdir	ruby/command-t/Makefile	/^sysconfdir = $(prefix)\/etc$/;"	m
tabpagevar	plugin/NERD_tree.vim	/^function! s:tabpagevar(tabnr, var)$/;"	f
target_prefix	ruby/command-t/Makefile	/^target_prefix = $/;"	m
taskEdit	autoload/rails.vim	/^function! s:taskEdit(cmd,...)$/;"	f
taskList	autoload/rails.vim	/^function! s:taskList(A,L,P)$/;"	f
textobj#user#define	autoload/textobj/user.vim	/^function! textobj#user#define(pat0, pat1, pat2, guideline)  "{{{2$/;"	f
textobj#user#move	autoload/textobj/user.vim	/^function! textobj#user#move(pattern, flags, previous_mode)$/;"	f
textobj#user#plugin	autoload/textobj/user.vim	/^function! textobj#user#plugin(plugin_name, obj_specs)  "{{{2$/;"	f
textobj#user#select	autoload/textobj/user.vim	/^function! textobj#user#select(pattern, flags, previous_mode)$/;"	f
textobj#user#select_pair	autoload/textobj/user.vim	/^function! textobj#user#select_pair(pattern1, pattern2, flags, previous_mode)$/;"	f
timerBegin	plugin/l9.vim	/^  function s:timerBegin(tag)$/;"	f
timerDump	plugin/l9.vim	/^  function s:timerDump()$/;"	f
timerStop	plugin/l9.vim	/^  function s:timerStop()$/;"	f
toLowerForIgnoringCase	autoload/fuf.vim	/^function s:toLowerForIgnoringCase(str)$/;"	f
toggle	plugin/NERD_tree.vim	/^function! s:toggle(dir)$/;"	f
toggleIgnoreFilter	plugin/NERD_tree.vim	/^function! s:toggleIgnoreFilter()$/;"	f
toggleShowBookmarks	plugin/NERD_tree.vim	/^function! s:toggleShowBookmarks()$/;"	f
toggleShowFiles	plugin/NERD_tree.vim	/^function! s:toggleShowFiles()$/;"	f
toggleShowHidden	plugin/NERD_tree.vim	/^function! s:toggleShowHidden()$/;"	f
toggleZoom	plugin/NERD_tree.vim	/^function! s:toggleZoom()$/;"	f
toggle_focus	ruby/command-t/controller.rb	/^    def toggle_focus$/;"	f	class:CommandT.Controller
topdir	ruby/command-t/Makefile	/^topdir = \/home\/onno\/.rvm\/rubies\/ruby-1.8.7-p302\/lib\/ruby\/1.8\/x86_64-linux$/;"	m
treeExistsForBuf	plugin/NERD_tree.vim	/^function! s:treeExistsForBuf()$/;"	f
treeExistsForTab	plugin/NERD_tree.vim	/^function! s:treeExistsForTab()$/;"	f
truncated_match	ruby/command-t/match_window.rb	/^    def truncated_match str$/;"	f	class:CommandT.MatchWindow
try	autoload/rails.vim	/^function! s:try(cmd) abort$/;"	f
u	autoload/repeat.vim	/^nnoremap <silent> u     :<C-U>call <SID>wrap('u',v:count)<CR>$/;"	m
unescape	autoload/session.vim	/^function! s:unescape(s) " {{{2$/;"	f
unfocus	ruby/command-t/match_window.rb	/^    def unfocus$/;"	f	class:CommandT.MatchWindow
unfocus	ruby/command-t/prompt.rb	/^    def unfocus$/;"	f	class:CommandT.Prompt
unique	plugin/EasyGrep.vim	/^function! s:unique(lst)$/;"	f
unique	plugin/NERD_tree.vim	/^function! s:unique(list)$/;"	f
unittestEdit	autoload/rails.vim	/^function! s:unittestEdit(cmd,...)$/;"	f
unittestList	autoload/rails.vim	/^function! s:unittestList(A,L,P)$/;"	f
unload	ruby/command-t/controller.rb	/^    def unload$/;"	f	class:CommandT.Controller
unload	ruby/command-t/match_window.rb	/^    def unload$/;"	f	class:CommandT.MatchWindow
unlock	ruby/command-t/match_window.rb	/^    def unlock$/;"	f	class:CommandT.MatchWindow
unlock_session	autoload/session.vim	/^function! s:unlock_session(session_path)$/;"	f
upDir	plugin/NERD_tree.vim	/^function! s:upDir(keepState)$/;"	f
updateBufTimes	autoload/fuf/buffer.vim	/^function s:updateBufTimes()$/;"	f
updateData	autoload/fuf/mrufile.vim	/^function s:updateData()$/;"	f
updateInfo	autoload/fuf/mrucmd.vim	/^function s:updateInfo(cmd)$/;"	f
vendorarchdir	ruby/command-t/Makefile	/^vendorarchdir = $(vendorlibdir)\/$(sitearch)$/;"	m
vendordir	ruby/command-t/Makefile	/^vendordir = $(libdir)\/ruby\/vendor_ruby$/;"	m
vendorlibdir	ruby/command-t/Makefile	/^vendorlibdir = $(vendordir)\/$(ruby_version)$/;"	m
viewEdit	autoload/rails.vim	/^function! s:viewEdit(cmd,...)$/;"	f
viewList	autoload/rails.vim	/^function! s:viewList(A,L,P)$/;"	f
viewspattern	autoload/rails.vim	/^function! s:viewspattern()$/;"	f
vim	ftplugin/php_doc.vim	/^import vim$/;"	m
vimball#Decompress	autoload/vimball.vim	/^fun! vimball#Decompress(fname,...)$/;"	f
vimball#MkVimball	autoload/vimball.vim	/^fun! vimball#MkVimball(line1,line2,writelevel,...) range$/;"	f
vimball#RestoreSettings	autoload/vimball.vim	/^fun! vimball#RestoreSettings()$/;"	f
vimball#RmVimball	autoload/vimball.vim	/^fun! vimball#RmVimball(...)$/;"	f
vimball#SaveSettings	autoload/vimball.vim	/^fun! vimball#SaveSettings()$/;"	f
vimball#ShowMesg	autoload/vimball.vim	/^fun! vimball#ShowMesg(level,msg)$/;"	f
vimball#Vimball	autoload/vimball.vim	/^fun! vimball#Vimball(really,...)$/;"	f
vimball#VimballHome	autoload/vimball.vim	/^fun! vimball#VimballHome()$/;"	f
vt100?	ruby/command-t/controller.rb	/^    def vt100?$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
w	plugin/EasyGrep.vim	/^    let w = g:EasyGrepWindowPosition$/;"	v
warn	autoload/rails.vim	/^function! s:warn(str)$/;"	f
warn	ruby/command-t/stub.rb	/^    def warn *msg$/;"	f	class:CommandT.Stub
webbrowser	ftplugin/php_doc.vim	/^import webbrowser$/;"	m
wise	autoload/textobj/user.vim	/^function! s:wise(default)$/;"	f
wrap	autoload/repeat.vim	/^function! s:wrap(command,count)$/;"	f
wrap	plugin/surround.vim	/^function! s:wrap(string,char,type,...)$/;"	f
wrapreg	plugin/surround.vim	/^function! s:wrapreg(reg,char,...)$/;"	f
xolox#debug	autoload/xolox.vim	/^function! xolox#debug(...) " -- show a formatted debugging message to the user {{{1$/;"	f
xolox#escape#pattern	autoload/xolox/escape.vim	/^function! xolox#escape#pattern(string)$/;"	f
xolox#escape#substitute	autoload/xolox/escape.vim	/^function! xolox#escape#substitute(string)$/;"	f
xolox#is_windows	autoload/xolox.vim	/^function! xolox#is_windows() " {{{1$/;"	f
xolox#message	autoload/xolox.vim	/^function! xolox#message(...) " -- show a formatted informational message to the user {{{1$/;"	f
xolox#path#absolute	autoload/xolox/path.vim	/^function! xolox#path#absolute(path)$/;"	f
xolox#path#commonprefix	autoload/xolox/path.vim	/^function! xolox#path#commonprefix(paths)$/;"	f
xolox#path#decode	autoload/xolox/path.vim	/^function! xolox#path#decode(encoded_path)$/;"	f
xolox#path#encode	autoload/xolox/path.vim	/^function! xolox#path#encode(path)$/;"	f
xolox#path#equals	autoload/xolox/path.vim	/^  function! xolox#path#equals(a, b)$/;"	f
xolox#path#join	autoload/xolox/path.vim	/^function! xolox#path#join(parts)$/;"	f
xolox#path#merge	autoload/xolox/path.vim	/^function! xolox#path#merge(parent, child)$/;"	f
xolox#path#relative	autoload/xolox/path.vim	/^function! xolox#path#relative(path, base)$/;"	f
xolox#path#split	autoload/xolox/path.vim	/^function! xolox#path#split(path)$/;"	f
xolox#path#tempdir	autoload/xolox/path.vim	/^function! xolox#path#tempdir()$/;"	f
xolox#quote_pattern	autoload/xolox.vim	/^function! xolox#quote_pattern(s) " -- convert {s} to pattern that matches {s} literally (on word boundaries!) {{{1$/;"	f
xolox#timer#format_timespan	autoload/xolox/timer.vim	/^function! xolox#timer#format_timespan(ts)$/;"	f
xolox#timer#start	autoload/xolox/timer.vim	/^function! xolox#timer#start()$/;"	f
xolox#timer#stop	autoload/xolox/timer.vim	/^function! xolox#timer#stop(...)$/;"	f
xolox#trim	autoload/xolox.vim	/^function! xolox#trim(s) " -- trim whitespace from start and end of {s} {{{1$/;"	f
xolox#unique	autoload/xolox.vim	/^function! xolox#unique(list) " -- remove duplicate values from {list} (in-place) {{{1$/;"	f
xolox#warning	autoload/xolox.vim	/^function! xolox#warning(...) " -- show a formatted warning message to the user {{{1$/;"	f
xterm?	ruby/command-t/controller.rb	/^    def xterm?$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
yS	plugin/surround.vim	/^  nmap      yS   <Plug>YSurround$/;"	m
ySS	plugin/surround.vim	/^  nmap      ySS  <Plug>YSsurround$/;"	m
ySs	plugin/surround.vim	/^  nmap      ySs  <Plug>YSsurround$/;"	m
ys	plugin/surround.vim	/^  nmap      ys   <Plug>Ysurround$/;"	m
yss	plugin/surround.vim	/^  nmap      yss  <Plug>Yssurround$/;"	m
zo	sessions/default.vim	/^normal zo$/;"	m
zt	sessions/default.vim	/^normal! zt$/;"	m
